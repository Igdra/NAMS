<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>NAMS - Not Another MUD Server: server.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">NAMS - Not Another MUD Server
   
   </div>
   <div id="projectbrief">NAMS is a C++ MUD server with the primary goals of a safe, modular design and a server core that is substantially decouppled from game logic.</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="dynsections.js"></script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">server.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="server_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/***************************************************************************</span>
<a name="l00002"></a>00002 <span class="comment"> * NAMS - Not Another MUD Server                                           *</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2012 Matthew Goff (matt@goff.cc) &lt;http://www.ackmud.net/&gt; *</span>
<a name="l00004"></a>00004 <span class="comment"> *                                                                         *</span>
<a name="l00005"></a>00005 <span class="comment"> * This program is free software: you can redistribute it and/or modify    *</span>
<a name="l00006"></a>00006 <span class="comment"> * it under the terms of the GNU General Public License as published by    *</span>
<a name="l00007"></a>00007 <span class="comment"> * the Free Software Foundation, either version 3 of the License, or       *</span>
<a name="l00008"></a>00008 <span class="comment"> * (at your option) any later version.                                     *</span>
<a name="l00009"></a>00009 <span class="comment"> *                                                                         *</span>
<a name="l00010"></a>00010 <span class="comment"> * This program is distributed in the hope that it will be useful,         *</span>
<a name="l00011"></a>00011 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of          *</span>
<a name="l00012"></a>00012 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *</span>
<a name="l00013"></a>00013 <span class="comment"> * GNU General Public License for more details.                            *</span>
<a name="l00014"></a>00014 <span class="comment"> *                                                                         *</span>
<a name="l00015"></a>00015 <span class="comment"> * You should have received a copy of the GNU General Public License       *</span>
<a name="l00016"></a>00016 <span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.   *</span>
<a name="l00017"></a>00017 <span class="comment"> ***************************************************************************/</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &quot;<a class="code" href="includes_8h.xhtml" title="All non-system includes that need to be within each .cpp file.">h/includes.h</a>&quot;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;<a class="code" href="class_8h.xhtml" title="All class declarations.">h/class.h</a>&quot;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="server_8h.xhtml" title="The Server class.">h/server.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.xhtml" title="The Command class.">h/command.h</a>&quot;</span>
<a name="l00027"></a>00027  
<a name="l00034"></a><a class="code" href="classServer.xhtml#ac2e1d14caee54a38a89c2394abe6e5a5">00034</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classServer.xhtml#ac2e1d14caee54a38a89c2394abe6e5a5" title="Search all subfolders of CFG_DAT_DIR_COMMAND and call Command::New() to load each file found to memor...">Server::LoadCommands</a>()
<a name="l00035"></a>00035 {
<a name="l00036"></a>00036     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00037"></a>00037     timeval start, finish;
<a name="l00038"></a>00038     <a class="code" href="classCommand.xhtml">Command</a>* cmd = NULL;
<a name="l00039"></a>00039     multimap&lt;bool,string&gt; files;
<a name="l00040"></a>00040     <a class="code" href="macros_8h.xhtml#ac49d0f3d55253bd7403da9e5fcab7504" title="Define an iterator variable (name) of (type1,type2) using (container).">MITER</a>( multimap, <span class="keywordtype">bool</span>,<span class="keywordtype">string</span>, mi );
<a name="l00041"></a>00041 
<a name="l00042"></a>00042     start = <a class="code" href="namespaceUtils.xhtml#adbb91eecf7e80e6e97b3ebe38123cc12">Utils::CurrentTime</a>();
<a name="l00043"></a>00043     <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( 0, <span class="stringliteral">&quot;Loading commands...&quot;</span> );
<a name="l00044"></a>00044 
<a name="l00045"></a>00045     <span class="comment">// Populate the multimape with a recursive listing of the commands folder</span>
<a name="l00046"></a>00046     <a class="code" href="namespaceUtils.xhtml#af8f745fab0d76a937181e752a54015e4">Utils::ListDirectory</a>( <a class="code" href="config_8h.xhtml#af2e75e297c4447df28b526dff66734ce" title="Directory for commands to be loaded from; should contain subdirs a-z.">CFG_DAT_DIR_COMMAND</a>, <span class="keyword">true</span>, files, <a class="code" href="classServer.xhtml#a1747867dad63252314aa7083b0084e2b">m_dir_close</a>, <a class="code" href="classServer.xhtml#ad14d47d1da6c22097a242519709e960c">m_dir_open</a> );
<a name="l00047"></a>00047 
<a name="l00048"></a>00048     <span class="keywordflow">if</span> ( files.empty() )
<a name="l00049"></a>00049     {
<a name="l00050"></a>00050         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Server::LoadCommands()-&gt;Utils::ListDirectory()-&gt; CFG_DAT_DIR_COMMAND returned NULL&quot;</span> );
<a name="l00051"></a>00051         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00052"></a>00052     }
<a name="l00053"></a>00053 
<a name="l00054"></a>00054     <span class="keywordflow">for</span> ( mi = files.begin(); mi != files.end(); mi++ )
<a name="l00055"></a>00055     {
<a name="l00056"></a>00056         <span class="keywordflow">if</span> ( mi-&gt;first == <a class="code" href="enum_8h.xhtml#a9325070b1daf70dbe43f7fb9a341aaf2">UTILS_IS_FILE</a> )
<a name="l00057"></a>00057         {
<a name="l00058"></a>00058             cmd = <span class="keyword">new</span> <a class="code" href="classCommand.xhtml">Command</a>();
<a name="l00059"></a>00059             <span class="keywordflow">if</span> ( !cmd-&gt;<a class="code" href="classCommand.xhtml#a6b8eed27f76619d07effd72372a4be48" title="Load a command to memory from a file within a subdirectory of CFG_DAT_DIR_COMMAND.">New</a>( mi-&gt;second ) )
<a name="l00060"></a>00060             {
<a name="l00061"></a>00061                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::LoadCommands()-&gt;Command::Load()-&gt; command %s returned false&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( mi-&gt;second ) );
<a name="l00062"></a>00062                 <span class="keyword">delete</span> cmd;
<a name="l00063"></a>00063             }
<a name="l00064"></a>00064         }
<a name="l00065"></a>00065     }
<a name="l00066"></a>00066 
<a name="l00067"></a>00067     finish = <a class="code" href="namespaceUtils.xhtml#adbb91eecf7e80e6e97b3ebe38123cc12">Utils::CurrentTime</a>();
<a name="l00068"></a>00068     <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( 0, <span class="stringliteral">&quot;Loaded %lu commands in %lums.&quot;</span>, <a class="code" href="list_8cpp.xhtml#a622badbc988ce65ebb3b4c1c8eb197b4" title="All commands loaded into memory.">command_list</a>.size(), <a class="code" href="namespaceUtils.xhtml#a405af6e04f92e289f5be1f8ae24a78ee">Utils::DiffTime</a>( start, finish, <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88ab80ef2c700675085764563f89553686d">UTILS_TIME_MS</a> ) );
<a name="l00069"></a>00069 
<a name="l00070"></a>00070     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00071"></a>00071 }
<a name="l00072"></a>00072 
<a name="l00078"></a><a class="code" href="classServer.xhtml#a2b4cec469bb99c2a45e49de5ba74d1ae">00078</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="classServer.xhtml#a2b4cec469bb99c2a45e49de5ba74d1ae" title="Loop through all connected SocketClient objects to obtain a Thread::MutexLock() and then signal each ...">Server::ProcessInput</a>()
<a name="l00079"></a>00079 {
<a name="l00080"></a>00080     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00081"></a>00081     <a class="code" href="classServer.xhtml#a928e4066f1c5c5b5e0c6e4cd13edfc29">ITER</a>( list, <a class="code" href="classSocketClient.xhtml">SocketClient</a>*, si );
<a name="l00082"></a>00082     <a class="code" href="classSocketClient.xhtml">SocketClient</a>* socket_client;
<a name="l00083"></a>00083     <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a> client_desc = 0;
<a name="l00084"></a>00084 
<a name="l00085"></a>00085     <span class="keywordflow">for</span> ( si = <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.begin(); si != <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.end(); si = m_socket_client_next )
<a name="l00086"></a>00086     {
<a name="l00087"></a>00087         socket_client = *si;
<a name="l00088"></a>00088         m_socket_client_next = ++si;
<a name="l00089"></a>00089 
<a name="l00090"></a>00090         <span class="keywordflow">if</span> ( ( client_desc = socket_client-&gt;<a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82">gDescriptor</a>() ) &lt; 1 )
<a name="l00091"></a>00091         {
<a name="l00092"></a>00092             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::ProcessInput()-&gt;SocketClient::gDescriptor()-&gt; returned invalid descriptor: %ld&quot;</span>, client_desc );
<a name="l00093"></a>00093             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00094"></a>00094             <span class="keywordflow">continue</span>;
<a name="l00095"></a>00095         }
<a name="l00096"></a>00096 
<a name="l00097"></a>00097         <span class="keywordflow">if</span> ( !socket_client-&gt;<a class="code" href="classSocketClient.xhtml#ad4f63c7d906310dc56a1217136047d7f" title="Interpret the command at the front of the queue.">ProcessCommand</a>() )
<a name="l00098"></a>00098         {
<a name="l00099"></a>00099             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::ProcessInput()-&gt;SocketClient::ProcessCommand()-&gt; descriptor %ld returned false&quot;</span>, client_desc );
<a name="l00100"></a>00100             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00101"></a>00101             <span class="keywordflow">continue</span>;
<a name="l00102"></a>00102         }
<a name="l00103"></a>00103     }
<a name="l00104"></a>00104 
<a name="l00105"></a>00105     <span class="keywordflow">return</span>;
<a name="l00106"></a>00106 }
<a name="l00107"></a>00107 
<a name="l00113"></a><a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762">00113</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762" title="Perform a clean shutdown of the NAMS server providing a chance to complete disk writes and free all m...">Server::Shutdown</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a>&amp; status )
<a name="l00114"></a>00114 {
<a name="l00115"></a>00115     <span class="keywordtype">bool</span> was_running = !<a class="code" href="classServer.xhtml#a959219a66f40019668e8d56e4c0c4cb6">m_shutdown</a>;
<a name="l00116"></a>00116     <a class="code" href="macros_8h.xhtml#ac49d0f3d55253bd7403da9e5fcab7504" title="Define an iterator variable (name) of (type1,type2) using (container).">MITER</a>( multimap, <span class="keyword">const</span> <span class="keywordtype">char</span>,<a class="code" href="classCommand.xhtml">Command</a>*, mi );
<a name="l00117"></a>00117     <a class="code" href="macros_8h.xhtml#ac49d0f3d55253bd7403da9e5fcab7504" title="Define an iterator variable (name) of (type1,type2) using (container).">MITER</a>( multimap, <span class="keyword">const</span> <span class="keywordtype">char</span>,<a class="code" href="classCommand.xhtml">Command</a>*, mi_next );
<a name="l00118"></a>00118     <a class="code" href="macros_8h.xhtml#ac49d0f3d55253bd7403da9e5fcab7504" title="Define an iterator variable (name) of (type1,type2) using (container).">MITER</a>( map, <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>,<span class="keywordtype">string</span>, ti );
<a name="l00119"></a>00119     <a class="code" href="macros_8h.xhtml#ac49d0f3d55253bd7403da9e5fcab7504" title="Define an iterator variable (name) of (type1,type2) using (container).">MITER</a>( map, <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>,<span class="keywordtype">string</span>, ti_next );
<a name="l00120"></a>00120     <a class="code" href="classServer.xhtml#a959219a66f40019668e8d56e4c0c4cb6">m_shutdown</a> = <span class="keyword">true</span>;
<a name="l00121"></a>00121 
<a name="l00122"></a>00122     <span class="comment">// Cleanup commands</span>
<a name="l00123"></a>00123     <span class="keywordflow">for</span> ( mi = <a class="code" href="list_8cpp.xhtml#a622badbc988ce65ebb3b4c1c8eb197b4" title="All commands loaded into memory.">command_list</a>.begin(); mi != <a class="code" href="list_8cpp.xhtml#a622badbc988ce65ebb3b4c1c8eb197b4" title="All commands loaded into memory.">command_list</a>.end(); )
<a name="l00124"></a>00124     {
<a name="l00125"></a>00125         mi_next = mi++;
<a name="l00126"></a>00126         mi_next-&gt;second-&gt;Delete();
<a name="l00127"></a>00127         <a class="code" href="list_8cpp.xhtml#a622badbc988ce65ebb3b4c1c8eb197b4" title="All commands loaded into memory.">command_list</a>.erase( mi_next );
<a name="l00128"></a>00128     }
<a name="l00129"></a>00129 
<a name="l00130"></a>00130     <span class="comment">// Cleanup threads</span>
<a name="l00131"></a>00131     <span class="keywordflow">for</span> ( ti = <a class="code" href="list_8cpp.xhtml#aaf5f7633ec620b380d55167e8213da84" title="All active threads within the server.">thread_list</a>.begin(); ti != <a class="code" href="list_8cpp.xhtml#aaf5f7633ec620b380d55167e8213da84" title="All active threads within the server.">thread_list</a>.end(); )
<a name="l00132"></a>00132     {
<a name="l00133"></a>00133         ti_next = ti++;
<a name="l00134"></a>00134         pthread_cancel( ti_next-&gt;first );
<a name="l00135"></a>00135         <a class="code" href="list_8cpp.xhtml#aaf5f7633ec620b380d55167e8213da84" title="All active threads within the server.">thread_list</a>.erase( ti_next );
<a name="l00136"></a>00136     }
<a name="l00137"></a>00137 
<a name="l00138"></a>00138     <span class="comment">// Only output if the server actually booted; otherwise it probably faulted while getting a port from main()</span>
<a name="l00139"></a>00139     <span class="keywordflow">if</span> ( was_running )
<a name="l00140"></a>00140     {
<a name="l00141"></a>00141         <span class="keywordflow">if</span> ( status == EXIT_SUCCESS )
<a name="l00142"></a>00142             <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( 0, <a class="code" href="config_8h.xhtml#ac53ab4c77c45a5e739a054086eec42fa" title="String to write to log on EXIT_SUCCESS.">CFG_STR_EXIT_SUCCESS</a> );
<a name="l00143"></a>00143         <span class="keywordflow">else</span>
<a name="l00144"></a>00144             <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( 0, <a class="code" href="config_8h.xhtml#ac890497fb16954e976eabed51b23b1dd" title="String to write to log on EXIT_FAILURE.">CFG_STR_EXIT_FAILURE</a> );
<a name="l00145"></a>00145     }
<a name="l00146"></a>00146 
<a name="l00147"></a>00147     ::exit( status );
<a name="l00148"></a>00148 }
<a name="l00149"></a>00149 
<a name="l00154"></a><a class="code" href="classServer.xhtml#a84ed4b0103f83fe0ece0a89983d0787a">00154</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="classServer.xhtml#a84ed4b0103f83fe0ece0a89983d0787a" title="Start the NAMS server. Responsible for calling all critical boot-time functions such as SocketServer ...">Server::Startup</a>()
<a name="l00155"></a>00155 {
<a name="l00156"></a>00156     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00157"></a>00157     <a class="code" href="classSocketServer.xhtml">SocketServer</a>* socket_server;
<a name="l00158"></a>00158     <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a> descriptor = 0;
<a name="l00159"></a>00159     <a class="code" href="classServer.xhtml#a959219a66f40019668e8d56e4c0c4cb6">m_shutdown</a> = <span class="keyword">false</span>;
<a name="l00160"></a>00160 
<a name="l00161"></a>00161     <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( 0, <span class="stringliteral">&quot;%s started.&quot;</span>, <a class="code" href="config_8h.xhtml#ae0189326402738016ca074f43606978f" title="The current server version.">CFG_STR_VERSION</a> );
<a name="l00162"></a>00162     <a class="code" href="classServer.xhtml#ab31b9d2584a9bdcae78154fb7ed37915">m_time_boot</a> = <a class="code" href="namespaceUtils.xhtml#adbb91eecf7e80e6e97b3ebe38123cc12">Utils::CurrentTime</a>();
<a name="l00163"></a>00163 
<a name="l00164"></a>00164     <span class="keywordflow">if</span> ( ( descriptor = ::socket( AF_INET6, SOCK_STREAM, 0 ) ) &lt; 0 )
<a name="l00165"></a>00165     {
<a name="l00166"></a>00166         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Server::Startup()-&gt;socket()-&gt;&quot;</span> );
<a name="l00167"></a>00167         <a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762" title="Perform a clean shutdown of the NAMS server providing a chance to complete disk writes and free all m...">Shutdown</a>( EXIT_FAILURE );
<a name="l00168"></a>00168     }
<a name="l00169"></a>00169 
<a name="l00170"></a>00170     socket_server = <span class="keyword">new</span> <a class="code" href="classSocketServer.xhtml">SocketServer</a>( <span class="keyword">this</span>, descriptor );
<a name="l00171"></a>00171     <a class="code" href="classServer.xhtml#abc51b5fc62103bb44ef90b35f1bac666">m_socket</a> = socket_server;
<a name="l00172"></a>00172 
<a name="l00173"></a>00173     <span class="keywordflow">if</span> ( !socket_server-&gt;<a class="code" href="classSocketServer.xhtml#a613401f64ca4c185e0a90dd2ae57b546">Thread</a>() )
<a name="l00174"></a>00174     {
<a name="l00175"></a>00175         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Server::Startup()-&gt;SocketServer::Thread()-&gt; returned false&quot;</span> );
<a name="l00176"></a>00176         <a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762" title="Perform a clean shutdown of the NAMS server providing a chance to complete disk writes and free all m...">Shutdown</a>( EXIT_FAILURE );
<a name="l00177"></a>00177     }
<a name="l00178"></a>00178 
<a name="l00179"></a>00179     <span class="comment">// Bump ourselves to the root folder for file paths</span>
<a name="l00180"></a>00180     <span class="keywordflow">if</span> ( ::chdir( <span class="stringliteral">&quot;..&quot;</span> ) &lt; 0 )
<a name="l00181"></a>00181     {
<a name="l00182"></a>00182         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Server::Startup()-&gt;chdir()-&gt;&quot;</span> );
<a name="l00183"></a>00183         <a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762" title="Perform a clean shutdown of the NAMS server providing a chance to complete disk writes and free all m...">Shutdown</a>( EXIT_FAILURE );
<a name="l00184"></a>00184     }
<a name="l00185"></a>00185 
<a name="l00186"></a>00186     <span class="keywordflow">if</span> ( !<a class="code" href="classServer.xhtml#ac2e1d14caee54a38a89c2394abe6e5a5" title="Search all subfolders of CFG_DAT_DIR_COMMAND and call Command::New() to load each file found to memor...">LoadCommands</a>() )
<a name="l00187"></a>00187     {
<a name="l00188"></a>00188         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Server::Startup()-&gt;Server::LoadCommands()-&gt; returned false&quot;</span> );
<a name="l00189"></a>00189         <a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762" title="Perform a clean shutdown of the NAMS server providing a chance to complete disk writes and free all m...">Shutdown</a>( EXIT_FAILURE );
<a name="l00190"></a>00190     }
<a name="l00191"></a>00191 
<a name="l00192"></a>00192     <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( 0, <span class="stringliteral">&quot;%s is ready on port %lu.&quot;</span>, <a class="code" href="config_8h.xhtml#ae0189326402738016ca074f43606978f" title="The current server version.">CFG_STR_VERSION</a>, <a class="code" href="classServer.xhtml#af41cecc8069262fe8e795518afc93bd6">m_port</a> );
<a name="l00193"></a>00193     <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( 0, <span class="stringliteral">&quot;Last compiled on &quot;</span> __DATE__ <span class="stringliteral">&quot; at &quot;</span> __TIME__ <span class="stringliteral">&quot;.&quot;</span> );
<a name="l00194"></a>00194 
<a name="l00195"></a>00195 system( <span class="stringliteral">&quot;pwd&quot;</span> );
<a name="l00196"></a>00196 system( <span class="stringliteral">&quot;which g++&quot;</span> );
<a name="l00197"></a>00197 chroot(<span class="stringliteral">&quot;/home/matt/muds/active/nams&quot;</span>);
<a name="l00198"></a>00198 system( <span class="stringliteral">&quot;pwd&quot;</span> );
<a name="l00199"></a>00199 system( <span class="stringliteral">&quot;which g++&quot;</span> );
<a name="l00200"></a>00200     <span class="keywordflow">return</span>;
<a name="l00201"></a>00201 }
<a name="l00202"></a>00202 
<a name="l00207"></a><a class="code" href="classServer.xhtml#a50b81aa91d8fdaee6f52c5c5ec987990">00207</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="classServer.xhtml#a50b81aa91d8fdaee6f52c5c5ec987990" title="The core update loop of NAMS. This loop spawns all other subsystem update routines and then sleeps fo...">Server::Update</a>()
<a name="l00208"></a>00208 {
<a name="l00209"></a>00209     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00210"></a>00210 
<a name="l00211"></a>00211     <a class="code" href="classServer.xhtml#a8f5d1702652eae5aa8602fd7b24d4b5c">m_time_current</a> = <a class="code" href="namespaceUtils.xhtml#adbb91eecf7e80e6e97b3ebe38123cc12">Utils::CurrentTime</a>();
<a name="l00212"></a>00212 
<a name="l00213"></a>00213     <a class="code" href="classServer.xhtml#a2b4cec469bb99c2a45e49de5ba74d1ae" title="Loop through all connected SocketClient objects to obtain a Thread::MutexLock() and then signal each ...">ProcessInput</a>();
<a name="l00214"></a>00214 
<a name="l00215"></a>00215     <span class="comment">// Sleep to control game pacing</span>
<a name="l00216"></a>00216     ::usleep( <a class="code" href="macros_8h.xhtml#a5fc45be6b0bb71dc5d4c6390d98bf3ee" title="This is the maximum value usleep will take per man (3) usleep -- 1 second.">USLEEP_MAX</a> / <a class="code" href="config_8h.xhtml#abf59791d9bc371bb841717a963babfc3" title="How many cycles per second should be processed.">CFG_GAM_PULSE_RATE</a> );
<a name="l00217"></a>00217 
<a name="l00218"></a>00218     <span class="keywordflow">return</span>;
<a name="l00219"></a>00219 } 
<a name="l00228"></a><a class="code" href="classServer.xhtml#a49dcdc5d378b3c12c46b80788c986052">00228</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="classServer.xhtml#a49dcdc5d378b3c12c46b80788c986052" title="Gets the hostname of the machine that NAMS is running on.">Server::gHostname</a>()<span class="keyword"> const</span>
<a name="l00229"></a>00229 <span class="keyword"></span>{
<a name="l00230"></a>00230     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00231"></a>00231     <span class="keywordtype">string</span> output;
<a name="l00232"></a>00232     <span class="keywordtype">char</span> hostname[<a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a>] = {<span class="charliteral">&#39;\0&#39;</span>};
<a name="l00233"></a>00233 
<a name="l00234"></a>00234     <span class="keywordflow">if</span> ( ::gethostname( hostname, <a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a> - 1 ) &lt; 0 )
<a name="l00235"></a>00235     {
<a name="l00236"></a>00236         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Server::gHostname()-&gt;gethostname()-&gt;&quot;</span> );
<a name="l00237"></a>00237         output = <span class="stringliteral">&quot;(unknown)&quot;</span>;
<a name="l00238"></a>00238 
<a name="l00239"></a>00239         <span class="keywordflow">return</span> output;
<a name="l00240"></a>00240     }
<a name="l00241"></a>00241 
<a name="l00242"></a>00242     output = hostname;
<a name="l00243"></a>00243 
<a name="l00244"></a>00244     <span class="keywordflow">return</span> output;
<a name="l00245"></a>00245 }
<a name="l00246"></a>00246 
<a name="l00252"></a><a class="code" href="classServer.xhtml#aed2e8d1792f3ee019c859c19bfd187e8">00252</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="classServer.xhtml#aed2e8d1792f3ee019c859c19bfd187e8" title="Display miscellaneous data about the NAMS server, such as total data transfered, objects in memory...">Server::gStatus</a>()<span class="keyword"> const</span>
<a name="l00253"></a>00253 <span class="keyword"></span>{
<a name="l00254"></a>00254     <span class="keywordtype">string</span> output;
<a name="l00255"></a>00255 
<a name="l00256"></a>00256     <span class="keywordflow">return</span> output;
<a name="l00257"></a>00257 } 
<a name="l00267"></a><a class="code" href="classServer.xhtml#a89c8ebfdaa4826583f6b53c62b86b244">00267</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classServer.xhtml#a89c8ebfdaa4826583f6b53c62b86b244" title="Set the port of a NAMS Server object.">Server::sPort</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; port )
<a name="l00268"></a>00268 {
<a name="l00269"></a>00269     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00270"></a>00270 
<a name="l00271"></a>00271     <span class="comment">// No logger output; this should only be called pre-boot</span>
<a name="l00272"></a>00272     <span class="keywordflow">if</span> ( port &lt;= CFG_SOC_MIN_PORTNUM || port &gt;= <a class="code" href="config_8h.xhtml#a234e78c07d081a99b72af652cfa37cb8" title="The listening server socket must be below this port.">CFG_SOC_MAX_PORTNUM</a> )
<a name="l00273"></a>00273         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00274"></a>00274 
<a name="l00275"></a>00275     <a class="code" href="classServer.xhtml#af41cecc8069262fe8e795518afc93bd6">m_port</a> = port;
<a name="l00276"></a>00276 
<a name="l00277"></a>00277     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00278"></a>00278 }
<a name="l00279"></a>00279 
<a name="l00286"></a><a class="code" href="classServer.xhtml#a1e68e32745cdfe194e0af388d9d5244a">00286</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classServer.xhtml#a1e68e32745cdfe194e0af388d9d5244a" title="Set the amount of subordinate SocketClient and SocketServer objects that have been closed on a NAMS S...">Server::sSocketClose</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; amount )
<a name="l00287"></a>00287 {
<a name="l00288"></a>00288     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00289"></a>00289 
<a name="l00290"></a>00290     <span class="keywordflow">if</span> ( amount &lt; 0 || ( ( <a class="code" href="classServer.xhtml#adc7365e75189f3e15ada44fb140e32b0">m_socket_close</a> + amount ) &gt;= <a class="code" href="limits_8h.xhtml#a036884201058b0d86aae031fdbcfa16f" title="The maximum value of any uint_t variable.">uintmax_t</a> ) )
<a name="l00291"></a>00291     {
<a name="l00292"></a>00292         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::sSocketClose()-&gt; called with m_socket_close overflow: %lu + %lu&quot;</span>, <a class="code" href="classServer.xhtml#adc7365e75189f3e15ada44fb140e32b0">m_socket_close</a>, amount );
<a name="l00293"></a>00293         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00294"></a>00294     }
<a name="l00295"></a>00295 
<a name="l00296"></a>00296     <a class="code" href="classServer.xhtml#adc7365e75189f3e15ada44fb140e32b0">m_socket_close</a> = amount;
<a name="l00297"></a>00297 
<a name="l00298"></a>00298     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00299"></a>00299 }
<a name="l00300"></a>00300 
<a name="l00307"></a><a class="code" href="classServer.xhtml#a2b261b9b308edee58ec6191966bd019a">00307</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classServer.xhtml#a2b261b9b308edee58ec6191966bd019a" title="Set the amount of subordinate SocketClient and SocketServer objects that have been opened on a NAMS S...">Server::sSocketOpen</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; amount )
<a name="l00308"></a>00308 {
<a name="l00309"></a>00309     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00310"></a>00310 
<a name="l00311"></a>00311     <span class="keywordflow">if</span> ( amount &lt; 0 || ( ( <a class="code" href="classServer.xhtml#a283e960ea969fe689650af43223395b9">m_socket_open</a> + amount ) &gt;= <a class="code" href="limits_8h.xhtml#a036884201058b0d86aae031fdbcfa16f" title="The maximum value of any uint_t variable.">uintmax_t</a> ) )
<a name="l00312"></a>00312     {
<a name="l00313"></a>00313         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::sSocketOpen()-&gt; called with m_socket_open overflow: %lu + %lu&quot;</span>, <a class="code" href="classServer.xhtml#a283e960ea969fe689650af43223395b9">m_socket_open</a>, amount );
<a name="l00314"></a>00314         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00315"></a>00315     }
<a name="l00316"></a>00316 
<a name="l00317"></a>00317     <a class="code" href="classServer.xhtml#a283e960ea969fe689650af43223395b9">m_socket_open</a> = amount;
<a name="l00318"></a>00318 
<a name="l00319"></a>00319     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00320"></a>00320 }
<a name="l00321"></a>00321 <span class="comment">//**@}*/</span>
<a name="l00322"></a>00322  
<a name="l00327"></a><a class="code" href="classServer.xhtml#ad5ec9462b520e59f7ea831e157ee5e59">00327</a> <a class="code" href="classServer.xhtml#ad5ec9462b520e59f7ea831e157ee5e59" title="Constructor for the Server class.">Server::Server</a>()
<a name="l00328"></a>00328 {
<a name="l00329"></a>00329     <a class="code" href="classServer.xhtml#a1747867dad63252314aa7083b0084e2b">m_dir_close</a> = 0;
<a name="l00330"></a>00330     <a class="code" href="classServer.xhtml#ad14d47d1da6c22097a242519709e960c">m_dir_open</a> = 0;
<a name="l00331"></a>00331     <a class="code" href="classServer.xhtml#af41cecc8069262fe8e795518afc93bd6">m_port</a> = 0;
<a name="l00332"></a>00332     <a class="code" href="classServer.xhtml#a959219a66f40019668e8d56e4c0c4cb6">m_shutdown</a> = <span class="keyword">true</span>;
<a name="l00333"></a>00333     <a class="code" href="classServer.xhtml#abc51b5fc62103bb44ef90b35f1bac666">m_socket</a> = 0;
<a name="l00334"></a>00334     m_socket_client_next = <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.begin();
<a name="l00335"></a>00335     <a class="code" href="classServer.xhtml#adc7365e75189f3e15ada44fb140e32b0">m_socket_close</a> = 0;
<a name="l00336"></a>00336     <a class="code" href="classServer.xhtml#a283e960ea969fe689650af43223395b9">m_socket_open</a> = 0;
<a name="l00337"></a>00337     <a class="code" href="classServer.xhtml#ab31b9d2584a9bdcae78154fb7ed37915">m_time_boot</a> = timeval();
<a name="l00338"></a>00338     <a class="code" href="classServer.xhtml#a8f5d1702652eae5aa8602fd7b24d4b5c">m_time_current</a> = timeval();
<a name="l00339"></a>00339 
<a name="l00340"></a>00340     <span class="keywordflow">return</span>;
<a name="l00341"></a>00341 }
<a name="l00342"></a>00342 
<a name="l00346"></a><a class="code" href="classServer.xhtml#a4b3aa2579cb1c8cd1d069582c14d0fa6">00346</a> <a class="code" href="classServer.xhtml#a4b3aa2579cb1c8cd1d069582c14d0fa6" title="Destructor for the Server class.">Server::~Server</a>()
<a name="l00347"></a>00347 {
<a name="l00348"></a>00348     <span class="keywordflow">return</span>;
<a name="l00349"></a>00349 }
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Thu Apr 19 2012 07:37:12 for NAMS - Not Another MUD Server by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
