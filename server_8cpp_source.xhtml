<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>NAMS - Not Another MUD Server: server.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">NAMS - Not Another MUD Server
   
   </div>
   <div id="projectbrief">NAMS is a C++ MUD server with the primary goals of a safe, modular design and a server core that is substantially decouppled from game logic.</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="dynsections.js"></script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">server.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="server_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/***************************************************************************</span>
<a name="l00002"></a>00002 <span class="comment"> * NAMS - Not Another MUD Server                                           *</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2012 Matthew Goff (matt@goff.cc) &lt;http://www.ackmud.net/&gt; *</span>
<a name="l00004"></a>00004 <span class="comment"> *                                                                         *</span>
<a name="l00005"></a>00005 <span class="comment"> * This program is free software: you can redistribute it and/or modify    *</span>
<a name="l00006"></a>00006 <span class="comment"> * it under the terms of the GNU General Public License as published by    *</span>
<a name="l00007"></a>00007 <span class="comment"> * the Free Software Foundation, either version 3 of the License, or       *</span>
<a name="l00008"></a>00008 <span class="comment"> * (at your option) any later version.                                     *</span>
<a name="l00009"></a>00009 <span class="comment"> *                                                                         *</span>
<a name="l00010"></a>00010 <span class="comment"> * This program is distributed in the hope that it will be useful,         *</span>
<a name="l00011"></a>00011 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of          *</span>
<a name="l00012"></a>00012 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *</span>
<a name="l00013"></a>00013 <span class="comment"> * GNU General Public License for more details.                            *</span>
<a name="l00014"></a>00014 <span class="comment"> *                                                                         *</span>
<a name="l00015"></a>00015 <span class="comment"> * You should have received a copy of the GNU General Public License       *</span>
<a name="l00016"></a>00016 <span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.   *</span>
<a name="l00017"></a>00017 <span class="comment"> ***************************************************************************/</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &quot;<a class="code" href="includes_8h.xhtml" title="All non-system includes that need to be within each .cpp file.">h/includes.h</a>&quot;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;<a class="code" href="class_8h.xhtml" title="All class declarations.">h/class.h</a>&quot;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="server_8h.xhtml" title="The Server class.">h/server.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.xhtml" title="The Command class.">h/command.h</a>&quot;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="comment">// Core</span>
<a name="l00029"></a><a class="code" href="classServer.xhtml#ac2e1d14caee54a38a89c2394abe6e5a5">00029</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classServer.xhtml#ac2e1d14caee54a38a89c2394abe6e5a5">Server::LoadCommands</a>()
<a name="l00030"></a>00030 {
<a name="l00031"></a>00031     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00032"></a>00032     timeval start, finish;
<a name="l00033"></a>00033     <a class="code" href="classCommand.xhtml">Command</a>* cmd = NULL;
<a name="l00034"></a>00034     multimap&lt;bool,string&gt; files;
<a name="l00035"></a>00035     <a class="code" href="macros_8h.xhtml#ac49d0f3d55253bd7403da9e5fcab7504" title="Define an iterator variable (name) of (type1,type2) using (container).">MITER</a>( multimap, <span class="keywordtype">bool</span>,<span class="keywordtype">string</span>, mi );
<a name="l00036"></a>00036 
<a name="l00037"></a>00037     start = <a class="code" href="namespaceUtils.xhtml#adbb91eecf7e80e6e97b3ebe38123cc12">Utils::CurrentTime</a>();
<a name="l00038"></a>00038     <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( 0, <span class="stringliteral">&quot;Loading commands...&quot;</span> );
<a name="l00039"></a>00039 
<a name="l00040"></a>00040     <span class="comment">// Populate the multimape with a recursive listing of the commands folder</span>
<a name="l00041"></a>00041     <a class="code" href="namespaceUtils.xhtml#af8f745fab0d76a937181e752a54015e4">Utils::ListDirectory</a>( <a class="code" href="config_8h.xhtml#af2e75e297c4447df28b526dff66734ce" title="Directory for commands to be loaded from; should contain subdirs a-z.">CFG_DAT_DIR_COMMAND</a>, <span class="keyword">true</span>, files, <a class="code" href="classServer.xhtml#a1747867dad63252314aa7083b0084e2b">m_dir_close</a>, <a class="code" href="classServer.xhtml#ad14d47d1da6c22097a242519709e960c">m_dir_open</a> );
<a name="l00042"></a>00042 
<a name="l00043"></a>00043     <span class="keywordflow">if</span> ( files.empty() )
<a name="l00044"></a>00044     {
<a name="l00045"></a>00045         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Server::LoadCommands()-&gt;Utils::ListDirectory()-&gt; CFG_DAT_DIR_COMMAND returned NULL&quot;</span> );
<a name="l00046"></a>00046         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00047"></a>00047     }
<a name="l00048"></a>00048 
<a name="l00049"></a>00049     <span class="keywordflow">for</span> ( mi = files.begin(); mi != files.end(); mi++ )
<a name="l00050"></a>00050     {
<a name="l00051"></a>00051         <span class="keywordflow">if</span> ( mi-&gt;first == <a class="code" href="enum_8h.xhtml#a9325070b1daf70dbe43f7fb9a341aaf2">UTILS_IS_FILE</a> )
<a name="l00052"></a>00052         {
<a name="l00053"></a>00053             cmd = <span class="keyword">new</span> <a class="code" href="classCommand.xhtml">Command</a>();
<a name="l00054"></a>00054             <span class="keywordflow">if</span> ( !cmd-&gt;<a class="code" href="classCommand.xhtml#a6b8eed27f76619d07effd72372a4be48" title="Load a command to memory from a file within a subdirectory of CFG_DAT_DIR_COMMAND.">New</a>( mi-&gt;second ) )
<a name="l00055"></a>00055             {
<a name="l00056"></a>00056                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::LoadCommands()-&gt;Command::Load()-&gt; command %s returned false&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( mi-&gt;second ) );
<a name="l00057"></a>00057                 <span class="keyword">delete</span> cmd;
<a name="l00058"></a>00058             }
<a name="l00059"></a>00059         }
<a name="l00060"></a>00060     }
<a name="l00061"></a>00061 
<a name="l00062"></a>00062     finish = <a class="code" href="namespaceUtils.xhtml#adbb91eecf7e80e6e97b3ebe38123cc12">Utils::CurrentTime</a>();
<a name="l00063"></a>00063     <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( 0, <span class="stringliteral">&quot;Loaded %lu commands in %lums.&quot;</span>, <a class="code" href="list_8cpp.xhtml#a622badbc988ce65ebb3b4c1c8eb197b4" title="All commands loaded into memory.">command_list</a>.size(), <a class="code" href="namespaceUtils.xhtml#a405af6e04f92e289f5be1f8ae24a78ee">Utils::DiffTime</a>( start, finish, <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88ab80ef2c700675085764563f89553686d">UTILS_TIME_MS</a> ) );
<a name="l00064"></a>00064 
<a name="l00065"></a>00065     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00066"></a>00066 }
<a name="l00067"></a>00067 
<a name="l00068"></a><a class="code" href="classServer.xhtml#a7f5259e36a6bcf3a78a5bede522c3632">00068</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classServer.xhtml#a7f5259e36a6bcf3a78a5bede522c3632">Server::ProcessInput</a>()
<a name="l00069"></a>00069 {
<a name="l00070"></a>00070     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00071"></a>00071     <a class="code" href="classServer.xhtml#a928e4066f1c5c5b5e0c6e4cd13edfc29">ITER</a>( list, <a class="code" href="classSocketClient.xhtml">SocketClient</a>*, si );
<a name="l00072"></a>00072     <a class="code" href="classSocketClient.xhtml">SocketClient</a>* socket_client;
<a name="l00073"></a>00073     <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a> client_desc = 0;
<a name="l00074"></a>00074 
<a name="l00075"></a>00075     <span class="keywordflow">for</span> ( si = <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.begin(); si != <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.end(); si = m_socket_client_next )
<a name="l00076"></a>00076     {
<a name="l00077"></a>00077         socket_client = *si;
<a name="l00078"></a>00078         m_socket_client_next = ++si;
<a name="l00079"></a>00079 
<a name="l00080"></a>00080         <span class="keywordflow">if</span> ( ( client_desc = socket_client-&gt;<a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82">gDescriptor</a>() ) &lt; 1 )
<a name="l00081"></a>00081         {
<a name="l00082"></a>00082             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::ProcessInput()-&gt;SocketClient::gDescriptor()-&gt; returned invalid descriptor: %ld&quot;</span>, client_desc );
<a name="l00083"></a>00083             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad">Delete</a>();
<a name="l00084"></a>00084             <span class="keywordflow">continue</span>;
<a name="l00085"></a>00085         }
<a name="l00086"></a>00086 
<a name="l00087"></a>00087         <span class="keywordflow">if</span> ( !socket_client-&gt;<a class="code" href="classSocketClient.xhtml#ad4f63c7d906310dc56a1217136047d7f">ProcessCommand</a>() )
<a name="l00088"></a>00088         {
<a name="l00089"></a>00089             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::ProcessInput()-&gt;SocketClient::ProcessCommand()-&gt; descriptor %ld returned false&quot;</span>, client_desc );
<a name="l00090"></a>00090             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad">Delete</a>();
<a name="l00091"></a>00091             <span class="keywordflow">continue</span>;
<a name="l00092"></a>00092         }
<a name="l00093"></a>00093     }
<a name="l00094"></a>00094 
<a name="l00095"></a>00095     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00096"></a>00096 }
<a name="l00097"></a>00097 
<a name="l00098"></a><a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762">00098</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762">Server::Shutdown</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a>&amp; status )
<a name="l00099"></a>00099 {
<a name="l00100"></a>00100     <span class="keywordtype">bool</span> was_running = !<a class="code" href="classServer.xhtml#a959219a66f40019668e8d56e4c0c4cb6">m_shutdown</a>;
<a name="l00101"></a>00101     <a class="code" href="macros_8h.xhtml#ac49d0f3d55253bd7403da9e5fcab7504" title="Define an iterator variable (name) of (type1,type2) using (container).">MITER</a>( multimap, <span class="keyword">const</span> <span class="keywordtype">char</span>,<a class="code" href="classCommand.xhtml">Command</a>*, mi );
<a name="l00102"></a>00102     <a class="code" href="macros_8h.xhtml#ac49d0f3d55253bd7403da9e5fcab7504" title="Define an iterator variable (name) of (type1,type2) using (container).">MITER</a>( multimap, <span class="keyword">const</span> <span class="keywordtype">char</span>,<a class="code" href="classCommand.xhtml">Command</a>*, mi_next );
<a name="l00103"></a>00103     <a class="code" href="macros_8h.xhtml#ac49d0f3d55253bd7403da9e5fcab7504" title="Define an iterator variable (name) of (type1,type2) using (container).">MITER</a>( map, <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>,<span class="keywordtype">string</span>, ti );
<a name="l00104"></a>00104     <a class="code" href="macros_8h.xhtml#ac49d0f3d55253bd7403da9e5fcab7504" title="Define an iterator variable (name) of (type1,type2) using (container).">MITER</a>( map, <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>,<span class="keywordtype">string</span>, ti_next );
<a name="l00105"></a>00105     <a class="code" href="classServer.xhtml#a959219a66f40019668e8d56e4c0c4cb6">m_shutdown</a> = <span class="keyword">true</span>;
<a name="l00106"></a>00106 
<a name="l00107"></a>00107     <span class="comment">// Cleanup commands</span>
<a name="l00108"></a>00108     <span class="keywordflow">for</span> ( mi = <a class="code" href="list_8cpp.xhtml#a622badbc988ce65ebb3b4c1c8eb197b4" title="All commands loaded into memory.">command_list</a>.begin(); mi != <a class="code" href="list_8cpp.xhtml#a622badbc988ce65ebb3b4c1c8eb197b4" title="All commands loaded into memory.">command_list</a>.end(); )
<a name="l00109"></a>00109     {
<a name="l00110"></a>00110         mi_next = mi++;
<a name="l00111"></a>00111         mi_next-&gt;second-&gt;Delete();
<a name="l00112"></a>00112         <a class="code" href="list_8cpp.xhtml#a622badbc988ce65ebb3b4c1c8eb197b4" title="All commands loaded into memory.">command_list</a>.erase( mi_next );
<a name="l00113"></a>00113     }
<a name="l00114"></a>00114 
<a name="l00115"></a>00115     <span class="comment">// Cleanup threads</span>
<a name="l00116"></a>00116     <span class="keywordflow">for</span> ( ti = <a class="code" href="list_8cpp.xhtml#aaf5f7633ec620b380d55167e8213da84" title="All active threads within the server.">thread_list</a>.begin(); ti != <a class="code" href="list_8cpp.xhtml#aaf5f7633ec620b380d55167e8213da84" title="All active threads within the server.">thread_list</a>.end(); )
<a name="l00117"></a>00117     {
<a name="l00118"></a>00118         ti_next = ti++;
<a name="l00119"></a>00119         pthread_cancel( ti_next-&gt;first );
<a name="l00120"></a>00120         <a class="code" href="list_8cpp.xhtml#aaf5f7633ec620b380d55167e8213da84" title="All active threads within the server.">thread_list</a>.erase( ti_next );
<a name="l00121"></a>00121     }
<a name="l00122"></a>00122 
<a name="l00123"></a>00123     <span class="comment">// Only output if the server actually booted; otherwise it probably faulted while getting a port from main()</span>
<a name="l00124"></a>00124     <span class="keywordflow">if</span> ( was_running )
<a name="l00125"></a>00125     {
<a name="l00126"></a>00126         <span class="keywordflow">if</span> ( status == EXIT_SUCCESS )
<a name="l00127"></a>00127             <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( 0, <a class="code" href="config_8h.xhtml#ac53ab4c77c45a5e739a054086eec42fa" title="String to write to log on EXIT_SUCCESS.">CFG_STR_EXIT_SUCCESS</a> );
<a name="l00128"></a>00128         <span class="keywordflow">else</span>
<a name="l00129"></a>00129             <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( 0, <a class="code" href="config_8h.xhtml#ac890497fb16954e976eabed51b23b1dd" title="String to write to log on EXIT_FAILURE.">CFG_STR_EXIT_FAILURE</a> );
<a name="l00130"></a>00130     }
<a name="l00131"></a>00131 
<a name="l00132"></a>00132     ::exit( status );
<a name="l00133"></a>00133 }
<a name="l00134"></a>00134 
<a name="l00135"></a><a class="code" href="classServer.xhtml#a84ed4b0103f83fe0ece0a89983d0787a">00135</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="classServer.xhtml#a84ed4b0103f83fe0ece0a89983d0787a">Server::Startup</a>()
<a name="l00136"></a>00136 {
<a name="l00137"></a>00137     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00138"></a>00138     <a class="code" href="classSocketServer.xhtml">SocketServer</a>* socket_server;
<a name="l00139"></a>00139     <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a> descriptor = 0;
<a name="l00140"></a>00140     <a class="code" href="classServer.xhtml#a959219a66f40019668e8d56e4c0c4cb6">m_shutdown</a> = <span class="keyword">false</span>;
<a name="l00141"></a>00141 
<a name="l00142"></a>00142     <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( 0, <span class="stringliteral">&quot;%s started.&quot;</span>, <a class="code" href="config_8h.xhtml#ae0189326402738016ca074f43606978f" title="The current server version.">CFG_STR_VERSION</a> );
<a name="l00143"></a>00143     <a class="code" href="classServer.xhtml#ab31b9d2584a9bdcae78154fb7ed37915">m_time_boot</a> = <a class="code" href="namespaceUtils.xhtml#adbb91eecf7e80e6e97b3ebe38123cc12">Utils::CurrentTime</a>();
<a name="l00144"></a>00144 
<a name="l00145"></a>00145     <span class="keywordflow">if</span> ( ( descriptor = ::socket( AF_INET6, SOCK_STREAM, 0 ) ) &lt; 0 )
<a name="l00146"></a>00146     {
<a name="l00147"></a>00147         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Server::Startup()-&gt;socket()-&gt;&quot;</span> );
<a name="l00148"></a>00148         <a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762">Shutdown</a>( EXIT_FAILURE );
<a name="l00149"></a>00149     }
<a name="l00150"></a>00150 
<a name="l00151"></a>00151     socket_server = <span class="keyword">new</span> <a class="code" href="classSocketServer.xhtml">SocketServer</a>( <span class="keyword">this</span>, descriptor );
<a name="l00152"></a>00152     <a class="code" href="classServer.xhtml#abc51b5fc62103bb44ef90b35f1bac666">m_socket</a> = socket_server;
<a name="l00153"></a>00153 
<a name="l00154"></a>00154     <span class="keywordflow">if</span> ( !socket_server-&gt;<a class="code" href="classSocketServer.xhtml#a613401f64ca4c185e0a90dd2ae57b546">Thread</a>() )
<a name="l00155"></a>00155     {
<a name="l00156"></a>00156         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Server::Startup()-&gt;SocketServer::Thread()-&gt; returned false&quot;</span> );
<a name="l00157"></a>00157         <a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762">Shutdown</a>( EXIT_FAILURE );
<a name="l00158"></a>00158     }
<a name="l00159"></a>00159 
<a name="l00160"></a>00160     <span class="comment">// Bump ourselves to the root folder for file paths</span>
<a name="l00161"></a>00161     <span class="keywordflow">if</span> ( ::chdir( <span class="stringliteral">&quot;..&quot;</span> ) &lt; 0 )
<a name="l00162"></a>00162     {
<a name="l00163"></a>00163         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Server::Startup()-&gt;chdir()-&gt;&quot;</span> );
<a name="l00164"></a>00164         <a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762">Shutdown</a>( EXIT_FAILURE );
<a name="l00165"></a>00165     }
<a name="l00166"></a>00166 
<a name="l00167"></a>00167     <span class="keywordflow">if</span> ( !<a class="code" href="classServer.xhtml#ac2e1d14caee54a38a89c2394abe6e5a5">LoadCommands</a>() )
<a name="l00168"></a>00168     {
<a name="l00169"></a>00169         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Server::Startup()-&gt;Server::LoadCommands()-&gt; returned false&quot;</span> );
<a name="l00170"></a>00170         <a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762">Shutdown</a>( EXIT_FAILURE );
<a name="l00171"></a>00171     }
<a name="l00172"></a>00172 
<a name="l00173"></a>00173     <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( 0, <span class="stringliteral">&quot;%s is ready on port %lu.&quot;</span>, <a class="code" href="config_8h.xhtml#ae0189326402738016ca074f43606978f" title="The current server version.">CFG_STR_VERSION</a>, <a class="code" href="classServer.xhtml#af41cecc8069262fe8e795518afc93bd6">m_port</a> );
<a name="l00174"></a>00174     <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( 0, <span class="stringliteral">&quot;Last compiled on &quot;</span> __DATE__ <span class="stringliteral">&quot; at &quot;</span> __TIME__ <span class="stringliteral">&quot;.&quot;</span> );
<a name="l00175"></a>00175 
<a name="l00176"></a>00176     <span class="keywordflow">return</span>;
<a name="l00177"></a>00177 }
<a name="l00178"></a>00178 
<a name="l00179"></a><a class="code" href="classServer.xhtml#a50b81aa91d8fdaee6f52c5c5ec987990">00179</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="classServer.xhtml#a50b81aa91d8fdaee6f52c5c5ec987990">Server::Update</a>()
<a name="l00180"></a>00180 {
<a name="l00181"></a>00181     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00182"></a>00182 
<a name="l00183"></a>00183     <a class="code" href="classServer.xhtml#a8f5d1702652eae5aa8602fd7b24d4b5c">m_time_current</a> = <a class="code" href="namespaceUtils.xhtml#adbb91eecf7e80e6e97b3ebe38123cc12">Utils::CurrentTime</a>();
<a name="l00184"></a>00184 
<a name="l00185"></a>00185     <span class="keywordflow">if</span> ( !<a class="code" href="classServer.xhtml#a7f5259e36a6bcf3a78a5bede522c3632">ProcessInput</a>() )
<a name="l00186"></a>00186     {
<a name="l00187"></a>00187         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Server::Update()-&gt;Server::ProcessInput()-&gt; returned false&quot;</span> );
<a name="l00188"></a>00188         <a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762">Shutdown</a>( EXIT_FAILURE );
<a name="l00189"></a>00189     }
<a name="l00190"></a>00190 
<a name="l00191"></a>00191     <span class="comment">// Sleep to control game pacing</span>
<a name="l00192"></a>00192     ::usleep( <a class="code" href="macros_8h.xhtml#a5fc45be6b0bb71dc5d4c6390d98bf3ee" title="This is the maximum value usleep will take per man (3) usleep -- 1 second.">USLEEP_MAX</a> / <a class="code" href="config_8h.xhtml#abf59791d9bc371bb841717a963babfc3" title="How many cycles per second should be processed.">CFG_GAM_PULSE_RATE</a> );
<a name="l00193"></a>00193 
<a name="l00194"></a>00194     <span class="keywordflow">return</span>;
<a name="l00195"></a>00195 }
<a name="l00196"></a>00196 
<a name="l00197"></a>00197 <span class="comment">// Query</span>
<a name="l00198"></a><a class="code" href="classServer.xhtml#a49dcdc5d378b3c12c46b80788c986052">00198</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="classServer.xhtml#a49dcdc5d378b3c12c46b80788c986052">Server::gHostname</a>()<span class="keyword"> const</span>
<a name="l00199"></a>00199 <span class="keyword"></span>{
<a name="l00200"></a>00200     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00201"></a>00201     <span class="keywordtype">string</span> output;
<a name="l00202"></a>00202     <span class="keywordtype">char</span> hostname[<a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a>] = {<span class="charliteral">&#39;\0&#39;</span>};
<a name="l00203"></a>00203 
<a name="l00204"></a>00204     <span class="keywordflow">if</span> ( ::gethostname( hostname, <a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a> - 1 ) &lt; 0 )
<a name="l00205"></a>00205     {
<a name="l00206"></a>00206         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Server::gHostname()-&gt;gethostname()-&gt;&quot;</span> );
<a name="l00207"></a>00207         output = <span class="stringliteral">&quot;(unknown)&quot;</span>;
<a name="l00208"></a>00208 
<a name="l00209"></a>00209         <span class="keywordflow">return</span> output;
<a name="l00210"></a>00210     }
<a name="l00211"></a>00211 
<a name="l00212"></a>00212     output = hostname;
<a name="l00213"></a>00213 
<a name="l00214"></a>00214     <span class="keywordflow">return</span> output;
<a name="l00215"></a>00215 }
<a name="l00216"></a>00216 
<a name="l00217"></a><a class="code" href="classServer.xhtml#aed2e8d1792f3ee019c859c19bfd187e8">00217</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="classServer.xhtml#aed2e8d1792f3ee019c859c19bfd187e8">Server::gStatus</a>()<span class="keyword"> const</span>
<a name="l00218"></a>00218 <span class="keyword"></span>{
<a name="l00219"></a>00219     <span class="keywordtype">string</span> output;
<a name="l00220"></a>00220 
<a name="l00221"></a>00221     <span class="keywordflow">return</span> output;
<a name="l00222"></a>00222 }
<a name="l00223"></a>00223 
<a name="l00224"></a>00224 <span class="comment">// Manipulate</span>
<a name="l00225"></a><a class="code" href="classServer.xhtml#a89c8ebfdaa4826583f6b53c62b86b244">00225</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classServer.xhtml#a89c8ebfdaa4826583f6b53c62b86b244">Server::sPort</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; port )
<a name="l00226"></a>00226 {
<a name="l00227"></a>00227     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00228"></a>00228 
<a name="l00229"></a>00229     <span class="comment">// No logger output; this should only be called pre-boot</span>
<a name="l00230"></a>00230     <span class="keywordflow">if</span> ( port &lt;= CFG_SOC_MIN_PORTNUM || port &gt;= <a class="code" href="config_8h.xhtml#a234e78c07d081a99b72af652cfa37cb8" title="The listening server socket must be below this port.">CFG_SOC_MAX_PORTNUM</a> )
<a name="l00231"></a>00231         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00232"></a>00232 
<a name="l00233"></a>00233     <a class="code" href="classServer.xhtml#af41cecc8069262fe8e795518afc93bd6">m_port</a> = port;
<a name="l00234"></a>00234 
<a name="l00235"></a>00235     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00236"></a>00236 }
<a name="l00237"></a>00237 
<a name="l00238"></a><a class="code" href="classServer.xhtml#a1e68e32745cdfe194e0af388d9d5244a">00238</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classServer.xhtml#a1e68e32745cdfe194e0af388d9d5244a">Server::sSocketClose</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; amount )
<a name="l00239"></a>00239 {
<a name="l00240"></a>00240     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00241"></a>00241 
<a name="l00242"></a>00242     <span class="keywordflow">if</span> ( amount &lt; 1 || ( ( <a class="code" href="classServer.xhtml#adc7365e75189f3e15ada44fb140e32b0">m_socket_close</a> + amount ) &gt;= <a class="code" href="limits_8h.xhtml#a036884201058b0d86aae031fdbcfa16f" title="The maximum value of any uint_t variable.">uintmax_t</a> ) )
<a name="l00243"></a>00243     {
<a name="l00244"></a>00244         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::sSocketClose()-&gt; called with m_socket_close overflow: %lu + %lu&quot;</span>, <a class="code" href="classServer.xhtml#adc7365e75189f3e15ada44fb140e32b0">m_socket_close</a>, amount );
<a name="l00245"></a>00245         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00246"></a>00246     }
<a name="l00247"></a>00247 
<a name="l00248"></a>00248     <a class="code" href="classServer.xhtml#adc7365e75189f3e15ada44fb140e32b0">m_socket_close</a> += amount;
<a name="l00249"></a>00249 
<a name="l00250"></a>00250     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00251"></a>00251 }
<a name="l00252"></a>00252 
<a name="l00253"></a><a class="code" href="classServer.xhtml#a2b261b9b308edee58ec6191966bd019a">00253</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classServer.xhtml#a2b261b9b308edee58ec6191966bd019a">Server::sSocketOpen</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; amount )
<a name="l00254"></a>00254 {
<a name="l00255"></a>00255     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00256"></a>00256 
<a name="l00257"></a>00257     <span class="keywordflow">if</span> ( amount &lt; 1 || ( ( <a class="code" href="classServer.xhtml#a283e960ea969fe689650af43223395b9">m_socket_open</a> + amount ) &gt;= <a class="code" href="limits_8h.xhtml#a036884201058b0d86aae031fdbcfa16f" title="The maximum value of any uint_t variable.">uintmax_t</a> ) )
<a name="l00258"></a>00258     {
<a name="l00259"></a>00259         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::sSocketOpen()-&gt; called with m_socket_open overflow: %lu + %lu&quot;</span>, <a class="code" href="classServer.xhtml#a283e960ea969fe689650af43223395b9">m_socket_open</a>, amount );
<a name="l00260"></a>00260         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00261"></a>00261     }
<a name="l00262"></a>00262 
<a name="l00263"></a>00263     <a class="code" href="classServer.xhtml#a283e960ea969fe689650af43223395b9">m_socket_open</a> += amount;
<a name="l00264"></a>00264 
<a name="l00265"></a>00265     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00266"></a>00266 }
<a name="l00267"></a>00267 
<a name="l00268"></a><a class="code" href="classServer.xhtml#ad5ec9462b520e59f7ea831e157ee5e59">00268</a> <a class="code" href="classServer.xhtml#ad5ec9462b520e59f7ea831e157ee5e59">Server::Server</a>()
<a name="l00269"></a>00269 {
<a name="l00270"></a>00270     <a class="code" href="classServer.xhtml#a1747867dad63252314aa7083b0084e2b">m_dir_close</a> = 0;
<a name="l00271"></a>00271     <a class="code" href="classServer.xhtml#ad14d47d1da6c22097a242519709e960c">m_dir_open</a> = 0;
<a name="l00272"></a>00272     <a class="code" href="classServer.xhtml#af41cecc8069262fe8e795518afc93bd6">m_port</a> = 0;
<a name="l00273"></a>00273     <a class="code" href="classServer.xhtml#a959219a66f40019668e8d56e4c0c4cb6">m_shutdown</a> = <span class="keyword">true</span>;
<a name="l00274"></a>00274     <a class="code" href="classServer.xhtml#abc51b5fc62103bb44ef90b35f1bac666">m_socket</a> = 0;
<a name="l00275"></a>00275     m_socket_client_next = <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.begin();
<a name="l00276"></a>00276     <a class="code" href="classServer.xhtml#adc7365e75189f3e15ada44fb140e32b0">m_socket_close</a> = 0;
<a name="l00277"></a>00277     <a class="code" href="classServer.xhtml#a283e960ea969fe689650af43223395b9">m_socket_open</a> = 0;
<a name="l00278"></a>00278     <a class="code" href="classServer.xhtml#ab31b9d2584a9bdcae78154fb7ed37915">m_time_boot</a> = timeval();
<a name="l00279"></a>00279     <a class="code" href="classServer.xhtml#a8f5d1702652eae5aa8602fd7b24d4b5c">m_time_current</a> = timeval();
<a name="l00280"></a>00280 
<a name="l00281"></a>00281     <span class="keywordflow">return</span>;
<a name="l00282"></a>00282 }
<a name="l00283"></a>00283 
<a name="l00284"></a><a class="code" href="classServer.xhtml#a4b3aa2579cb1c8cd1d069582c14d0fa6">00284</a> <a class="code" href="classServer.xhtml#a4b3aa2579cb1c8cd1d069582c14d0fa6">Server::~Server</a>()
<a name="l00285"></a>00285 {
<a name="l00286"></a>00286     <span class="keywordflow">return</span>;
<a name="l00287"></a>00287 }
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Sun Apr 15 2012 13:48:55 for NAMS - Not Another MUD Server by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
