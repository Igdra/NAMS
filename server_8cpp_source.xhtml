<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>NAMS - Not Another MUD Server: server.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">NAMS - Not Another MUD Server
   
   </div>
   <div id="projectbrief">NAMS is a C++ MUD server with the primary goals of a safe, modular design and a server core that is substantially decouppled from game logic.</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="dynsections.js"></script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">server.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="server_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/***************************************************************************</span>
<a name="l00002"></a>00002 <span class="comment"> * NAMS - Not Another MUD Server                                           *</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2012 Matthew Goff (matt@goff.cc) &lt;http://www.ackmud.net/&gt; *</span>
<a name="l00004"></a>00004 <span class="comment"> *                                                                         *</span>
<a name="l00005"></a>00005 <span class="comment"> * This program is free software: you can redistribute it and/or modify    *</span>
<a name="l00006"></a>00006 <span class="comment"> * it under the terms of the GNU General Public License as published by    *</span>
<a name="l00007"></a>00007 <span class="comment"> * the Free Software Foundation, either version 3 of the License, or       *</span>
<a name="l00008"></a>00008 <span class="comment"> * (at your option) any later version.                                     *</span>
<a name="l00009"></a>00009 <span class="comment"> *                                                                         *</span>
<a name="l00010"></a>00010 <span class="comment"> * This program is distributed in the hope that it will be useful,         *</span>
<a name="l00011"></a>00011 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of          *</span>
<a name="l00012"></a>00012 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *</span>
<a name="l00013"></a>00013 <span class="comment"> * GNU General Public License for more details.                            *</span>
<a name="l00014"></a>00014 <span class="comment"> *                                                                         *</span>
<a name="l00015"></a>00015 <span class="comment"> * You should have received a copy of the GNU General Public License       *</span>
<a name="l00016"></a>00016 <span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.   *</span>
<a name="l00017"></a>00017 <span class="comment"> ***************************************************************************/</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="includes_8h.xhtml" title="All non-system includes that need to be within each .cpp file.">h/includes.h</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="server_8h.xhtml" title="The Server namespace.">h/server.h</a>&quot;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="account_8h.xhtml" title="The Account class.">h/account.h</a>&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.xhtml" title="The Command class.">h/command.h</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="event_8h.xhtml" title="The Event class.">h/event.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="list_8h.xhtml" title="All globally referenced list / map / vector types.">h/list.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="location_8h.xhtml" title="The Location class.">h/location.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="socketclient_8h.xhtml" title="The SocketClient class.">h/socketclient.h</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="socketserver_8h.xhtml" title="The SocketServer class.">h/socketserver.h</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="character_8h.xhtml" title="The Character class.">h/character.h</a>&quot;</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="comment">/* Core */</span>
<a name="l00047"></a><a class="code" href="classServer_1_1Config.xhtml#ac8f796a3da103223e7f176800f4ef929">00047</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="classServer_1_1Config.xhtml#ac8f796a3da103223e7f176800f4ef929" title="Unload runtime configuration from memory.">Server::Config::Delete</a>()
<a name="l00048"></a>00048 {
<a name="l00049"></a>00049     <span class="keyword">delete</span> <span class="keyword">this</span>;
<a name="l00050"></a>00050 
<a name="l00051"></a>00051     <span class="keywordflow">return</span>;
<a name="l00052"></a>00052 }
<a name="l00053"></a>00053 
<a name="l00058"></a><a class="code" href="classServer_1_1Global.xhtml#a14a06f48b3f3d845f54e09c1cbdd8960">00058</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="classServer_1_1Global.xhtml#a14a06f48b3f3d845f54e09c1cbdd8960" title="Unload global variables from memory.">Server::Global::Delete</a>()
<a name="l00059"></a>00059 {
<a name="l00060"></a>00060     <span class="keyword">delete</span> <span class="keyword">this</span>;
<a name="l00061"></a>00061 
<a name="l00062"></a>00062     <span class="keywordflow">return</span>;
<a name="l00063"></a>00063 }
<a name="l00064"></a>00064 
<a name="l00069"></a><a class="code" href="classServer_1_1Stats.xhtml#a04c80b5a0190d979dce3b5b53c7fe122">00069</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="classServer_1_1Stats.xhtml#a04c80b5a0190d979dce3b5b53c7fe122" title="Unload runtime statistics from memory.">Server::Stats::Delete</a>()
<a name="l00070"></a>00070 {
<a name="l00071"></a>00071     <span class="keyword">delete</span> <span class="keyword">this</span>;
<a name="l00072"></a>00072 
<a name="l00073"></a>00073     <span class="keywordflow">return</span>;
<a name="l00074"></a>00074 }
<a name="l00075"></a>00075 
<a name="l00081"></a><a class="code" href="namespaceServer.xhtml#ae1bb8d3c7c71119bae6dd4205fd6c0cc">00081</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="namespaceServer.xhtml#ae1bb8d3c7c71119bae6dd4205fd6c0cc" title="Sends a message to all clients connected to the Server.">Server::Broadcast</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; msg )
<a name="l00082"></a>00082 {
<a name="l00083"></a>00083     <a class="code" href="classSocketClient.xhtml" title="Client / remote host specific functions that extend the Socket class.">SocketClient</a> *client = NULL;
<a name="l00084"></a>00084     <a class="code" href="macros_8h.xhtml#a05e235f398566bf49e21735cf00fc656" title="Define an iterator variable (name) of (type) using (container).">ITER</a>( list, <a class="code" href="classSocketClient.xhtml" title="Client / remote host specific functions that extend the Socket class.">SocketClient</a>*, si );
<a name="l00085"></a>00085 
<a name="l00086"></a>00086     <span class="keywordflow">for</span> ( si = <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.begin(); si != <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.end(); si = <a class="code" href="globals_8h.xhtml#a4746b8ff4575e45ad5e0850f331e713e">g_global</a>-&gt;<a class="code" href="classServer_1_1Global.xhtml#ac53fd9755bbb78e3dd0b77d4f81fb959">m_next_socket_client</a> )
<a name="l00087"></a>00087     {
<a name="l00088"></a>00088         client = *si;
<a name="l00089"></a>00089         <a class="code" href="globals_8h.xhtml#a4746b8ff4575e45ad5e0850f331e713e">g_global</a>-&gt;<a class="code" href="classServer_1_1Global.xhtml#ac53fd9755bbb78e3dd0b77d4f81fb959">m_next_socket_client</a> = ++si;
<a name="l00090"></a>00090 
<a name="l00091"></a>00091         client-&gt;<a class="code" href="classSocketClient.xhtml#a6268f3d184970ec0076da657c39d2e80" title="Process data from the client&#39;s send buffer and transmit it via the socket.">Send</a>( msg );
<a name="l00092"></a>00092         client-&gt;<a class="code" href="classSocketClient.xhtml#a6268f3d184970ec0076da657c39d2e80" title="Process data from the client&#39;s send buffer and transmit it via the socket.">Send</a>();
<a name="l00093"></a>00093     }
<a name="l00094"></a>00094 
<a name="l00095"></a>00095     <span class="keywordflow">return</span>;
<a name="l00096"></a>00096 }
<a name="l00097"></a>00097 
<a name="l00105"></a><a class="code" href="namespaceServer.xhtml#a45782df02e28df1c52c2a8edb90264e1">00105</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceServer.xhtml#a45782df02e28df1c52c2a8edb90264e1" title="Compile a Plugin file.">Server::BuildPlugin</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file, <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; force )
<a name="l00106"></a>00106 {
<a name="l00107"></a>00107     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00108"></a>00108     FILE* popen_fil = NULL;
<a name="l00109"></a>00109     <span class="keywordtype">string</span> build_cmd, build_res;
<a name="l00110"></a>00110     <span class="keywordtype">char</span> buf[<a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a>] = {<span class="charliteral">&#39;\0&#39;</span>};
<a name="l00111"></a>00111 
<a name="l00112"></a>00112     <span class="comment">// No need to run if the output file already exists and a rebuild wasn&#39;t forced</span>
<a name="l00113"></a>00113     <span class="keywordflow">if</span> ( <a class="code" href="namespaceUtils.xhtml#a158e1deb611937a6313e8683fe7db3fc" title="Determines if a file is readable.">Utils::iReadable</a>( <a class="code" href="namespaceUtils.xhtml#ad21617b756ef242fbc66e63dec3e4e4d" title="Returns a string consisting of directory/file.ext.">Utils::DirPath</a>( <a class="code" href="config_8h.xhtml#a7e0533ce20f3c090bdf24cc750916edb" title="Directory for plugins to be loaded from.">CFG_DAT_DIR_OBJ</a>, file, <a class="code" href="config_8h.xhtml#aec22aee0979a918423c5743237a25d81" title="File extension for files after they are compiled.">CFG_PLG_BUILD_EXT_OUT</a> ) ) &amp;&amp; !force )
<a name="l00114"></a>00114         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00115"></a>00115 
<a name="l00116"></a>00116     build_cmd = <a class="code" href="config_8h.xhtml#a7c9c9701683a057772f0aa1de56d7285" title="The compiler command to use when building plugins.">CFG_PLG_BUILD_CMD</a> <span class="stringliteral">&quot; -o &quot;</span>;
<a name="l00117"></a>00117     build_cmd.append( <a class="code" href="namespaceUtils.xhtml#ad21617b756ef242fbc66e63dec3e4e4d" title="Returns a string consisting of directory/file.ext.">Utils::DirPath</a>( <a class="code" href="config_8h.xhtml#a7e0533ce20f3c090bdf24cc750916edb" title="Directory for plugins to be loaded from.">CFG_DAT_DIR_OBJ</a>, file, <a class="code" href="config_8h.xhtml#aec22aee0979a918423c5743237a25d81" title="File extension for files after they are compiled.">CFG_PLG_BUILD_EXT_OUT</a> ) );
<a name="l00118"></a>00118     build_cmd.append( <span class="stringliteral">&quot; &quot;</span> );
<a name="l00119"></a>00119     build_cmd.append( <a class="code" href="namespaceUtils.xhtml#ad21617b756ef242fbc66e63dec3e4e4d" title="Returns a string consisting of directory/file.ext.">Utils::DirPath</a>( <a class="code" href="config_8h.xhtml#af2e75e297c4447df28b526dff66734ce" title="Directory for commands to be loaded from.">CFG_DAT_DIR_COMMAND</a>, file ) );
<a name="l00120"></a>00120     build_cmd.append( <span class="stringliteral">&quot; &quot;</span> <a class="code" href="config_8h.xhtml#aaa9f269d301804d5b6963323f2a049a6" title="All build options passed during compiling a plugin.">CFG_PLG_BUILD_OPT</a> );
<a name="l00121"></a>00121 
<a name="l00122"></a>00122     <span class="comment">// Pipe the build_cmd to the host for processing</span>
<a name="l00123"></a>00123     <span class="keywordflow">if</span> ( ( popen_fil = popen( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( build_cmd ), <span class="stringliteral">&quot;r&quot;</span> ) ) != NULL )
<a name="l00124"></a>00124     {
<a name="l00125"></a>00125         <span class="keywordflow">while</span>( fgets( buf, <a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a>, popen_fil ) != NULL )
<a name="l00126"></a>00126             build_res.append( buf );
<a name="l00127"></a>00127 
<a name="l00128"></a>00128         pclose( popen_fil );
<a name="l00129"></a>00129     }
<a name="l00130"></a>00130 
<a name="l00131"></a>00131     <span class="comment">// Something went wrong</span>
<a name="l00132"></a>00132     <span class="keywordflow">if</span> ( !build_res.empty() )
<a name="l00133"></a>00133     {
<a name="l00134"></a>00134         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::BuildPlugin()-&gt;returned error: %s&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( build_res ) );
<a name="l00135"></a>00135         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00136"></a>00136     }
<a name="l00137"></a>00137     <span class="keywordflow">else</span>
<a name="l00138"></a>00138         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( 0, <span class="stringliteral">&quot;Plugin built successfully: %s&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( file ) );
<a name="l00139"></a>00139 
<a name="l00140"></a>00140     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00141"></a>00141 }
<a name="l00142"></a>00142 
<a name="l00148"></a><a class="code" href="namespaceServer.xhtml#ac2e1d14caee54a38a89c2394abe6e5a5">00148</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceServer.xhtml#ac2e1d14caee54a38a89c2394abe6e5a5" title="Search all subfolders of CFG_DAT_DIR_COMMAND and call Command::New() to load each file found to memor...">Server::LoadCommands</a>()
<a name="l00149"></a>00149 {
<a name="l00150"></a>00150     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00151"></a>00151     chrono::high_resolution_clock::time_point start, finish;
<a name="l00152"></a>00152     <span class="keywordtype">double</span> duration = <a class="code" href="limits_8h.xhtml#ace307ffbe4c934f4565176f184b38d78" title="The minimum value of any uint_t variable.">uintmin_t</a>;
<a name="l00153"></a>00153     <a class="code" href="classCommand.xhtml" title="Functions that are built and loaded independently as Plugin objects.">Command</a>* cmd = NULL;
<a name="l00154"></a>00154     multimap&lt;bool,string&gt; files;
<a name="l00155"></a>00155     <a class="code" href="macros_8h.xhtml#ac49d0f3d55253bd7403da9e5fcab7504" title="Define an iterator variable (name) of (type1,type2) using (container).">MITER</a>( multimap, <span class="keywordtype">bool</span>,<span class="keywordtype">string</span>, mi );
<a name="l00156"></a>00156 
<a name="l00157"></a>00157     start = chrono::high_resolution_clock::now();
<a name="l00158"></a>00158     <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( 0, <a class="code" href="config_8h.xhtml#acb9463983ccf03f1775ef48719c8ea6e" title="String to output prior to loading command plugins.">CFG_STR_FILE_COMMAND_READ</a> );
<a name="l00159"></a>00159 
<a name="l00160"></a>00160     <span class="comment">// Populate the multimap with a recursive listing of the commands folder</span>
<a name="l00161"></a>00161     <a class="code" href="namespaceUtils.xhtml#a995fed3bf7ff41788f5b3dbdc6a70ecb" title="Return a multimap of a specified directory tree on disk.">Utils::ListDirectory</a>( <a class="code" href="config_8h.xhtml#af2e75e297c4447df28b526dff66734ce" title="Directory for commands to be loaded from.">CFG_DAT_DIR_COMMAND</a>, <span class="keyword">true</span>, <span class="keyword">false</span>, files, <a class="code" href="globals_8h.xhtml#a8a2ef3550d9c1343e2a0fc84f8bc433f">g_stats</a>-&gt;<a class="code" href="classServer_1_1Stats.xhtml#a21ff42ce048c463e19992aed5d2509bc">m_dir_close</a>, <a class="code" href="globals_8h.xhtml#a8a2ef3550d9c1343e2a0fc84f8bc433f">g_stats</a>-&gt;<a class="code" href="classServer_1_1Stats.xhtml#a58c214b405fa0d6599683f33c8cdd56d">m_dir_open</a> );
<a name="l00162"></a>00162 
<a name="l00163"></a>00163     <span class="keywordflow">if</span> ( files.empty() )
<a name="l00164"></a>00164     {
<a name="l00165"></a>00165         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Server::LoadCommands()-&gt;Utils::ListDirectory()-&gt; CFG_DAT_DIR_COMMAND returned NULL&quot;</span> );
<a name="l00166"></a>00166         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00167"></a>00167     }
<a name="l00168"></a>00168 
<a name="l00169"></a>00169     <span class="keywordflow">for</span> ( mi = files.begin(); mi != files.end(); mi++ )
<a name="l00170"></a>00170     {
<a name="l00171"></a>00171         <span class="keywordflow">if</span> ( mi-&gt;first == <a class="code" href="enum_8h.xhtml#a9325070b1daf70dbe43f7fb9a341aaf2">UTILS_IS_FILE</a> &amp;&amp; ( mi-&gt;second.substr( mi-&gt;second.find_last_of( <span class="stringliteral">&quot;.&quot;</span> ) + 1 ) == <a class="code" href="config_8h.xhtml#a47a6c4a9a6b1e4fbcd8edeee92314a25" title="File extension for files to be compiled.">CFG_PLG_BUILD_EXT_IN</a> ) )
<a name="l00172"></a>00172         {
<a name="l00173"></a>00173             <span class="keywordflow">if</span> ( !<a class="code" href="namespaceServer.xhtml#a45782df02e28df1c52c2a8edb90264e1" title="Compile a Plugin file.">BuildPlugin</a>( mi-&gt;second ) )
<a name="l00174"></a>00174             {
<a name="l00175"></a>00175                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::LoadCommand()-&gt;Server::BuildPlugin()-&gt; file %s returned false&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( mi-&gt;second ) );
<a name="l00176"></a>00176                 <span class="keywordflow">continue</span>;
<a name="l00177"></a>00177             }
<a name="l00178"></a>00178 
<a name="l00179"></a>00179             cmd = <span class="keyword">new</span> <a class="code" href="classCommand.xhtml" title="Functions that are built and loaded independently as Plugin objects.">Command</a>();
<a name="l00180"></a>00180             <span class="keywordflow">if</span> ( !cmd-&gt;<a class="code" href="classCommand.xhtml#a6b8eed27f76619d07effd72372a4be48" title="Load a plugin command from CFG_DAT_DIR_OBJ.">New</a>( mi-&gt;second ) )
<a name="l00181"></a>00181             {
<a name="l00182"></a>00182                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::LoadCommands()-&gt;Command::New()-&gt; command %s returned false&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( mi-&gt;second ) );
<a name="l00183"></a>00183                 <span class="keyword">delete</span> cmd;
<a name="l00184"></a>00184             }
<a name="l00185"></a>00185         }
<a name="l00186"></a>00186     }
<a name="l00187"></a>00187 
<a name="l00188"></a>00188     finish = chrono::high_resolution_clock::now();
<a name="l00189"></a>00189     <span class="keywordflow">if</span> ( ( duration = chrono::duration_cast&lt;chrono::milliseconds&gt;( finish - start ).count() ) &gt; 1000 )
<a name="l00190"></a>00190         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( 0, <span class="stringliteral">&quot;Loaded %lu commands in %1.2fs.&quot;</span>, <a class="code" href="list_8cpp.xhtml#a622badbc988ce65ebb3b4c1c8eb197b4" title="All commands loaded into memory.">command_list</a>.size(), ( duration / 1000 ) );
<a name="l00191"></a>00191     <span class="keywordflow">else</span>
<a name="l00192"></a>00192         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( 0, <span class="stringliteral">&quot;Loaded %lu commands in %1.0fms.&quot;</span>, <a class="code" href="list_8cpp.xhtml#a622badbc988ce65ebb3b4c1c8eb197b4" title="All commands loaded into memory.">command_list</a>.size(), duration );
<a name="l00193"></a>00193 
<a name="l00194"></a>00194     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00195"></a>00195 }
<a name="l00196"></a>00196 
<a name="l00202"></a><a class="code" href="namespaceServer.xhtml#a9b8efad79a32f2356d431788449e1f82">00202</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceServer.xhtml#a9b8efad79a32f2356d431788449e1f82" title="Search all subfolders of CFG_DAT_DIR_WORLD and call Location::New() to load each file found to memory...">Server::LoadLocations</a>()
<a name="l00203"></a>00203 {
<a name="l00204"></a>00204     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00205"></a>00205     chrono::high_resolution_clock::time_point start, finish;
<a name="l00206"></a>00206     <span class="keywordtype">double</span> duration = <a class="code" href="limits_8h.xhtml#ace307ffbe4c934f4565176f184b38d78" title="The minimum value of any uint_t variable.">uintmin_t</a>;
<a name="l00207"></a>00207     <a class="code" href="classLocation.xhtml" title="A physical location within the game world.">Location</a>* loc = NULL;
<a name="l00208"></a>00208     multimap&lt;bool,string&gt; files;
<a name="l00209"></a>00209     <a class="code" href="macros_8h.xhtml#ac49d0f3d55253bd7403da9e5fcab7504" title="Define an iterator variable (name) of (type1,type2) using (container).">MITER</a>( multimap, <span class="keywordtype">bool</span>,<span class="keywordtype">string</span>, mi );
<a name="l00210"></a>00210 
<a name="l00211"></a>00211     start = chrono::high_resolution_clock::now();
<a name="l00212"></a>00212     <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( 0, <a class="code" href="config_8h.xhtml#a598a5b0092285bf2bd4bfdd628cd9d02" title="String to output prior to loading location files.">CFG_STR_FILE_LOCATION_READ</a> );
<a name="l00213"></a>00213 
<a name="l00214"></a>00214     <span class="comment">// Populate the multimap with a recursive listing of the locations folder</span>
<a name="l00215"></a>00215     <a class="code" href="namespaceUtils.xhtml#a995fed3bf7ff41788f5b3dbdc6a70ecb" title="Return a multimap of a specified directory tree on disk.">Utils::ListDirectory</a>( <a class="code" href="config_8h.xhtml#aeb234d51b0a7b1a2c836059fb76c5770" title="Directory for game world files: rooms, objects, NPCs, etc.">CFG_DAT_DIR_WORLD</a>, <span class="keyword">true</span>, <span class="keyword">true</span>, files, <a class="code" href="globals_8h.xhtml#a8a2ef3550d9c1343e2a0fc84f8bc433f">g_stats</a>-&gt;<a class="code" href="classServer_1_1Stats.xhtml#a21ff42ce048c463e19992aed5d2509bc">m_dir_close</a>, <a class="code" href="globals_8h.xhtml#a8a2ef3550d9c1343e2a0fc84f8bc433f">g_stats</a>-&gt;<a class="code" href="classServer_1_1Stats.xhtml#a58c214b405fa0d6599683f33c8cdd56d">m_dir_open</a> );
<a name="l00216"></a>00216 
<a name="l00217"></a>00217     <span class="keywordflow">if</span> ( files.empty() )
<a name="l00218"></a>00218     {
<a name="l00219"></a>00219         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Server::LoadLocations()-&gt;Utils::ListDirectory()-&gt; CFG_DAT_DIR_WORLD returned NULL&quot;</span> );
<a name="l00220"></a>00220         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00221"></a>00221     }
<a name="l00222"></a>00222 
<a name="l00223"></a>00223     <span class="keywordflow">for</span> ( mi = files.begin(); mi != files.end(); mi++ )
<a name="l00224"></a>00224     {
<a name="l00225"></a>00225         <span class="keywordflow">if</span> ( mi-&gt;first == <a class="code" href="enum_8h.xhtml#a9325070b1daf70dbe43f7fb9a341aaf2">UTILS_IS_FILE</a> &amp;&amp; ( mi-&gt;second.substr( mi-&gt;second.find_last_of( <span class="stringliteral">&quot;.&quot;</span> ) + 1 ) == <a class="code" href="config_8h.xhtml#a56fdb354a0a0aa4879db1e77a32d824b" title="File extension to use for location files.">CFG_DAT_FILE_LOC_EXT</a> ) )
<a name="l00226"></a>00226         {
<a name="l00227"></a>00227             loc = <span class="keyword">new</span> <a class="code" href="classLocation.xhtml" title="A physical location within the game world.">Location</a>();
<a name="l00228"></a>00228             <span class="keywordflow">if</span> ( !loc-&gt;<a class="code" href="classLocation.xhtml#a6396aba5eab9bcbabb000c3f6478e1a2" title="Create a new location.">New</a>( mi-&gt;second ) )
<a name="l00229"></a>00229             {
<a name="l00230"></a>00230                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::LoadLocations()-&gt;Location::New()-&gt; location %s returned false&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( mi-&gt;second ) );
<a name="l00231"></a>00231                 <span class="keyword">delete</span> loc;
<a name="l00232"></a>00232             }
<a name="l00233"></a>00233         }
<a name="l00234"></a>00234     }
<a name="l00235"></a>00235 
<a name="l00236"></a>00236     finish = chrono::high_resolution_clock::now();
<a name="l00237"></a>00237     <span class="keywordflow">if</span> ( ( duration = chrono::duration_cast&lt;chrono::milliseconds&gt;( finish - start ).count() ) &gt; 1000 )
<a name="l00238"></a>00238         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( 0, <span class="stringliteral">&quot;Loaded %lu locations in %1.2fs.&quot;</span>, <a class="code" href="list_8cpp.xhtml#acff2cb6f4f515c3405c76c53e1c26744" title="All locations that exist within the server.">location_list</a>.size(), ( duration / 1000 ) );
<a name="l00239"></a>00239     <span class="keywordflow">else</span>
<a name="l00240"></a>00240         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( 0, <span class="stringliteral">&quot;Loaded %lu locations in %1.0fms.&quot;</span>, <a class="code" href="list_8cpp.xhtml#acff2cb6f4f515c3405c76c53e1c26744" title="All locations that exist within the server.">location_list</a>.size(), duration );
<a name="l00241"></a>00241 
<a name="l00242"></a>00242     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00243"></a>00243 }
<a name="l00244"></a>00244 
<a name="l00250"></a><a class="code" href="namespaceServer.xhtml#a39dbe16fdc8c5f6fbd678c6540fbcd6c">00250</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceServer.xhtml#a39dbe16fdc8c5f6fbd678c6540fbcd6c" title="Poll all SocketClient objects that are communicating with the associated SocketServer object...">Server::PollSockets</a>()
<a name="l00251"></a>00251 {
<a name="l00252"></a>00252     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00253"></a>00253     <span class="keyword">static</span> timespec static_time;
<a name="l00254"></a>00254     fd_set exc_set;
<a name="l00255"></a>00255     fd_set in_set;
<a name="l00256"></a>00256     fd_set out_set;
<a name="l00257"></a>00257     <a class="code" href="macros_8h.xhtml#a05e235f398566bf49e21735cf00fc656" title="Define an iterator variable (name) of (type) using (container).">ITER</a>( list, <a class="code" href="classSocketClient.xhtml" title="Client / remote host specific functions that extend the Socket class.">SocketClient</a>*, si );
<a name="l00258"></a>00258     <a class="code" href="classSocketClient.xhtml" title="Client / remote host specific functions that extend the Socket class.">SocketClient</a>* socket_client;
<a name="l00259"></a>00259     <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a> client_desc = 0, max_desc = 0, server_desc = 0;
<a name="l00260"></a>00260 
<a name="l00261"></a>00261     FD_ZERO( &amp;exc_set );
<a name="l00262"></a>00262     FD_ZERO( &amp;in_set );
<a name="l00263"></a>00263     FD_ZERO( &amp;out_set );
<a name="l00264"></a>00264 
<a name="l00265"></a>00265     <span class="keywordflow">if</span> ( ( server_desc = <a class="code" href="globals_8h.xhtml#a4746b8ff4575e45ad5e0850f331e713e">g_global</a>-&gt;<a class="code" href="classServer_1_1Global.xhtml#a60944d3654141d136ae0f1af263c803b">m_listen</a>-&gt;<a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82" title="Returns the file descriptor associated to the Socket.">gDescriptor</a>() ) &lt; 1 )
<a name="l00266"></a>00266     {
<a name="l00267"></a>00267         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt;SocketServer::gDescriptor()-&gt; returned invalid descriptor: %ld&quot;</span>, server_desc );
<a name="l00268"></a>00268         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00269"></a>00269     }
<a name="l00270"></a>00270 
<a name="l00271"></a>00271     FD_SET( server_desc, &amp;in_set );
<a name="l00272"></a>00272     max_desc = server_desc;
<a name="l00273"></a>00273 
<a name="l00274"></a>00274     <span class="comment">// Build three file descriptor lists to be polled</span>
<a name="l00275"></a>00275     <span class="keywordflow">for</span> ( si = <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.begin(); si != <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.end(); si = <a class="code" href="globals_8h.xhtml#a4746b8ff4575e45ad5e0850f331e713e">g_global</a>-&gt;<a class="code" href="classServer_1_1Global.xhtml#ac53fd9755bbb78e3dd0b77d4f81fb959">m_next_socket_client</a> )
<a name="l00276"></a>00276     {
<a name="l00277"></a>00277         socket_client = *si;
<a name="l00278"></a>00278         <a class="code" href="globals_8h.xhtml#a4746b8ff4575e45ad5e0850f331e713e">g_global</a>-&gt;<a class="code" href="classServer_1_1Global.xhtml#ac53fd9755bbb78e3dd0b77d4f81fb959">m_next_socket_client</a> = ++si;
<a name="l00279"></a>00279 
<a name="l00280"></a>00280         <span class="keywordflow">if</span> ( ( client_desc = socket_client-&gt;<a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82" title="Returns the file descriptor associated to the Socket.">gDescriptor</a>() ) &lt; 1 )
<a name="l00281"></a>00281         {
<a name="l00282"></a>00282             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt;SocketClient::gDescriptor()-&gt; returned invalid descriptor: %ld&quot;</span>, client_desc );
<a name="l00283"></a>00283             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00284"></a>00284             <span class="keywordflow">continue</span>;
<a name="l00285"></a>00285         }
<a name="l00286"></a>00286 
<a name="l00287"></a>00287         <span class="keywordflow">if</span> ( socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a92a268dc450fb7f42df61de1105a0416" title="Checks if a client is marked as quitting.">Quitting</a>() )
<a name="l00288"></a>00288         {
<a name="l00289"></a>00289             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a6268f3d184970ec0076da657c39d2e80" title="Process data from the client&#39;s send buffer and transmit it via the socket.">Send</a>();
<a name="l00290"></a>00290             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00291"></a>00291             <span class="keywordflow">continue</span>;
<a name="l00292"></a>00292         }
<a name="l00293"></a>00293 
<a name="l00294"></a>00294         max_desc = max( server_desc, client_desc );
<a name="l00295"></a>00295 
<a name="l00296"></a>00296         <span class="comment">// Populate lists of: exceptions, pending input, pending output</span>
<a name="l00297"></a>00297         FD_SET( client_desc, &amp;exc_set );
<a name="l00298"></a>00298         FD_SET( client_desc, &amp;in_set );
<a name="l00299"></a>00299         FD_SET( client_desc, &amp;out_set );
<a name="l00300"></a>00300     }
<a name="l00301"></a>00301 
<a name="l00302"></a>00302     <span class="comment">// Ensure the file descriptor lists can be watched for updates</span>
<a name="l00303"></a>00303     <span class="keywordflow">if</span> ( ::pselect( max_desc + 1, &amp;in_set, &amp;out_set, &amp;exc_set, &amp;static_time, 0 ) &lt; 0 )
<a name="l00304"></a>00304     {
<a name="l00305"></a>00305         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt;pselect()-&gt;&quot;</span> );
<a name="l00306"></a>00306         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00307"></a>00307     }
<a name="l00308"></a>00308 
<a name="l00309"></a>00309     <span class="comment">// Process new connections</span>
<a name="l00310"></a>00310     <span class="keywordflow">if</span> ( FD_ISSET( server_desc, &amp;in_set ) )
<a name="l00311"></a>00311         <a class="code" href="globals_8h.xhtml#a4746b8ff4575e45ad5e0850f331e713e">g_global</a>-&gt;<a class="code" href="classServer_1_1Global.xhtml#a60944d3654141d136ae0f1af263c803b">m_listen</a>-&gt;<a class="code" href="classSocketServer.xhtml#afdbc60c3bc840875d2214b59c6213f63" title="Accept a new connection on the listening port.">Accept</a>();
<a name="l00312"></a>00312 
<a name="l00313"></a>00313     <span class="comment">// Process faulted connections</span>
<a name="l00314"></a>00314     <span class="keywordflow">for</span> ( si = <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.begin(); si != <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.end(); si = <a class="code" href="globals_8h.xhtml#a4746b8ff4575e45ad5e0850f331e713e">g_global</a>-&gt;<a class="code" href="classServer_1_1Global.xhtml#ac53fd9755bbb78e3dd0b77d4f81fb959">m_next_socket_client</a> )
<a name="l00315"></a>00315     {
<a name="l00316"></a>00316         socket_client = *si;
<a name="l00317"></a>00317         <a class="code" href="globals_8h.xhtml#a4746b8ff4575e45ad5e0850f331e713e">g_global</a>-&gt;<a class="code" href="classServer_1_1Global.xhtml#ac53fd9755bbb78e3dd0b77d4f81fb959">m_next_socket_client</a> = ++si;
<a name="l00318"></a>00318 
<a name="l00319"></a>00319         <span class="keywordflow">if</span> ( ( client_desc = socket_client-&gt;<a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82" title="Returns the file descriptor associated to the Socket.">gDescriptor</a>() ) &lt; 1 )
<a name="l00320"></a>00320         {
<a name="l00321"></a>00321             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt;SocketClient::gDescriptor()-&gt; returned invalid descriptor: %ld&quot;</span>, client_desc );
<a name="l00322"></a>00322             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00323"></a>00323             <span class="keywordflow">continue</span>;
<a name="l00324"></a>00324         }
<a name="l00325"></a>00325 
<a name="l00326"></a>00326         <span class="comment">// Found a faulted socket in the exceptions list</span>
<a name="l00327"></a>00327         <span class="keywordflow">if</span> ( FD_ISSET( client_desc, &amp;exc_set ) )
<a name="l00328"></a>00328         {
<a name="l00329"></a>00329             <span class="comment">// Don&#39;t try to save characters on faulty clients, just boot them</span>
<a name="l00330"></a>00330             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt; disconnecting faulted descriptor: %ld&quot;</span>, client_desc );
<a name="l00331"></a>00331             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00332"></a>00332             <span class="keywordflow">continue</span>;
<a name="l00333"></a>00333         }
<a name="l00334"></a>00334     }
<a name="l00335"></a>00335 
<a name="l00336"></a>00336     <span class="comment">// Process input from active connections</span>
<a name="l00337"></a>00337     <span class="keywordflow">for</span> ( si = <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.begin(); si != <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.end(); si = <a class="code" href="globals_8h.xhtml#a4746b8ff4575e45ad5e0850f331e713e">g_global</a>-&gt;<a class="code" href="classServer_1_1Global.xhtml#ac53fd9755bbb78e3dd0b77d4f81fb959">m_next_socket_client</a> )
<a name="l00338"></a>00338     {
<a name="l00339"></a>00339         socket_client = *si;
<a name="l00340"></a>00340         <a class="code" href="globals_8h.xhtml#a4746b8ff4575e45ad5e0850f331e713e">g_global</a>-&gt;<a class="code" href="classServer_1_1Global.xhtml#ac53fd9755bbb78e3dd0b77d4f81fb959">m_next_socket_client</a> = ++si;
<a name="l00341"></a>00341 
<a name="l00342"></a>00342         <span class="keywordflow">if</span> ( ( client_desc = socket_client-&gt;<a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82" title="Returns the file descriptor associated to the Socket.">gDescriptor</a>() ) &lt; 1 )
<a name="l00343"></a>00343         {
<a name="l00344"></a>00344             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt;SocketClient::gDescriptor()-&gt; returned invalid descriptor: %ld&quot;</span>, client_desc );
<a name="l00345"></a>00345             <span class="comment">// todo: save character</span>
<a name="l00346"></a>00346             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00347"></a>00347             <span class="keywordflow">continue</span>;
<a name="l00348"></a>00348         }
<a name="l00349"></a>00349 
<a name="l00350"></a>00350         <span class="comment">// Found an active socket in the input list</span>
<a name="l00351"></a>00351         <span class="keywordflow">if</span> ( FD_ISSET( client_desc, &amp;in_set ) )
<a name="l00352"></a>00352         {
<a name="l00353"></a>00353             <span class="comment">// Pending input; clear the idle timeout</span>
<a name="l00354"></a>00354             <span class="keywordflow">if</span> ( !socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a686aea73a8e9c9dbaac6438ec1b24293" title="Set the idle timer value of the socket.">sIdle</a>( 0 ) )
<a name="l00355"></a>00355             {
<a name="l00356"></a>00356                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt;SocketClient::sIdle()-&gt; descriptor %ld returned false setting idle: 0&quot;</span>, client_desc );
<a name="l00357"></a>00357                 <span class="comment">// todo: save character</span>
<a name="l00358"></a>00358                 socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00359"></a>00359                 <span class="keywordflow">continue</span>;
<a name="l00360"></a>00360             }
<a name="l00361"></a>00361 
<a name="l00362"></a>00362             <span class="comment">// Read input, save game character and disconnect socket if unable to</span>
<a name="l00363"></a>00363             <span class="keywordflow">if</span> ( !socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a9ee09f452d900e288b2aa187561ef05d" title="Receive data from the client and append it to a receive buffer.">Recv</a>() )
<a name="l00364"></a>00364             {
<a name="l00365"></a>00365                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt;SocketClient::Recv()-&gt; descriptor %ld returned false&quot;</span>, client_desc );
<a name="l00366"></a>00366 
<a name="l00367"></a>00367                 <span class="comment">// Detach the Character as linkdead</span>
<a name="l00368"></a>00368                 <span class="keywordflow">if</span> ( socket_client-&gt;<a class="code" href="classSocketClient.xhtml#aa0badca8f614127e98281995c02cb385" title="Returns the connection state of the client from SOC_STATE.">gState</a>() &gt;= <a class="code" href="enum_8h.xhtml#a183c84f479d3dfb8ea89c5fa6db3c5c7a9461d3679b682710a261f18d7876a395">SOC_STATE_PLAYING</a> )
<a name="l00369"></a>00369                 {
<a name="l00370"></a>00370                     <span class="keywordflow">if</span> ( socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a56e10cbe469179d7d7bc18eae6ca351c" title="Returns the Account object associated to this SocketClient.">gAccount</a>() != NULL )
<a name="l00371"></a>00371                     {
<a name="l00372"></a>00372                         <span class="keywordflow">if</span> ( socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a56e10cbe469179d7d7bc18eae6ca351c" title="Returns the Account object associated to this SocketClient.">gAccount</a>()-&gt;<a class="code" href="classAccount.xhtml#a1d2b9eb6c351b9d43d16e649fa599466" title="Returns the associated Character, if any.">gCharacter</a>() != NULL )
<a name="l00373"></a>00373                         {
<a name="l00374"></a>00374                             <a class="code" href="classEvent.xhtml" title="Actions that execute after a specified delay.">Event</a>* <span class="keyword">event</span> = <span class="keyword">new</span> <a class="code" href="classEvent.xhtml" title="Actions that execute after a specified delay.">Event</a>();
<a name="l00375"></a>00375 
<a name="l00376"></a>00376                             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#ab5e6737c8acd4aaa21268e10c1a050b4" title="Set the connection state value of the socket.">sState</a>( <a class="code" href="enum_8h.xhtml#a183c84f479d3dfb8ea89c5fa6db3c5c7a9d096c75b5e31056089c1e20afad749e">SOC_STATE_DISC_LINKDEAD</a> );
<a name="l00377"></a>00377                             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a56e10cbe469179d7d7bc18eae6ca351c" title="Returns the Account object associated to this SocketClient.">gAccount</a>()-&gt;<a class="code" href="classAccount.xhtml#a1d2b9eb6c351b9d43d16e649fa599466" title="Returns the associated Character, if any.">gCharacter</a>()-&gt;<a class="code" href="classCharacter.xhtml#a622c35f2465a934848d493cd2a596584" title="Sets the account of this character.">sAccount</a>( NULL );
<a name="l00378"></a>00378                             <span class="keyword">event</span>-&gt;New( <span class="stringliteral">&quot;quit&quot;</span>, <span class="stringliteral">&quot;quit&quot;</span>, socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a56e10cbe469179d7d7bc18eae6ca351c" title="Returns the Account object associated to this SocketClient.">gAccount</a>()-&gt;<a class="code" href="classAccount.xhtml#a1d2b9eb6c351b9d43d16e649fa599466" title="Returns the associated Character, if any.">gCharacter</a>(), <a class="code" href="namespaceHandler.xhtml#a02ba68c0c416219816c97189ea8bae4d" title="Locates a Command associated with the game.">Handler::FindCommand</a>( <span class="stringliteral">&quot;quit&quot;</span> ), <a class="code" href="enum_8h.xhtml#aacea4a7e80c7ca11553910c740986045a15e6557b4ff5e76148a16c4adad8e407">EVENT_TYPE_CMD_CHARACTER</a>, <a class="code" href="config_8h.xhtml#a2e5cf1b99e6fb32492aeee4eeb9590d3" title="(Minutes / tick rate) before disconnecting an idle Character detached from an Account. Approx 5 minutes.">CFG_CHR_MAX_IDLE</a> );
<a name="l00379"></a>00379                             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a56e10cbe469179d7d7bc18eae6ca351c" title="Returns the Account object associated to this SocketClient.">gAccount</a>()-&gt;<a class="code" href="classAccount.xhtml#a42914cf1147f5c5a480dbfcb9a0ff3fe" title="Sets the active Character associated with the account.">sCharacter</a>( NULL );
<a name="l00380"></a>00380                         }
<a name="l00381"></a>00381                     }
<a name="l00382"></a>00382                 }
<a name="l00383"></a>00383 
<a name="l00384"></a>00384                 socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00385"></a>00385                 <span class="keywordflow">continue</span>;
<a name="l00386"></a>00386             }
<a name="l00387"></a>00387         }
<a name="l00388"></a>00388         <span class="keywordflow">else</span>
<a name="l00389"></a>00389         {
<a name="l00390"></a>00390             <span class="keywordflow">if</span> ( !socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a686aea73a8e9c9dbaac6438ec1b24293" title="Set the idle timer value of the socket.">sIdle</a>( socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a9c982fdda7a3daa5b153eada40a3b6fb" title="Returns the amount of time the client has been idle.">gIdle</a>() + 1 ) )
<a name="l00391"></a>00391             {
<a name="l00392"></a>00392                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt;SocketClient::sIdle()-&gt; descriptor %ld returned false setting idle: %lu&quot;</span>, client_desc, socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a9c982fdda7a3daa5b153eada40a3b6fb" title="Returns the amount of time the client has been idle.">gIdle</a>() + 1 );
<a name="l00393"></a>00393                 <span class="comment">// todo: save character</span>
<a name="l00394"></a>00394                 socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00395"></a>00395                 <span class="keywordflow">continue</span>;
<a name="l00396"></a>00396             }
<a name="l00397"></a>00397         }
<a name="l00398"></a>00398     }
<a name="l00399"></a>00399 
<a name="l00400"></a>00400     <span class="comment">// Process any pending output</span>
<a name="l00401"></a>00401     <span class="keywordflow">for</span> ( si = <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.begin(); si != <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.end(); si = <a class="code" href="globals_8h.xhtml#a4746b8ff4575e45ad5e0850f331e713e">g_global</a>-&gt;<a class="code" href="classServer_1_1Global.xhtml#ac53fd9755bbb78e3dd0b77d4f81fb959">m_next_socket_client</a> )
<a name="l00402"></a>00402     {
<a name="l00403"></a>00403         socket_client = *si;
<a name="l00404"></a>00404         <a class="code" href="globals_8h.xhtml#a4746b8ff4575e45ad5e0850f331e713e">g_global</a>-&gt;<a class="code" href="classServer_1_1Global.xhtml#ac53fd9755bbb78e3dd0b77d4f81fb959">m_next_socket_client</a> = ++si;
<a name="l00405"></a>00405 
<a name="l00406"></a>00406         <span class="keywordflow">if</span> ( ( client_desc = socket_client-&gt;<a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82" title="Returns the file descriptor associated to the Socket.">gDescriptor</a>() ) &lt; 1 )
<a name="l00407"></a>00407         {
<a name="l00408"></a>00408             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt;SocketClient::gDescriptor()-&gt; returned invalid descriptor: %ld&quot;</span>, client_desc );
<a name="l00409"></a>00409             <span class="comment">// todo: save character</span>
<a name="l00410"></a>00410             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00411"></a>00411             <span class="keywordflow">continue</span>;
<a name="l00412"></a>00412         }
<a name="l00413"></a>00413 
<a name="l00414"></a>00414         <span class="comment">// Disconnect sockets that have been idle for too long</span>
<a name="l00415"></a>00415         <span class="keywordflow">if</span> ( socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a9c982fdda7a3daa5b153eada40a3b6fb" title="Returns the amount of time the client has been idle.">gIdle</a>() &gt;= <a class="code" href="config_8h.xhtml#a9e1bbc3ba39f67dbf7398220cdca6441" title="(Minutes / tick rate) before disconnecting an idle socket. Approx 30 minutes.">CFG_SOC_MAX_IDLE</a> )
<a name="l00416"></a>00416         {
<a name="l00417"></a>00417             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt;SocketClient::gIdle()-&gt; disconnecting idle descriptor: %ld&quot;</span>, client_desc );
<a name="l00418"></a>00418             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a6268f3d184970ec0076da657c39d2e80" title="Process data from the client&#39;s send buffer and transmit it via the socket.">Send</a>( <a class="code" href="config_8h.xhtml#a8e2bae4932d5625144ae9f3bfc8c3fb0" title="String sent on disconnecting an idle socket.">CFG_STR_IDLE</a> );
<a name="l00419"></a>00419             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00420"></a>00420             <span class="comment">// todo: save character</span>
<a name="l00421"></a>00421             <span class="keywordflow">continue</span>;
<a name="l00422"></a>00422         }
<a name="l00423"></a>00423 
<a name="l00424"></a>00424         <span class="comment">// Found an active socket in the output list</span>
<a name="l00425"></a>00425         <span class="keywordflow">if</span> ( FD_ISSET( client_desc, &amp;out_set ) &amp;&amp; socket_client-&gt;<a class="code" href="classSocketClient.xhtml#ad887231d8188cf23b88b6dad24b9408a" title="Tests if there is any output to be processed.">PendingOutput</a>() )
<a name="l00426"></a>00426         {
<a name="l00427"></a>00427             <span class="comment">// Send output, save game character and disconnect socket if unable to</span>
<a name="l00428"></a>00428             <span class="keywordflow">if</span> ( !socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a6268f3d184970ec0076da657c39d2e80" title="Process data from the client&#39;s send buffer and transmit it via the socket.">Send</a>() )
<a name="l00429"></a>00429             {
<a name="l00430"></a>00430                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt;SocketClient::PendingOutput()-&gt;SocketClient::Send()-&gt; descriptor %ld returned false&quot;</span>, client_desc );
<a name="l00431"></a>00431                 socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00432"></a>00432                 <span class="comment">// todo: save character</span>
<a name="l00433"></a>00433                 <span class="keywordflow">continue</span>;
<a name="l00434"></a>00434             }
<a name="l00435"></a>00435         }
<a name="l00436"></a>00436     }
<a name="l00437"></a>00437 
<a name="l00438"></a>00438     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00439"></a>00439 }
<a name="l00440"></a>00440 
<a name="l00445"></a><a class="code" href="namespaceServer.xhtml#a266931bde9b1955346955140986d2b00">00445</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="namespaceServer.xhtml#a266931bde9b1955346955140986d2b00" title="Process any scheduled events tied to the Server.">Server::ProcessEvents</a>()
<a name="l00446"></a>00446 {
<a name="l00447"></a>00447     <a class="code" href="macros_8h.xhtml#a05e235f398566bf49e21735cf00fc656" title="Define an iterator variable (name) of (type) using (container).">ITER</a>( forward_list, <a class="code" href="classEvent.xhtml" title="Actions that execute after a specified delay.">Event</a>*, ei );
<a name="l00448"></a>00448     <a class="code" href="classEvent.xhtml" title="Actions that execute after a specified delay.">Event</a>* event;
<a name="l00449"></a>00449 
<a name="l00450"></a>00450     <span class="keywordflow">for</span> ( ei = <a class="code" href="list_8cpp.xhtml#a13278fb7b3325a6779fcb97c172c16ce" title="All events pending execution.">event_list</a>.begin(); ei != <a class="code" href="list_8cpp.xhtml#a13278fb7b3325a6779fcb97c172c16ce" title="All events pending execution.">event_list</a>.end(); ei = <a class="code" href="globals_8h.xhtml#a4746b8ff4575e45ad5e0850f331e713e">g_global</a>-&gt;<a class="code" href="classServer_1_1Global.xhtml#ad09b3760d6f761c65ae1a84f7b8e1c3c">m_next_event</a> )
<a name="l00451"></a>00451     {
<a name="l00452"></a>00452         <span class="keyword">event</span> = *ei;
<a name="l00453"></a>00453         <a class="code" href="globals_8h.xhtml#a4746b8ff4575e45ad5e0850f331e713e">g_global</a>-&gt;<a class="code" href="classServer_1_1Global.xhtml#ad09b3760d6f761c65ae1a84f7b8e1c3c">m_next_event</a> = ++ei;
<a name="l00454"></a>00454 
<a name="l00455"></a>00455         <span class="keywordflow">if</span> ( !event-&gt;<a class="code" href="classEvent.xhtml#a65983b240559175bfabe83c640ed7147" title="Updates the Event by decrementing the remaining time.">Update</a>() )
<a name="l00456"></a>00456             event-&gt;<a class="code" href="classEvent.xhtml#ae00620af2a424d3d0041676e76b9303c" title="Execute the function stored within the Event object.">Run</a>();
<a name="l00457"></a>00457     }
<a name="l00458"></a>00458 
<a name="l00459"></a>00459     <span class="keywordflow">return</span>;
<a name="l00460"></a>00460 }
<a name="l00461"></a>00461 
<a name="l00466"></a><a class="code" href="namespaceServer.xhtml#a2b4cec469bb99c2a45e49de5ba74d1ae">00466</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="namespaceServer.xhtml#a2b4cec469bb99c2a45e49de5ba74d1ae" title="Processes input from all active SocketClient objects.">Server::ProcessInput</a>()
<a name="l00467"></a>00467 {
<a name="l00468"></a>00468     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00469"></a>00469     <a class="code" href="macros_8h.xhtml#a05e235f398566bf49e21735cf00fc656" title="Define an iterator variable (name) of (type) using (container).">ITER</a>( list, <a class="code" href="classSocketClient.xhtml" title="Client / remote host specific functions that extend the Socket class.">SocketClient</a>*, si );
<a name="l00470"></a>00470     <a class="code" href="classSocketClient.xhtml" title="Client / remote host specific functions that extend the Socket class.">SocketClient</a>* socket_client;
<a name="l00471"></a>00471     <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a> client_desc = 0;
<a name="l00472"></a>00472 
<a name="l00473"></a>00473     <span class="keywordflow">for</span> ( si = <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.begin(); si != <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.end(); si = <a class="code" href="globals_8h.xhtml#a4746b8ff4575e45ad5e0850f331e713e">g_global</a>-&gt;<a class="code" href="classServer_1_1Global.xhtml#ac53fd9755bbb78e3dd0b77d4f81fb959">m_next_socket_client</a> )
<a name="l00474"></a>00474     {
<a name="l00475"></a>00475         socket_client = *si;
<a name="l00476"></a>00476         <a class="code" href="globals_8h.xhtml#a4746b8ff4575e45ad5e0850f331e713e">g_global</a>-&gt;<a class="code" href="classServer_1_1Global.xhtml#ac53fd9755bbb78e3dd0b77d4f81fb959">m_next_socket_client</a> = ++si;
<a name="l00477"></a>00477 
<a name="l00478"></a>00478         <span class="keywordflow">if</span> ( ( client_desc = socket_client-&gt;<a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82" title="Returns the file descriptor associated to the Socket.">gDescriptor</a>() ) &lt; 1 )
<a name="l00479"></a>00479         {
<a name="l00480"></a>00480             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::ProcessInput()-&gt;SocketClient::gDescriptor()-&gt; returned invalid descriptor: %ld&quot;</span>, client_desc );
<a name="l00481"></a>00481             <span class="comment">// todo: save character</span>
<a name="l00482"></a>00482             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00483"></a>00483             <span class="keywordflow">continue</span>;
<a name="l00484"></a>00484         }
<a name="l00485"></a>00485 
<a name="l00486"></a>00486         <span class="keywordflow">if</span> ( !socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a92fea2bf7e0f20578404ce1abb835a0b" title="Process data from the client&#39;s receive buffer and split it into commands to queue as necessary...">ProcessInput</a>() )
<a name="l00487"></a>00487         {
<a name="l00488"></a>00488             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::ProcessInput()-&gt;SocketClient::ProcessInput()-&gt; descriptor %ld returned false&quot;</span>, client_desc );
<a name="l00489"></a>00489             <span class="comment">// todo: save character</span>
<a name="l00490"></a>00490             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00491"></a>00491             <span class="keywordflow">continue</span>;
<a name="l00492"></a>00492         }
<a name="l00493"></a>00493 
<a name="l00494"></a>00494         <span class="keywordflow">if</span> ( socket_client-&gt;<a class="code" href="classSocketClient.xhtml#aa46590f5ac09115d9888fdb7c600ef1d" title="Tests if there are any commands in the queue to be processed.">PendingCommand</a>() )
<a name="l00495"></a>00495         {
<a name="l00496"></a>00496             <span class="keywordflow">if</span> ( !socket_client-&gt;<a class="code" href="classSocketClient.xhtml#ad4f63c7d906310dc56a1217136047d7f" title="Interpret the command at the front of the queue.">ProcessCommand</a>() )
<a name="l00497"></a>00497             {
<a name="l00498"></a>00498                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::ProcessInput()-&gt;SocketClient::PendingCommand()-&gt;SocketClient::ProcessCommand()-&gt; descriptor %ld returned false&quot;</span>, client_desc );
<a name="l00499"></a>00499                 <span class="comment">// todo: save character</span>
<a name="l00500"></a>00500                 socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00501"></a>00501                 <span class="keywordflow">continue</span>;
<a name="l00502"></a>00502             }
<a name="l00503"></a>00503         }
<a name="l00504"></a>00504     }
<a name="l00505"></a>00505 
<a name="l00506"></a>00506     <span class="keywordflow">return</span>;
<a name="l00507"></a>00507 }
<a name="l00508"></a>00508 
<a name="l00515"></a><a class="code" href="namespaceServer.xhtml#a16ea0639731dee10e1a253375b508a02">00515</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="namespaceServer.xhtml#a16ea0639731dee10e1a253375b508a02" title="Recovers the server state and re-connects client sockets after a reboot.">Server::RebootRecovery</a>( <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; reboot )
<a name="l00516"></a>00516 {
<a name="l00517"></a>00517     ifstream recovery;
<a name="l00518"></a>00518     <span class="keywordtype">string</span> key, value, line;
<a name="l00519"></a>00519     <a class="code" href="classSocketClient.xhtml" title="Client / remote host specific functions that extend the Socket class.">SocketClient</a> *client = NULL;
<a name="l00520"></a>00520 
<a name="l00521"></a>00521     <span class="keywordflow">if</span> ( reboot )
<a name="l00522"></a>00522     {
<a name="l00523"></a>00523         recovery.open( <a class="code" href="config_8h.xhtml#a139b7703e057cd102ea853e5999f39fd" title="Directory for temporary files.">CFG_DAT_DIR_VAR</a> <span class="stringliteral">&quot;/&quot;</span> <a class="code" href="config_8h.xhtml#a44e2e94d8914eab0940c8c13d064e2f6" title="File for reboot data to be temporarily stored in.">CFG_DAT_FILE_REBOOT</a>, ifstream::in );
<a name="l00524"></a>00524 
<a name="l00525"></a>00525         <span class="keywordflow">while</span> ( recovery.is_open() &amp;&amp; recovery.good() &amp;&amp; getline( recovery, line ) )
<a name="l00526"></a>00526         {
<a name="l00527"></a>00527             <span class="keywordflow">if</span> ( !<a class="code" href="namespaceUtils.xhtml#a4a4d3dfd2ddb691bc5bcff82252c058b" title="Splits a string in the format of key=value. Retains any whitespace in the value.">Utils::KeyValue</a>( key, value, line) )
<a name="l00528"></a>00528             {
<a name="l00529"></a>00529                 cout &lt;&lt; <span class="stringliteral">&quot;Error reading line &quot;</span> &lt;&lt; line &lt;&lt; endl;
<a name="l00530"></a>00530                 <span class="keywordflow">continue</span>;
<a name="l00531"></a>00531             }
<a name="l00532"></a>00532             cout &lt;&lt; <span class="stringliteral">&quot;key={&quot;</span> &lt;&lt; key &lt;&lt; <span class="stringliteral">&quot;} &amp;&amp; value={&quot;</span> &lt;&lt; value &lt;&lt; <span class="stringliteral">&quot;}&quot;</span> &lt;&lt; endl;
<a name="l00533"></a>00533             <span class="keywordflow">if</span> ( key.compare( <span class="stringliteral">&quot;desc&quot;</span> ) == 0 )
<a name="l00534"></a>00534             {
<a name="l00535"></a>00535                 client = <span class="keyword">new</span> <a class="code" href="classSocketClient.xhtml" title="Client / remote host specific functions that extend the Socket class.">SocketClient</a>();
<a name="l00536"></a>00536                 client-&gt;<a class="code" href="classSocketClient.xhtml#a8399ef20292e9f3ec83b5c4bec2e105b" title="Build a SocketClient for a new client connection and set all attributes.">New</a>( atoi( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( value ) ) );
<a name="l00537"></a>00537             }
<a name="l00538"></a>00538             <span class="keywordflow">if</span> ( key.compare( <span class="stringliteral">&quot;port&quot;</span> ) == 0 )
<a name="l00539"></a>00539                 client-&gt;<a class="code" href="classSocket.xhtml#a24c8132ced233add89f4fda68284e578" title="Sets the port that was opened for the socket.">sPort</a>( atoi( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( value ) ) );
<a name="l00540"></a>00540             <span class="keywordflow">if</span> ( key.compare( <span class="stringliteral">&quot;host&quot;</span> ) == 0 )
<a name="l00541"></a>00541                 client-&gt;<a class="code" href="classSocket.xhtml#a14e5e2493abcae97043297dd170e7a39" title="Sets the hostname of the socket.">sHostname</a>( value );
<a name="l00542"></a>00542             <span class="keywordflow">if</span> ( key.compare( <span class="stringliteral">&quot;recv&quot;</span> ) == 0 )
<a name="l00543"></a>00543                 client-&gt;<a class="code" href="classSocket.xhtml#aec278bc5096a3087a7bb6a1ed06d7ddd" title="Increment the total count of bytes received by the socket.">aBytesRecvd</a>( atoi( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( value ) ) );
<a name="l00544"></a>00544             <span class="keywordflow">if</span> ( key.compare( <span class="stringliteral">&quot;sent&quot;</span> ) == 0 )
<a name="l00545"></a>00545                 client-&gt;<a class="code" href="classSocket.xhtml#a688f0d2182f7ca098de3f76156efad0a" title="Increment the total count of bytes sent by the socket.">aBytesSent</a>( atoi( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( value ) ) );
<a name="l00546"></a>00546             <span class="keywordflow">if</span> ( key.compare( <span class="stringliteral">&quot;idle&quot;</span> ) == 0 )
<a name="l00547"></a>00547                 client-&gt;<a class="code" href="classSocketClient.xhtml#a686aea73a8e9c9dbaac6438ec1b24293" title="Set the idle timer value of the socket.">sIdle</a>( atoi( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( value ) ) );
<a name="l00548"></a>00548             <span class="keywordflow">if</span> ( key.compare( <span class="stringliteral">&quot;stat&quot;</span> ) == 0 )
<a name="l00549"></a>00549                 client-&gt;<a class="code" href="classSocketClient.xhtml#ab5e6737c8acd4aaa21268e10c1a050b4" title="Set the connection state value of the socket.">sState</a>( atoi( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( value ) ) );
<a name="l00550"></a>00550         }
<a name="l00551"></a>00551 
<a name="l00552"></a>00552         recovery.close();
<a name="l00553"></a>00553         ::unlink( <a class="code" href="config_8h.xhtml#a139b7703e057cd102ea853e5999f39fd" title="Directory for temporary files.">CFG_DAT_DIR_VAR</a> <span class="stringliteral">&quot;/&quot;</span> CFG_DAT_FILE_REBOOT );
<a name="l00554"></a>00554     }
<a name="l00555"></a>00555 
<a name="l00556"></a>00556     <span class="keywordflow">return</span>;
<a name="l00557"></a>00557 }
<a name="l00558"></a>00558 
<a name="l00565"></a><a class="code" href="namespaceServer.xhtml#a4073e768d93ce18c25cb5996f4cd3729">00565</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceServer.xhtml#a4073e768d93ce18c25cb5996f4cd3729" title="Reloads a Command Plugin.">Server::ReloadCommand</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; name )
<a name="l00566"></a>00566 {
<a name="l00567"></a>00567     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00568"></a>00568     <a class="code" href="classCommand.xhtml" title="Functions that are built and loaded independently as Plugin objects.">Command</a>* command = NULL;
<a name="l00569"></a>00569     <span class="keywordtype">string</span> file;
<a name="l00570"></a>00570 
<a name="l00571"></a>00571     command = <a class="code" href="namespaceHandler.xhtml#a02ba68c0c416219816c97189ea8bae4d" title="Locates a Command associated with the game.">Handler::FindCommand</a>( name );
<a name="l00572"></a>00572 
<a name="l00573"></a>00573     <span class="keywordflow">if</span> ( command == NULL )
<a name="l00574"></a>00574     {
<a name="l00575"></a>00575         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::ReloadCommand()-&gt;Server::FindCommand()-&gt; command %s returned NULL&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( name ) );
<a name="l00576"></a>00576         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00577"></a>00577     }
<a name="l00578"></a>00578 
<a name="l00579"></a>00579     file = command-&gt;<a class="code" href="classCommand.xhtml#a63b8f3fc40a0cc9e02fcaa2ea2329c40" title="Return the filename of the associated Plugin object.">gFile</a>();
<a name="l00580"></a>00580     command-&gt;<a class="code" href="classCommand.xhtml#afc0d482427309deb78e094fa787d1477" title="Unload a command from memory that was previously loaded via Command::New().">Delete</a>();
<a name="l00581"></a>00581     command = <span class="keyword">new</span> <a class="code" href="classCommand.xhtml" title="Functions that are built and loaded independently as Plugin objects.">Command</a>();
<a name="l00582"></a>00582 
<a name="l00583"></a>00583     <span class="keywordflow">if</span> ( !command-&gt;<a class="code" href="classCommand.xhtml#a6b8eed27f76619d07effd72372a4be48" title="Load a plugin command from CFG_DAT_DIR_OBJ.">New</a>( file ) )
<a name="l00584"></a>00584     {
<a name="l00585"></a>00585         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::ReloadCommand()-&gt;Command::New()-&gt; command %s returned false&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( file ) );
<a name="l00586"></a>00586         <span class="keyword">delete</span> command;
<a name="l00587"></a>00587         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00588"></a>00588     }
<a name="l00589"></a>00589 
<a name="l00590"></a>00590     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00591"></a>00591 }
<a name="l00592"></a>00592 
<a name="l00598"></a><a class="code" href="namespaceServer.xhtml#a9b7082bbc9faca6eb84180f856116762">00598</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="namespaceServer.xhtml#a9b7082bbc9faca6eb84180f856116762" title="Perform a clean shutdown of the NAMS Server providing a chance to complete disk writes and free all m...">Server::Shutdown</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a>&amp; status )
<a name="l00599"></a>00599 {
<a name="l00600"></a>00600     <span class="keywordtype">bool</span> was_running = !<a class="code" href="globals_8h.xhtml#a4746b8ff4575e45ad5e0850f331e713e">g_global</a>-&gt;<a class="code" href="classServer_1_1Global.xhtml#a97b9415b50cd9bd2b9a96d23553789c4">m_shutdown</a>;
<a name="l00601"></a>00601 
<a name="l00602"></a>00602     <a class="code" href="namespaceServer.xhtml#ae1bb8d3c7c71119bae6dd4205fd6c0cc" title="Sends a message to all clients connected to the Server.">Broadcast</a>( <a class="code" href="config_8h.xhtml#ac4f506b4cbf175bd5fd4539fe3cafdea" title="String broadcast to all clients when the server is shutting down.">CFG_STR_SHUTDOWN</a> );
<a name="l00603"></a>00603     <a class="code" href="globals_8h.xhtml#a4746b8ff4575e45ad5e0850f331e713e">g_global</a>-&gt;<a class="code" href="classServer_1_1Global.xhtml#a97b9415b50cd9bd2b9a96d23553789c4">m_shutdown</a> = <span class="keyword">true</span>;
<a name="l00604"></a>00604 
<a name="l00605"></a>00605     <span class="comment">// Write runtime settings</span>
<a name="l00606"></a>00606     <a class="code" href="globals_8h.xhtml#a23b9f1d96af6a6a4afad680b8da9d267">g_config</a>-&gt;<a class="code" href="classServer_1_1Config.xhtml#a39f409e995ec914244e9eff416d4477e" title="Serialize runtime configuration settings and write them to CFG_DAT_FILE_SETTINGS.">Serialize</a>();
<a name="l00607"></a>00607 
<a name="l00608"></a>00608     <span class="comment">// Cleanup commands</span>
<a name="l00609"></a>00609     <span class="keywordflow">while</span> ( !<a class="code" href="list_8cpp.xhtml#a622badbc988ce65ebb3b4c1c8eb197b4" title="All commands loaded into memory.">command_list</a>.empty() )
<a name="l00610"></a>00610         <a class="code" href="list_8cpp.xhtml#a622badbc988ce65ebb3b4c1c8eb197b4" title="All commands loaded into memory.">command_list</a>.begin()-&gt;second-&gt;Delete();
<a name="l00611"></a>00611     <span class="comment">// Cleanup events</span>
<a name="l00612"></a>00612     <span class="keywordflow">while</span> ( !<a class="code" href="list_8cpp.xhtml#a13278fb7b3325a6779fcb97c172c16ce" title="All events pending execution.">event_list</a>.empty() )
<a name="l00613"></a>00613         <a class="code" href="list_8cpp.xhtml#a13278fb7b3325a6779fcb97c172c16ce" title="All events pending execution.">event_list</a>.front()-&gt;Delete();
<a name="l00614"></a>00614     <span class="comment">// Cleanup locations</span>
<a name="l00615"></a>00615     <span class="keywordflow">while</span> ( !<a class="code" href="list_8cpp.xhtml#acff2cb6f4f515c3405c76c53e1c26744" title="All locations that exist within the server.">location_list</a>.empty() )
<a name="l00616"></a>00616         <a class="code" href="list_8cpp.xhtml#acff2cb6f4f515c3405c76c53e1c26744" title="All locations that exist within the server.">location_list</a>.front()-&gt;Delete();
<a name="l00617"></a>00617     <span class="comment">// Cleanup socket clients</span>
<a name="l00618"></a>00618     <span class="keywordflow">while</span> ( !<a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.empty() )
<a name="l00619"></a>00619         <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.front()-&gt;Delete();
<a name="l00620"></a>00620 
<a name="l00621"></a>00621     <span class="comment">//Cleanup globals</span>
<a name="l00622"></a>00622     <a class="code" href="globals_8h.xhtml#a23b9f1d96af6a6a4afad680b8da9d267">g_config</a>-&gt;<a class="code" href="classServer_1_1Config.xhtml#ac8f796a3da103223e7f176800f4ef929" title="Unload runtime configuration from memory.">Delete</a>();
<a name="l00623"></a>00623     <a class="code" href="globals_8h.xhtml#a8a2ef3550d9c1343e2a0fc84f8bc433f">g_stats</a>-&gt;<a class="code" href="classServer_1_1Stats.xhtml#a04c80b5a0190d979dce3b5b53c7fe122" title="Unload runtime statistics from memory.">Delete</a>();
<a name="l00624"></a>00624     <a class="code" href="globals_8h.xhtml#a4746b8ff4575e45ad5e0850f331e713e">g_global</a>-&gt;<a class="code" href="classServer_1_1Global.xhtml#a14a06f48b3f3d845f54e09c1cbdd8960" title="Unload global variables from memory.">Delete</a>();
<a name="l00625"></a>00625 
<a name="l00626"></a>00626     <span class="comment">// Only output if the server actually booted; otherwise it probably faulted while getting a port from main()</span>
<a name="l00627"></a>00627     <span class="keywordflow">if</span> ( was_running )
<a name="l00628"></a>00628     {
<a name="l00629"></a>00629         <span class="keywordflow">if</span> ( status == EXIT_SUCCESS )
<a name="l00630"></a>00630             <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( 0, <a class="code" href="config_8h.xhtml#ac53ab4c77c45a5e739a054086eec42fa" title="String to write to log on EXIT_SUCCESS.">CFG_STR_EXIT_SUCCESS</a> );
<a name="l00631"></a>00631         <span class="keywordflow">else</span>
<a name="l00632"></a>00632             <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( 0, <a class="code" href="config_8h.xhtml#ac890497fb16954e976eabed51b23b1dd" title="String to write to log on EXIT_FAILURE.">CFG_STR_EXIT_FAILURE</a> );
<a name="l00633"></a>00633     }
<a name="l00634"></a>00634 
<a name="l00635"></a>00635     ::exit( status );
<a name="l00636"></a>00636 }
<a name="l00637"></a>00637 
<a name="l00642"></a><a class="code" href="namespaceServer.xhtml#a19a1e493e1fb50a56d9c77332543d565">00642</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="namespaceServer.xhtml#a19a1e493e1fb50a56d9c77332543d565" title="Start the NAMS Server. Responsible for calling all critical boot-time functions such as SocketServer ...">Server::Startup</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a>&amp; desc )
<a name="l00643"></a>00643 {
<a name="l00644"></a>00644     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00645"></a>00645     <a class="code" href="classSocketServer.xhtml" title="SocketServer extends the Socket class to implement server-side socket functions.">SocketServer</a>* socket_server = NULL;
<a name="l00646"></a>00646     <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a> descriptor = 0;
<a name="l00647"></a>00647     <span class="keywordtype">bool</span> reboot = <span class="keyword">false</span>;
<a name="l00648"></a>00648     <a class="code" href="globals_8h.xhtml#a4746b8ff4575e45ad5e0850f331e713e">g_global</a>-&gt;<a class="code" href="classServer_1_1Global.xhtml#a97b9415b50cd9bd2b9a96d23553789c4">m_shutdown</a> = <span class="keyword">false</span>;
<a name="l00649"></a>00649 
<a name="l00650"></a>00650     <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( 0, <span class="stringliteral">&quot;%s started.&quot;</span>, <a class="code" href="config_8h.xhtml#ae0189326402738016ca074f43606978f" title="The current server version.">CFG_STR_VERSION</a> );
<a name="l00651"></a>00651 
<a name="l00652"></a>00652     <span class="comment">// Fresh boot, otherwise it would already be assigned during a reboot</span>
<a name="l00653"></a>00653     <span class="keywordflow">if</span> ( desc == 0 )
<a name="l00654"></a>00654     {
<a name="l00655"></a>00655         <span class="keywordflow">if</span> ( ( descriptor = ::socket( AF_INET6, SOCK_STREAM, 0 ) ) &lt; 0 )
<a name="l00656"></a>00656         {
<a name="l00657"></a>00657             <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Server::Startup()-&gt;socket()-&gt;&quot;</span> );
<a name="l00658"></a>00658             <a class="code" href="namespaceServer.xhtml#a9b7082bbc9faca6eb84180f856116762" title="Perform a clean shutdown of the NAMS Server providing a chance to complete disk writes and free all m...">Shutdown</a>( EXIT_FAILURE );
<a name="l00659"></a>00659         }
<a name="l00660"></a>00660     }
<a name="l00661"></a>00661     <span class="keywordflow">else</span>
<a name="l00662"></a>00662     {
<a name="l00663"></a>00663         descriptor = desc;
<a name="l00664"></a>00664         reboot = <span class="keyword">true</span>;
<a name="l00665"></a>00665     }
<a name="l00666"></a>00666 
<a name="l00667"></a>00667     socket_server = <span class="keyword">new</span> <a class="code" href="classSocketServer.xhtml" title="SocketServer extends the Socket class to implement server-side socket functions.">SocketServer</a>();
<a name="l00668"></a>00668     <a class="code" href="globals_8h.xhtml#a4746b8ff4575e45ad5e0850f331e713e">g_global</a>-&gt;<a class="code" href="classServer_1_1Global.xhtml#a60944d3654141d136ae0f1af263c803b">m_listen</a> = socket_server;
<a name="l00669"></a>00669 
<a name="l00670"></a>00670     <span class="keywordflow">if</span> ( !socket_server-&gt;<a class="code" href="classSocketServer.xhtml#a0e621d024f754a8c045b4243280cabbe" title="Build a socket for a server and set all attributes.">New</a>( descriptor, reboot ) )
<a name="l00671"></a>00671     {
<a name="l00672"></a>00672         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Server::Startup()-&gt;SocketServer::New()-&gt; returned false&quot;</span> );
<a name="l00673"></a>00673         <a class="code" href="namespaceServer.xhtml#a9b7082bbc9faca6eb84180f856116762" title="Perform a clean shutdown of the NAMS Server providing a chance to complete disk writes and free all m...">Shutdown</a>( EXIT_FAILURE );
<a name="l00674"></a>00674     }
<a name="l00675"></a>00675 
<a name="l00676"></a>00676     <span class="comment">// Bump ourselves to the root folder for file paths</span>
<a name="l00677"></a>00677     <span class="keywordflow">if</span> ( !reboot &amp;&amp; ::chdir( <span class="stringliteral">&quot;..&quot;</span> ) &lt; 0 )
<a name="l00678"></a>00678     {
<a name="l00679"></a>00679         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Server::Startup()-&gt;chdir()-&gt;&quot;</span> );
<a name="l00680"></a>00680         <a class="code" href="namespaceServer.xhtml#a9b7082bbc9faca6eb84180f856116762" title="Perform a clean shutdown of the NAMS Server providing a chance to complete disk writes and free all m...">Shutdown</a>( EXIT_FAILURE );
<a name="l00681"></a>00681     }
<a name="l00682"></a>00682 
<a name="l00683"></a>00683     <span class="comment">// Cleanup any leftovers from a hard crash mid-write</span>
<a name="l00684"></a>00684     <a class="code" href="namespaceUtils.xhtml#a57b7c6b0c6ea6f1498129d9c9a16d8a8" title="Unlinks any temp files leftover from a failed write.">Utils::CleanupTemp</a>( <a class="code" href="globals_8h.xhtml#a8a2ef3550d9c1343e2a0fc84f8bc433f">g_stats</a>-&gt;<a class="code" href="classServer_1_1Stats.xhtml#a21ff42ce048c463e19992aed5d2509bc">m_dir_close</a>, <a class="code" href="globals_8h.xhtml#a8a2ef3550d9c1343e2a0fc84f8bc433f">g_stats</a>-&gt;<a class="code" href="classServer_1_1Stats.xhtml#a58c214b405fa0d6599683f33c8cdd56d">m_dir_open</a> );
<a name="l00685"></a>00685 
<a name="l00686"></a>00686     <span class="keywordflow">if</span> ( !<a class="code" href="globals_8h.xhtml#a23b9f1d96af6a6a4afad680b8da9d267">g_config</a>-&gt;<a class="code" href="classServer_1_1Config.xhtml#a54dba418bfd3365ccfb30bda37ccd461" title="Unserialize runtime configuration settings from CFG_DAT_FILE_SETTINGS.">Unserialize</a>() )
<a name="l00687"></a>00687     {
<a name="l00688"></a>00688         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Server::Config::Unserialize()-&gt; returned false&quot;</span> );
<a name="l00689"></a>00689         <a class="code" href="namespaceServer.xhtml#a9b7082bbc9faca6eb84180f856116762" title="Perform a clean shutdown of the NAMS Server providing a chance to complete disk writes and free all m...">Shutdown</a>( EXIT_FAILURE );
<a name="l00690"></a>00690     }
<a name="l00691"></a>00691 
<a name="l00692"></a>00692     <span class="keywordflow">if</span> ( !<a class="code" href="namespaceServer.xhtml#ac2e1d14caee54a38a89c2394abe6e5a5" title="Search all subfolders of CFG_DAT_DIR_COMMAND and call Command::New() to load each file found to memor...">LoadCommands</a>() )
<a name="l00693"></a>00693     {
<a name="l00694"></a>00694         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Server::Startup()-&gt;Server::LoadCommands()-&gt; returned false&quot;</span> );
<a name="l00695"></a>00695         <a class="code" href="namespaceServer.xhtml#a9b7082bbc9faca6eb84180f856116762" title="Perform a clean shutdown of the NAMS Server providing a chance to complete disk writes and free all m...">Shutdown</a>( EXIT_FAILURE );
<a name="l00696"></a>00696     }
<a name="l00697"></a>00697     <span class="keywordflow">if</span> ( !<a class="code" href="namespaceServer.xhtml#a9b8efad79a32f2356d431788449e1f82" title="Search all subfolders of CFG_DAT_DIR_WORLD and call Location::New() to load each file found to memory...">LoadLocations</a>() )
<a name="l00698"></a>00698     {
<a name="l00699"></a>00699         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Server::Startup()-&gt;Server::LoadLocations()-&gt; returned false&quot;</span> );
<a name="l00700"></a>00700         <a class="code" href="namespaceServer.xhtml#a9b7082bbc9faca6eb84180f856116762" title="Perform a clean shutdown of the NAMS Server providing a chance to complete disk writes and free all m...">Shutdown</a>( EXIT_FAILURE );
<a name="l00701"></a>00701     }
<a name="l00702"></a>00702 
<a name="l00703"></a>00703     <a class="code" href="namespaceServer.xhtml#a16ea0639731dee10e1a253375b508a02" title="Recovers the server state and re-connects client sockets after a reboot.">RebootRecovery</a>( reboot );
<a name="l00704"></a>00704 
<a name="l00705"></a>00705     <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( 0, <span class="stringliteral">&quot;%s is ready on port %lu.&quot;</span>, <a class="code" href="config_8h.xhtml#ae0189326402738016ca074f43606978f" title="The current server version.">CFG_STR_VERSION</a>, <a class="code" href="globals_8h.xhtml#a4746b8ff4575e45ad5e0850f331e713e">g_global</a>-&gt;<a class="code" href="classServer_1_1Global.xhtml#ad75b902c5e4d9bc524ac87cfa1f6ee49">m_port</a> );
<a name="l00706"></a>00706     <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( 0, <span class="stringliteral">&quot;Last compiled on &quot;</span> __DATE__ <span class="stringliteral">&quot; at &quot;</span> __TIME__ <span class="stringliteral">&quot;.&quot;</span> );
<a name="l00707"></a>00707 
<a name="l00708"></a>00708     <span class="keywordflow">return</span>;
<a name="l00709"></a>00709 }
<a name="l00710"></a>00710 
<a name="l00715"></a><a class="code" href="namespaceServer.xhtml#a50b81aa91d8fdaee6f52c5c5ec987990">00715</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="namespaceServer.xhtml#a50b81aa91d8fdaee6f52c5c5ec987990" title="The core update loop of NAMS. This loop spawns all other subsystem update routines and then sleeps fo...">Server::Update</a>()
<a name="l00716"></a>00716 {
<a name="l00717"></a>00717     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00718"></a>00718 
<a name="l00719"></a>00719     <a class="code" href="globals_8h.xhtml#a4746b8ff4575e45ad5e0850f331e713e">g_global</a>-&gt;<a class="code" href="classServer_1_1Global.xhtml#a38310cb58e1f644fa74ab8e1f5321e4e">m_time_current</a> = chrono::high_resolution_clock::now();
<a name="l00720"></a>00720 
<a name="l00721"></a>00721     <span class="comment">// Poll all sockets for changes</span>
<a name="l00722"></a>00722     <span class="keywordflow">if</span> ( !<a class="code" href="namespaceServer.xhtml#a39dbe16fdc8c5f6fbd678c6540fbcd6c" title="Poll all SocketClient objects that are communicating with the associated SocketServer object...">PollSockets</a>() )
<a name="l00723"></a>00723     {
<a name="l00724"></a>00724         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Server::Update()-&gt;Server::PollSockets()-&gt; returned false&quot;</span> );
<a name="l00725"></a>00725         <a class="code" href="namespaceServer.xhtml#a9b7082bbc9faca6eb84180f856116762" title="Perform a clean shutdown of the NAMS Server providing a chance to complete disk writes and free all m...">Shutdown</a>( EXIT_FAILURE );
<a name="l00726"></a>00726     }
<a name="l00727"></a>00727 
<a name="l00728"></a>00728     <span class="comment">// Process any input received</span>
<a name="l00729"></a>00729     <a class="code" href="namespaceServer.xhtml#a2b4cec469bb99c2a45e49de5ba74d1ae" title="Processes input from all active SocketClient objects.">ProcessInput</a>();
<a name="l00730"></a>00730 
<a name="l00731"></a>00731     <span class="comment">// Process any scheduled events</span>
<a name="l00732"></a>00732     <a class="code" href="namespaceServer.xhtml#a266931bde9b1955346955140986d2b00" title="Process any scheduled events tied to the Server.">ProcessEvents</a>();
<a name="l00733"></a>00733 
<a name="l00734"></a>00734     <span class="comment">// Sleep to control game pacing</span>
<a name="l00735"></a>00735     ::usleep( <a class="code" href="macros_8h.xhtml#a5fc45be6b0bb71dc5d4c6390d98bf3ee" title="This is the maximum value usleep will take per man (3) usleep -- 1 second.">USLEEP_MAX</a> / <a class="code" href="config_8h.xhtml#abf59791d9bc371bb841717a963babfc3" title="How many cycles per second should be processed.">CFG_GAM_PULSE_RATE</a> );
<a name="l00736"></a>00736 
<a name="l00737"></a>00737     <span class="keywordflow">return</span>;
<a name="l00738"></a>00738 }
<a name="l00739"></a>00739 
<a name="l00740"></a>00740 <span class="comment">/* Query */</span>
<a name="l00746"></a><a class="code" href="classServer_1_1Config.xhtml#a69c39210f0791ea8af97ee05c38efabc">00746</a> forward_list&lt;string&gt; <a class="code" href="classServer_1_1Config.xhtml#a69c39210f0791ea8af97ee05c38efabc" title="Returns an a copy of the prohibited names list using type from SVR_CFG_PROHIBITED_NAMES.">Server::Config::gProhibitedNames</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; type )<span class="keyword"> const</span>
<a name="l00747"></a>00747 <span class="keyword"></span>{
<a name="l00748"></a>00748     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00749"></a>00749 
<a name="l00750"></a>00750     <span class="keywordflow">if</span> ( type &lt; uintmin_t || type &gt;= <a class="code" href="enum_8h.xhtml#a78dd6653d08a6753832f7620341c0fb7a7ed5feb77c107fca67e72bebebbffc94">MAX_SVR_CFG_PROHIBITED_NAMES</a> )
<a name="l00751"></a>00751     {
<a name="l00752"></a>00752         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::Config::gProhibitedNames()-&gt; called with invalid type %lu&quot;</span>, type );
<a name="l00753"></a>00753         <span class="keywordflow">return</span> forward_list&lt;string&gt;();
<a name="l00754"></a>00754     }
<a name="l00755"></a>00755 
<a name="l00756"></a>00756     <span class="keywordflow">return</span> m_prohibited_names[type];
<a name="l00757"></a>00757 }
<a name="l00758"></a>00758 
<a name="l00763"></a><a class="code" href="classServer_1_1Stats.xhtml#ab8b67dac3edf34148bfbc4059fca8b97">00763</a> <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> <a class="code" href="classServer_1_1Stats.xhtml#ab8b67dac3edf34148bfbc4059fca8b97" title="Returns the combined number of SocketClient and SocketServer objects that have been destroyed...">Server::Stats::gSocketClose</a>()<span class="keyword"> const</span>
<a name="l00764"></a>00764 <span class="keyword"></span>{
<a name="l00765"></a>00765     <span class="keywordflow">return</span> m_socket_close;
<a name="l00766"></a>00766 }
<a name="l00767"></a>00767 
<a name="l00772"></a><a class="code" href="classServer_1_1Stats.xhtml#a1f596bc714002b643097cf93d9760ea1">00772</a> <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> <a class="code" href="classServer_1_1Stats.xhtml#a1f596bc714002b643097cf93d9760ea1" title="Returns the combined number of SocketClient and SocketServer objects that have been created...">Server::Stats::gSocketOpen</a>()<span class="keyword"> const</span>
<a name="l00773"></a>00773 <span class="keyword"></span>{
<a name="l00774"></a>00774     <span class="keywordflow">return</span> m_socket_open;
<a name="l00775"></a>00775 }
<a name="l00776"></a>00776 
<a name="l00782"></a><a class="code" href="namespaceServer.xhtml#afe8c6faa17f98a6ff4b883bcfad7bccb">00782</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceServer.xhtml#afe8c6faa17f98a6ff4b883bcfad7bccb" title="Gets the hostname of the machine that NAMS is running on.">Server::gHostname</a>()
<a name="l00783"></a>00783 {
<a name="l00784"></a>00784     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00785"></a>00785     <span class="keywordtype">string</span> output;
<a name="l00786"></a>00786     <span class="keywordtype">char</span> hostname[<a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a>] = {<span class="charliteral">&#39;\0&#39;</span>};
<a name="l00787"></a>00787 
<a name="l00788"></a>00788     <span class="keywordflow">if</span> ( ::gethostname( hostname, <a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a> - 1 ) &lt; 0 )
<a name="l00789"></a>00789     {
<a name="l00790"></a>00790         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Server::gHostname()-&gt;gethostname()-&gt;&quot;</span> );
<a name="l00791"></a>00791         output = <span class="stringliteral">&quot;(unknown)&quot;</span>;
<a name="l00792"></a>00792 
<a name="l00793"></a>00793         <span class="keywordflow">return</span> output;
<a name="l00794"></a>00794     }
<a name="l00795"></a>00795 
<a name="l00796"></a>00796     output = hostname;
<a name="l00797"></a>00797 
<a name="l00798"></a>00798     <span class="keywordflow">return</span> output;
<a name="l00799"></a>00799 }
<a name="l00800"></a>00800 
<a name="l00806"></a><a class="code" href="namespaceServer.xhtml#a0cd8d593edfecdbb98403c2a2c203d64">00806</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceServer.xhtml#a0cd8d593edfecdbb98403c2a2c203d64" title="Display miscellaneous data about the NAMS Server, such as total data transfered, objects in memory...">Server::gStatus</a>()
<a name="l00807"></a>00807 {
<a name="l00808"></a>00808     <span class="keywordtype">string</span> output;
<a name="l00809"></a>00809 
<a name="l00810"></a>00810     <span class="keywordflow">return</span> output;
<a name="l00811"></a>00811 }
<a name="l00812"></a>00812 
<a name="l00813"></a>00813 <span class="comment">/* Manipulate */</span>
<a name="l00819"></a><a class="code" href="classServer_1_1Config.xhtml#a39f409e995ec914244e9eff416d4477e">00819</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classServer_1_1Config.xhtml#a39f409e995ec914244e9eff416d4477e" title="Serialize runtime configuration settings and write them to CFG_DAT_FILE_SETTINGS.">Server::Config::Serialize</a>()
<a name="l00820"></a>00820 {
<a name="l00821"></a>00821     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00822"></a>00822     ofstream ofs;
<a name="l00823"></a>00823     <span class="keywordtype">string</span> value;
<a name="l00824"></a>00824     stringstream line;
<a name="l00825"></a>00825     <a class="code" href="macros_8h.xhtml#ae55287491ba1907e91a3a9fa09ef9d9a" title="Define a const iterator variable (name) of (type) using (container).">CITER</a>( forward_list, <span class="keywordtype">string</span>, li );
<a name="l00826"></a>00826     <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> i = <a class="code" href="limits_8h.xhtml#ace307ffbe4c934f4565176f184b38d78" title="The minimum value of any uint_t variable.">uintmin_t</a>;
<a name="l00827"></a>00827 
<a name="l00828"></a>00828     <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( 0, <a class="code" href="config_8h.xhtml#a0cf49ed4df3002f63ace602d113423b7" title="String to output prior to writing settings files.">CFG_STR_FILE_SETTINGS_WRITE</a> );
<a name="l00829"></a>00829     <a class="code" href="namespaceUtils.xhtml#a67fd451200ee8a3cc646aeba5cb9513b" title="Begins a write to a temporary file that is intended to replace a live file.">Utils::FileOpen</a>( ofs, <a class="code" href="config_8h.xhtml#a924ea8b2682938f819a03cde988804af" title="File for runtime and account settings.">CFG_DAT_FILE_SETTINGS</a> );
<a name="l00830"></a>00830 
<a name="l00831"></a>00831     <span class="keywordflow">if</span> ( !ofs.good() )
<a name="l00832"></a>00832     {
<a name="l00833"></a>00833         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::Config::Serialize()-&gt; failed to open settings file: %s&quot;</span>, <a class="code" href="config_8h.xhtml#a924ea8b2682938f819a03cde988804af" title="File for runtime and account settings.">CFG_DAT_FILE_SETTINGS</a> );
<a name="l00834"></a>00834         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00835"></a>00835     }
<a name="l00836"></a>00836     <a class="code" href="macros_8h.xhtml#a56c55a4fe68d269a30a5dbddbb210b47" title="Begins writing (name)[iter] to (stream) in key:value format.">KEYLISTLOOP</a>( ofs, <span class="stringliteral">&quot;prohibited_names&quot;</span>, i ); 
<a name="l00837"></a>00837     {
<a name="l00838"></a>00838         <span class="keywordflow">for</span> ( i = 0; i &lt; <a class="code" href="enum_8h.xhtml#a78dd6653d08a6753832f7620341c0fb7a7ed5feb77c107fca67e72bebebbffc94">MAX_SVR_CFG_PROHIBITED_NAMES</a>; i++ )
<a name="l00839"></a>00839         {
<a name="l00840"></a>00840             ofs &lt;&lt; <span class="stringliteral">&quot;prohibited_names[&quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;]&quot;</span> &lt;&lt; <span class="stringliteral">&quot; = &quot;</span>;
<a name="l00841"></a>00841             line.str( <span class="stringliteral">&quot;&quot;</span> );
<a name="l00842"></a>00842 
<a name="l00843"></a>00843             <span class="keywordflow">if</span> ( !m_prohibited_names[i].empty() )
<a name="l00844"></a>00844             {
<a name="l00845"></a>00845                 <span class="keywordflow">for</span> ( li = m_prohibited_names[i].begin(); li != m_prohibited_names[i].end(); li++ )
<a name="l00846"></a>00846                     line &lt;&lt; *li &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;
<a name="l00847"></a>00847 
<a name="l00848"></a>00848                 value = line.str();
<a name="l00849"></a>00849                 value.erase( value.end() - 1 );
<a name="l00850"></a>00850                 ofs &lt;&lt; value &lt;&lt; endl;
<a name="l00851"></a>00851             }
<a name="l00852"></a>00852             <span class="keywordflow">else</span>
<a name="l00853"></a>00853                 ofs &lt;&lt; endl;
<a name="l00854"></a>00854         }
<a name="l00855"></a>00855     }
<a name="l00856"></a>00856 
<a name="l00857"></a>00857     <a class="code" href="namespaceUtils.xhtml#a7008f8effca71806721305d1834bde1e" title="Completes a read from a file.">Utils::FileClose</a>( ofs, <a class="code" href="config_8h.xhtml#abba93b5729f88761203292fb048c9f21" title="Directory for misc files to be written to and loaded from.">CFG_DAT_DIR_ETC</a>, <a class="code" href="config_8h.xhtml#a924ea8b2682938f819a03cde988804af" title="File for runtime and account settings.">CFG_DAT_FILE_SETTINGS</a> );
<a name="l00858"></a>00858     <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( 0, <a class="code" href="config_8h.xhtml#a02331f1e513a67a7b6574740502b9575" title="String to output after file read/write operations are complete.">CFG_STR_FILE_DONE</a> );
<a name="l00859"></a>00859 
<a name="l00860"></a>00860     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00861"></a>00861 }
<a name="l00862"></a>00862 
<a name="l00868"></a><a class="code" href="classServer_1_1Config.xhtml#a54dba418bfd3365ccfb30bda37ccd461">00868</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classServer_1_1Config.xhtml#a54dba418bfd3365ccfb30bda37ccd461" title="Unserialize runtime configuration settings from CFG_DAT_FILE_SETTINGS.">Server::Config::Unserialize</a>()
<a name="l00869"></a>00869 {
<a name="l00870"></a>00870     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00871"></a>00871     ifstream ifs;
<a name="l00872"></a>00872     <span class="keywordtype">string</span> key, value, line;
<a name="l00873"></a>00873     <span class="keywordtype">bool</span> found = <span class="keyword">false</span>;
<a name="l00874"></a>00874     vector&lt;string&gt; token;
<a name="l00875"></a>00875     <a class="code" href="macros_8h.xhtml#a05e235f398566bf49e21735cf00fc656" title="Define an iterator variable (name) of (type) using (container).">ITER</a>( vector, <span class="keywordtype">string</span>, ti );
<a name="l00876"></a>00876     <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> i = <a class="code" href="limits_8h.xhtml#ace307ffbe4c934f4565176f184b38d78" title="The minimum value of any uint_t variable.">uintmin_t</a>;
<a name="l00877"></a>00877     stringstream loop;
<a name="l00878"></a>00878 
<a name="l00879"></a>00879     <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( 0, <a class="code" href="config_8h.xhtml#a17c9f6780711319e53ae873b4201147a" title="String to output prior to loading settings files.">CFG_STR_FILE_SETTINGS_READ</a> );
<a name="l00880"></a>00880     <a class="code" href="namespaceUtils.xhtml#a67fd451200ee8a3cc646aeba5cb9513b" title="Begins a write to a temporary file that is intended to replace a live file.">Utils::FileOpen</a>( ifs, <a class="code" href="config_8h.xhtml#abba93b5729f88761203292fb048c9f21" title="Directory for misc files to be written to and loaded from.">CFG_DAT_DIR_ETC</a>, <a class="code" href="config_8h.xhtml#a924ea8b2682938f819a03cde988804af" title="File for runtime and account settings.">CFG_DAT_FILE_SETTINGS</a> );
<a name="l00881"></a>00881 
<a name="l00882"></a>00882     <span class="keywordflow">if</span> ( !ifs.good() )
<a name="l00883"></a>00883     {
<a name="l00884"></a>00884         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::Config::Unserialize()-&gt; failed to open settings file: %s&quot;</span>, <a class="code" href="config_8h.xhtml#a924ea8b2682938f819a03cde988804af" title="File for runtime and account settings.">CFG_DAT_FILE_SETTINGS</a> );
<a name="l00885"></a>00885         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00886"></a>00886     }
<a name="l00887"></a>00887 
<a name="l00888"></a>00888     <span class="keywordflow">while</span> ( getline( ifs, line ) )
<a name="l00889"></a>00889     {
<a name="l00890"></a>00890         <span class="keywordflow">if</span> ( !<a class="code" href="namespaceUtils.xhtml#a4a4d3dfd2ddb691bc5bcff82252c058b" title="Splits a string in the format of key=value. Retains any whitespace in the value.">Utils::KeyValue</a>( key, value, line) )
<a name="l00891"></a>00891         {
<a name="l00892"></a>00892             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::Config::Unserialize()-&gt; error reading line: %s&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( line ) );
<a name="l00893"></a>00893             <span class="keywordflow">continue</span>;
<a name="l00894"></a>00894         }
<a name="l00895"></a>00895 
<a name="l00896"></a>00896         <span class="keywordflow">for</span> ( ;; )
<a name="l00897"></a>00897         {
<a name="l00898"></a>00898             found = <span class="keyword">false</span>;
<a name="l00899"></a>00899 
<a name="l00900"></a>00900             <span class="keywordflow">if</span> ( <a class="code" href="namespaceUtils.xhtml#acf9ee675ffc2d73b7b2a2a71aa68e36a" title="Returns if string s1 is a prefix of string s2.">Utils::StrPrefix</a>( <span class="stringliteral">&quot;prohibited_names&quot;</span>, key ) ) 
<a name="l00901"></a>00901             {
<a name="l00902"></a>00902                 <span class="keywordflow">for</span> ( ; i &lt; <a class="code" href="enum_8h.xhtml#a78dd6653d08a6753832f7620341c0fb7a7ed5feb77c107fca67e72bebebbffc94">MAX_SVR_CFG_PROHIBITED_NAMES</a>; i++ )
<a name="l00903"></a>00903                 {
<a name="l00904"></a>00904                     loop.str( <span class="stringliteral">&quot;&quot;</span> );
<a name="l00905"></a>00905                     loop &lt;&lt; <span class="stringliteral">&quot;prohibited_names[&quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;
<a name="l00906"></a>00906 
<a name="l00907"></a>00907                     <span class="keywordflow">if</span> ( key == loop.str() )
<a name="l00908"></a>00908                     {
<a name="l00909"></a>00909                         found = <span class="keyword">true</span>;
<a name="l00910"></a>00910                         token = <a class="code" href="namespaceUtils.xhtml#a402a36406edb7938330204e83b1abe83" title="Returns a vector of strings split at spaces based on input.">Utils::StrTokens</a>( value, <span class="keyword">true</span> );
<a name="l00911"></a>00911                         <span class="keywordflow">for</span> ( ti = token.begin(); ti != token.end(); ti++ )
<a name="l00912"></a>00912                             m_prohibited_names[i].push_front( *ti );
<a name="l00913"></a>00913                         m_prohibited_names[i].reverse();
<a name="l00914"></a>00914                         <span class="keywordflow">break</span>;
<a name="l00915"></a>00915                     }
<a name="l00916"></a>00916                 }
<a name="l00917"></a>00917             }
<a name="l00918"></a>00918 
<a name="l00919"></a>00919             <span class="keywordflow">if</span> ( !found )
<a name="l00920"></a>00920                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::Config::Unserialize()-&gt;Utils::KeySet()-&gt; key not found: %s&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( key ) );
<a name="l00921"></a>00921 
<a name="l00922"></a>00922             <span class="keywordflow">break</span>;
<a name="l00923"></a>00923         }
<a name="l00924"></a>00924     }
<a name="l00925"></a>00925 
<a name="l00926"></a>00926     <a class="code" href="namespaceUtils.xhtml#a7008f8effca71806721305d1834bde1e" title="Completes a read from a file.">Utils::FileClose</a>( ifs );
<a name="l00927"></a>00927     <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( 0, <a class="code" href="config_8h.xhtml#a02331f1e513a67a7b6574740502b9575" title="String to output after file read/write operations are complete.">CFG_STR_FILE_DONE</a> );
<a name="l00928"></a>00928 
<a name="l00929"></a>00929     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00930"></a>00930 }
<a name="l00931"></a>00931 
<a name="l00938"></a><a class="code" href="classServer_1_1Stats.xhtml#a9e9cff0e2ed046f840c5393d27016e60">00938</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classServer_1_1Stats.xhtml#a9e9cff0e2ed046f840c5393d27016e60" title="Set the amount of subordinate SocketClient and SocketServer objects that have been closed on a NAMS S...">Server::Stats::sSocketClose</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; amount )
<a name="l00939"></a>00939 {
<a name="l00940"></a>00940     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00941"></a>00941 
<a name="l00942"></a>00942     <span class="keywordflow">if</span> ( amount &lt; uintmin_t || amount &gt;= <a class="code" href="limits_8h.xhtml#a036884201058b0d86aae031fdbcfa16f" title="The maximum value of any uint_t variable.">uintmax_t</a> )
<a name="l00943"></a>00943     {
<a name="l00944"></a>00944         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::Stats::sSocketClose()-&gt; called with m_socket_close overflow: %lu + %lu&quot;</span>, m_socket_close, amount );
<a name="l00945"></a>00945         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00946"></a>00946     }
<a name="l00947"></a>00947 
<a name="l00948"></a>00948     m_socket_close = amount;
<a name="l00949"></a>00949 
<a name="l00950"></a>00950     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00951"></a>00951 }
<a name="l00952"></a>00952 
<a name="l00959"></a><a class="code" href="classServer_1_1Stats.xhtml#a46cb8a5f50a8861516cb0420183d2d4a">00959</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classServer_1_1Stats.xhtml#a46cb8a5f50a8861516cb0420183d2d4a" title="Set the amount of subordinate SocketClient and SocketServer objects that have been opened on a NAMS S...">Server::Stats::sSocketOpen</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; amount )
<a name="l00960"></a>00960 {
<a name="l00961"></a>00961     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00962"></a>00962 
<a name="l00963"></a>00963     <span class="keywordflow">if</span> ( amount &lt; uintmin_t || amount &gt;= <a class="code" href="limits_8h.xhtml#a036884201058b0d86aae031fdbcfa16f" title="The maximum value of any uint_t variable.">uintmax_t</a> )
<a name="l00964"></a>00964     {
<a name="l00965"></a>00965         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::Stats::sSocketOpen()-&gt; called with m_socket_open overflow: %lu + %lu&quot;</span>, m_socket_open, amount );
<a name="l00966"></a>00966         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00967"></a>00967     }
<a name="l00968"></a>00968 
<a name="l00969"></a>00969     m_socket_open = amount;
<a name="l00970"></a>00970 
<a name="l00971"></a>00971     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00972"></a>00972 }
<a name="l00973"></a>00973 
<a name="l00974"></a>00974 <span class="comment">/* Internal */</span>
<a name="l00978"></a><a class="code" href="classServer_1_1Config.xhtml#a8fc5b25bc53ed28009c2405e4f55c7ba">00978</a> <a class="code" href="classServer_1_1Config.xhtml#a8fc5b25bc53ed28009c2405e4f55c7ba" title="Constructor for the Server::Config class.">Server::Config::Config</a>()
<a name="l00979"></a>00979 {
<a name="l00980"></a>00980     <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> i = <a class="code" href="limits_8h.xhtml#ace307ffbe4c934f4565176f184b38d78" title="The minimum value of any uint_t variable.">uintmin_t</a>;
<a name="l00981"></a>00981 
<a name="l00982"></a>00982     <span class="keywordflow">for</span> ( i = 0; i &lt; <a class="code" href="enum_8h.xhtml#a78dd6653d08a6753832f7620341c0fb7a7ed5feb77c107fca67e72bebebbffc94">MAX_SVR_CFG_PROHIBITED_NAMES</a>; i++ )
<a name="l00983"></a>00983         m_prohibited_names[i].clear();
<a name="l00984"></a>00984 
<a name="l00985"></a>00985     <span class="keywordflow">return</span>;
<a name="l00986"></a>00986 }
<a name="l00987"></a>00987 
<a name="l00991"></a><a class="code" href="classServer_1_1Config.xhtml#a03f08c4efd61997ae6c6be516481a58c">00991</a> <a class="code" href="classServer_1_1Config.xhtml#a03f08c4efd61997ae6c6be516481a58c" title="Destructor for the Server::Config class.">Server::Config::~Config</a>()
<a name="l00992"></a>00992 {
<a name="l00993"></a>00993     <span class="keywordflow">return</span>;
<a name="l00994"></a>00994 }
<a name="l00995"></a>00995 
<a name="l00999"></a><a class="code" href="classServer_1_1Global.xhtml#a2b3effe974a7f4e8e813fc08eac57cdb">00999</a> <a class="code" href="classServer_1_1Global.xhtml#a2b3effe974a7f4e8e813fc08eac57cdb" title="Constructor for the Server::Global class.">Server::Global::Global</a>()
<a name="l01000"></a>01000 {
<a name="l01001"></a>01001     m_listen = NULL;
<a name="l01002"></a>01002     m_next_character = <a class="code" href="list_8cpp.xhtml#a6e5a305399253b1fdc5f2ee6b6aece2c" title="All characters that exist within the server.">character_list</a>.begin();
<a name="l01003"></a>01003     m_next_event = <a class="code" href="list_8cpp.xhtml#a13278fb7b3325a6779fcb97c172c16ce" title="All events pending execution.">event_list</a>.begin();
<a name="l01004"></a>01004     m_next_socket_client = <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.begin();
<a name="l01005"></a>01005     m_port = 0;
<a name="l01006"></a>01006     m_shutdown = <span class="keyword">true</span>;
<a name="l01007"></a>01007     m_time_boot = chrono::high_resolution_clock::now();
<a name="l01008"></a>01008     m_time_current = chrono::high_resolution_clock::now();
<a name="l01009"></a>01009 
<a name="l01010"></a>01010     <span class="keywordflow">return</span>;
<a name="l01011"></a>01011 }
<a name="l01012"></a>01012 
<a name="l01016"></a><a class="code" href="classServer_1_1Global.xhtml#a49a7fdf90420561906df68759af61a78">01016</a> <a class="code" href="classServer_1_1Global.xhtml#a49a7fdf90420561906df68759af61a78" title="Destructor for the Server::Global class.">Server::Global::~Global</a>()
<a name="l01017"></a>01017 {
<a name="l01018"></a>01018     m_listen-&gt;Delete();
<a name="l01019"></a>01019 
<a name="l01020"></a>01020     <span class="keywordflow">return</span>;
<a name="l01021"></a>01021 }
<a name="l01022"></a>01022 
<a name="l01026"></a><a class="code" href="classServer_1_1Stats.xhtml#a21af6c2e660e406572eca24b4ac0cd7e">01026</a> <a class="code" href="classServer_1_1Stats.xhtml#a21af6c2e660e406572eca24b4ac0cd7e" title="Constructor for the Server::Stats class.">Server::Stats::Stats</a>()
<a name="l01027"></a>01027 {
<a name="l01028"></a>01028     m_dir_close = 0;
<a name="l01029"></a>01029     m_dir_open = 0;
<a name="l01030"></a>01030     m_socket_close = 0;
<a name="l01031"></a>01031     m_socket_open = 0;
<a name="l01032"></a>01032 
<a name="l01033"></a>01033     <span class="keywordflow">return</span>;
<a name="l01034"></a>01034 }
<a name="l01035"></a>01035 
<a name="l01039"></a><a class="code" href="classServer_1_1Stats.xhtml#ac083faa794183fe0577c1c2c0a023a25">01039</a> <a class="code" href="classServer_1_1Stats.xhtml#ac083faa794183fe0577c1c2c0a023a25" title="Destructor for the Server::Stats class.">Server::Stats::~Stats</a>()
<a name="l01040"></a>01040 {
<a name="l01041"></a>01041     <span class="keywordflow">return</span>;
<a name="l01042"></a>01042 }
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Wed May 1 2013 09:59:13 for NAMS - Not Another MUD Server by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
