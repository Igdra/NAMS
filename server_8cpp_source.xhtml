<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>NAMS - Not Another MUD Server: server.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">NAMS - Not Another MUD Server
   
   </div>
   <div id="projectbrief">NAMS is a C++ MUD server with the primary goals of a safe, modular design and a server core that is substantially decouppled from game logic.</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="dynsections.js"></script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">server.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="server_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/***************************************************************************</span>
<a name="l00002"></a>00002 <span class="comment"> * NAMS - Not Another MUD Server                                           *</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2012 Matthew Goff (matt@goff.cc) &lt;http://www.ackmud.net/&gt; *</span>
<a name="l00004"></a>00004 <span class="comment"> *                                                                         *</span>
<a name="l00005"></a>00005 <span class="comment"> * This program is free software: you can redistribute it and/or modify    *</span>
<a name="l00006"></a>00006 <span class="comment"> * it under the terms of the GNU General Public License as published by    *</span>
<a name="l00007"></a>00007 <span class="comment"> * the Free Software Foundation, either version 3 of the License, or       *</span>
<a name="l00008"></a>00008 <span class="comment"> * (at your option) any later version.                                     *</span>
<a name="l00009"></a>00009 <span class="comment"> *                                                                         *</span>
<a name="l00010"></a>00010 <span class="comment"> * This program is distributed in the hope that it will be useful,         *</span>
<a name="l00011"></a>00011 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of          *</span>
<a name="l00012"></a>00012 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *</span>
<a name="l00013"></a>00013 <span class="comment"> * GNU General Public License for more details.                            *</span>
<a name="l00014"></a>00014 <span class="comment"> *                                                                         *</span>
<a name="l00015"></a>00015 <span class="comment"> * You should have received a copy of the GNU General Public License       *</span>
<a name="l00016"></a>00016 <span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.   *</span>
<a name="l00017"></a>00017 <span class="comment"> ***************************************************************************/</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &quot;<a class="code" href="includes_8h.xhtml" title="All non-system includes that need to be within each .cpp file.">h/includes.h</a>&quot;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;<a class="code" href="class_8h.xhtml" title="All class declarations.">h/class.h</a>&quot;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="server_8h.xhtml" title="The Server class.">h/server.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.xhtml" title="The Command class.">h/command.h</a>&quot;</span>
<a name="l00027"></a>00027  
<a name="l00036"></a><a class="code" href="classServer.xhtml#a45782df02e28df1c52c2a8edb90264e1">00036</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classServer.xhtml#a45782df02e28df1c52c2a8edb90264e1" title="Compile a plugin file.">Server::BuildPlugin</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file, <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; force )
<a name="l00037"></a>00037 {
<a name="l00038"></a>00038     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00039"></a>00039     FILE* popen_fil = NULL;
<a name="l00040"></a>00040     <span class="keywordtype">string</span> build_cmd, build_res;
<a name="l00041"></a>00041     <span class="keywordtype">char</span> buf[<a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a>] = {<span class="charliteral">&#39;\0&#39;</span>};
<a name="l00042"></a>00042 
<a name="l00043"></a>00043     <span class="keywordflow">if</span> ( <a class="code" href="namespaceUtils.xhtml#a158e1deb611937a6313e8683fe7db3fc">Utils::iReadable</a>( <a class="code" href="namespaceUtils.xhtml#addb4a550d4405e6351e52a275fae8107">Utils::DirPath</a>( <a class="code" href="config_8h.xhtml#a7e0533ce20f3c090bdf24cc750916edb" title="Directory for plugins to be loaded from.">CFG_DAT_DIR_OBJ</a>, file, <a class="code" href="config_8h.xhtml#aec22aee0979a918423c5743237a25d81" title="File extension for files after they are compiled.">CFG_PLG_BUILD_EXT_OUT</a> ) ) &amp;&amp; !force )
<a name="l00044"></a>00044         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00045"></a>00045 
<a name="l00046"></a>00046     build_cmd = <a class="code" href="config_8h.xhtml#a7c9c9701683a057772f0aa1de56d7285" title="The compiler command to use when building plugins.">CFG_PLG_BUILD_CMD</a> <span class="stringliteral">&quot; -o &quot;</span>;
<a name="l00047"></a>00047     build_cmd.append( <a class="code" href="namespaceUtils.xhtml#addb4a550d4405e6351e52a275fae8107">Utils::DirPath</a>( <a class="code" href="config_8h.xhtml#a7e0533ce20f3c090bdf24cc750916edb" title="Directory for plugins to be loaded from.">CFG_DAT_DIR_OBJ</a>, file, <a class="code" href="config_8h.xhtml#aec22aee0979a918423c5743237a25d81" title="File extension for files after they are compiled.">CFG_PLG_BUILD_EXT_OUT</a> ) );
<a name="l00048"></a>00048     build_cmd.append( <span class="stringliteral">&quot; &quot;</span> );
<a name="l00049"></a>00049     build_cmd.append( <a class="code" href="namespaceUtils.xhtml#addb4a550d4405e6351e52a275fae8107">Utils::DirPath</a>( <a class="code" href="config_8h.xhtml#af2e75e297c4447df28b526dff66734ce" title="Directory for commands to be loaded from.">CFG_DAT_DIR_COMMAND</a>, file ) );
<a name="l00050"></a>00050     build_cmd.append( <span class="stringliteral">&quot; &quot;</span> <a class="code" href="config_8h.xhtml#aaa9f269d301804d5b6963323f2a049a6" title="All build options passed during compiling a plugin.">CFG_PLG_BUILD_OPT</a> );
<a name="l00051"></a>00051 
<a name="l00052"></a>00052     <span class="keywordflow">if</span> ( ( popen_fil = popen( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( build_cmd ), <span class="stringliteral">&quot;r&quot;</span> ) ) != NULL )
<a name="l00053"></a>00053     {
<a name="l00054"></a>00054         <span class="keywordflow">while</span>( fgets( buf, <a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a>, popen_fil ) != NULL )
<a name="l00055"></a>00055             build_res.append( buf );
<a name="l00056"></a>00056 
<a name="l00057"></a>00057         pclose( popen_fil );
<a name="l00058"></a>00058     }
<a name="l00059"></a>00059 
<a name="l00060"></a>00060     <span class="comment">// Something went wrong</span>
<a name="l00061"></a>00061     <span class="keywordflow">if</span> ( !build_res.empty() )
<a name="l00062"></a>00062     {
<a name="l00063"></a>00063         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::BuildPlugin()-&gt;returned error: %s&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( build_res ) );
<a name="l00064"></a>00064         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00065"></a>00065     }
<a name="l00066"></a>00066     <span class="keywordflow">else</span>
<a name="l00067"></a>00067         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( 0, <span class="stringliteral">&quot;Plugin built successfully: %s&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( file ) );
<a name="l00068"></a>00068 
<a name="l00069"></a>00069     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00070"></a>00070 }
<a name="l00071"></a>00071 
<a name="l00077"></a><a class="code" href="classServer.xhtml#ac2e1d14caee54a38a89c2394abe6e5a5">00077</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classServer.xhtml#ac2e1d14caee54a38a89c2394abe6e5a5" title="Search all subfolders of CFG_DAT_DIR_COMMAND and call Command::New() to load each file found to memor...">Server::LoadCommands</a>()
<a name="l00078"></a>00078 {
<a name="l00079"></a>00079     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00080"></a>00080     timeval start, finish;
<a name="l00081"></a>00081     <a class="code" href="classCommand.xhtml">Command</a>* cmd = NULL;
<a name="l00082"></a>00082     multimap&lt;bool,string&gt; files;
<a name="l00083"></a>00083     <a class="code" href="macros_8h.xhtml#ac49d0f3d55253bd7403da9e5fcab7504" title="Define an iterator variable (name) of (type1,type2) using (container).">MITER</a>( multimap, <span class="keywordtype">bool</span>,<span class="keywordtype">string</span>, mi );
<a name="l00084"></a>00084 
<a name="l00085"></a>00085     start = <a class="code" href="namespaceUtils.xhtml#adbb91eecf7e80e6e97b3ebe38123cc12" title="Returns the current system time.">Utils::CurrentTime</a>();
<a name="l00086"></a>00086     <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( 0, <span class="stringliteral">&quot;Loading commands...&quot;</span> );
<a name="l00087"></a>00087 
<a name="l00088"></a>00088     <span class="comment">// Populate the multimap with a recursive listing of the commands folder</span>
<a name="l00089"></a>00089     <a class="code" href="namespaceUtils.xhtml#af8f745fab0d76a937181e752a54015e4">Utils::ListDirectory</a>( <a class="code" href="config_8h.xhtml#af2e75e297c4447df28b526dff66734ce" title="Directory for commands to be loaded from.">CFG_DAT_DIR_COMMAND</a>, <span class="keyword">true</span>, files, <a class="code" href="classServer.xhtml#a1747867dad63252314aa7083b0084e2b">m_dir_close</a>, <a class="code" href="classServer.xhtml#ad14d47d1da6c22097a242519709e960c">m_dir_open</a> );
<a name="l00090"></a>00090 
<a name="l00091"></a>00091     <span class="keywordflow">if</span> ( files.empty() )
<a name="l00092"></a>00092     {
<a name="l00093"></a>00093         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Server::LoadCommands()-&gt;Utils::ListDirectory()-&gt; CFG_DAT_DIR_COMMAND returned NULL&quot;</span> );
<a name="l00094"></a>00094         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00095"></a>00095     }
<a name="l00096"></a>00096 
<a name="l00097"></a>00097     <span class="keywordflow">for</span> ( mi = files.begin(); mi != files.end(); mi++ )
<a name="l00098"></a>00098     {
<a name="l00099"></a>00099         <span class="keywordflow">if</span> ( mi-&gt;first == <a class="code" href="enum_8h.xhtml#a9325070b1daf70dbe43f7fb9a341aaf2">UTILS_IS_FILE</a> &amp;&amp; ( mi-&gt;second.substr( mi-&gt;second.find_last_of( <span class="stringliteral">&quot;.&quot;</span> ) + 1 ).compare( <a class="code" href="config_8h.xhtml#a47a6c4a9a6b1e4fbcd8edeee92314a25" title="File extension for files to be compiled.">CFG_PLG_BUILD_EXT_IN</a> ) == 0 ) )
<a name="l00100"></a>00100         {
<a name="l00101"></a>00101             <span class="keywordflow">if</span> ( !<a class="code" href="classServer.xhtml#a45782df02e28df1c52c2a8edb90264e1" title="Compile a plugin file.">BuildPlugin</a>( mi-&gt;second ) )
<a name="l00102"></a>00102             {
<a name="l00103"></a>00103                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::LoadCommand()-&gt;Server::BuildPlugin()-&gt; file %s returned false&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( mi-&gt;second ) );
<a name="l00104"></a>00104                 <span class="keywordflow">continue</span>;
<a name="l00105"></a>00105             }
<a name="l00106"></a>00106 
<a name="l00107"></a>00107             cmd = <span class="keyword">new</span> <a class="code" href="classCommand.xhtml">Command</a>();
<a name="l00108"></a>00108             <span class="keywordflow">if</span> ( !cmd-&gt;<a class="code" href="classCommand.xhtml#a6b8eed27f76619d07effd72372a4be48" title="Load a plugin command from CFG_DAT_DIR_OBJ.">New</a>( mi-&gt;second ) )
<a name="l00109"></a>00109             {
<a name="l00110"></a>00110                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::LoadCommands()-&gt;Command::New()-&gt; command %s returned false&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( mi-&gt;second ) );
<a name="l00111"></a>00111                 <span class="keyword">delete</span> cmd;
<a name="l00112"></a>00112             }
<a name="l00113"></a>00113         }
<a name="l00114"></a>00114     }
<a name="l00115"></a>00115 
<a name="l00116"></a>00116     finish = <a class="code" href="namespaceUtils.xhtml#adbb91eecf7e80e6e97b3ebe38123cc12" title="Returns the current system time.">Utils::CurrentTime</a>();
<a name="l00117"></a>00117     <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( 0, <span class="stringliteral">&quot;Loaded %lu commands in %lums.&quot;</span>, <a class="code" href="list_8cpp.xhtml#a622badbc988ce65ebb3b4c1c8eb197b4" title="All commands loaded into memory.">command_list</a>.size(), <a class="code" href="namespaceUtils.xhtml#a405af6e04f92e289f5be1f8ae24a78ee" title="Calculates the different between two timeval variables.">Utils::DiffTime</a>( start, finish, <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88ab80ef2c700675085764563f89553686d">UTILS_TIME_MS</a> ) );
<a name="l00118"></a>00118 
<a name="l00119"></a>00119     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00120"></a>00120 }
<a name="l00121"></a>00121 
<a name="l00122"></a><a class="code" href="classServer.xhtml#a39dbe16fdc8c5f6fbd678c6540fbcd6c">00122</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classServer.xhtml#a39dbe16fdc8c5f6fbd678c6540fbcd6c">Server::PollSockets</a>()
<a name="l00123"></a>00123 {
<a name="l00124"></a>00124     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00125"></a>00125     <span class="keyword">static</span> timespec static_time;
<a name="l00126"></a>00126     fd_set exc_set;
<a name="l00127"></a>00127     fd_set in_set;
<a name="l00128"></a>00128     fd_set out_set;
<a name="l00129"></a>00129     <a class="code" href="classServer.xhtml#a928e4066f1c5c5b5e0c6e4cd13edfc29">ITER</a>( list, <a class="code" href="classSocketClient.xhtml">SocketClient</a>*, si );
<a name="l00130"></a>00130     <a class="code" href="classSocketClient.xhtml">SocketClient</a>* socket_client;
<a name="l00131"></a>00131     <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a> client_desc = 0, max_desc = 0, server_desc = 0;
<a name="l00132"></a>00132 
<a name="l00133"></a>00133     FD_ZERO( &amp;exc_set );
<a name="l00134"></a>00134     FD_ZERO( &amp;in_set );
<a name="l00135"></a>00135     FD_ZERO( &amp;out_set );
<a name="l00136"></a>00136 
<a name="l00137"></a>00137     <span class="keywordflow">if</span> ( ( server_desc = <a class="code" href="classServer.xhtml#abc51b5fc62103bb44ef90b35f1bac666">m_socket</a>-&gt;<a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82">gDescriptor</a>() ) &lt; 1 )
<a name="l00138"></a>00138     {
<a name="l00139"></a>00139         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt;SocketServer::gDescriptor()-&gt; returned invalid descriptor: %ld&quot;</span>, server_desc );
<a name="l00140"></a>00140         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00141"></a>00141     }
<a name="l00142"></a>00142 
<a name="l00143"></a>00143     FD_SET( server_desc, &amp;in_set );
<a name="l00144"></a>00144     max_desc = server_desc;
<a name="l00145"></a>00145 
<a name="l00146"></a>00146     <span class="comment">// Build three file descriptor lists to be polled</span>
<a name="l00147"></a>00147     <span class="keywordflow">for</span> ( si = <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.begin(); si != <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.end(); si = m_socket_client_next )
<a name="l00148"></a>00148     {
<a name="l00149"></a>00149         socket_client = *si;
<a name="l00150"></a>00150 
<a name="l00151"></a>00151         <span class="keywordflow">if</span> ( ( client_desc = socket_client-&gt;<a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82">gDescriptor</a>() ) &lt; 1 )
<a name="l00152"></a>00152         {
<a name="l00153"></a>00153             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt;SocketClient::gDescriptor()-&gt; returned invalid descriptor: %ld&quot;</span>, client_desc );
<a name="l00154"></a>00154             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00155"></a>00155             <span class="keywordflow">continue</span>;
<a name="l00156"></a>00156         }
<a name="l00157"></a>00157 
<a name="l00158"></a>00158         m_socket_client_next = ++si;
<a name="l00159"></a>00159         max_desc = max( server_desc, client_desc );
<a name="l00160"></a>00160 
<a name="l00161"></a>00161         <span class="comment">// Populate lists of: exceptions, pending input, pending output</span>
<a name="l00162"></a>00162         FD_SET( client_desc, &amp;exc_set );
<a name="l00163"></a>00163         FD_SET( client_desc, &amp;in_set );
<a name="l00164"></a>00164         FD_SET( client_desc, &amp;out_set );
<a name="l00165"></a>00165     }
<a name="l00166"></a>00166 
<a name="l00167"></a>00167     <span class="comment">// Ensure the file descriptor lists can be watched for updates</span>
<a name="l00168"></a>00168     <span class="keywordflow">if</span> ( ::pselect( max_desc + 1, &amp;in_set, &amp;out_set, &amp;exc_set, &amp;static_time, 0 ) &lt; 0 )
<a name="l00169"></a>00169     {
<a name="l00170"></a>00170         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt;pselect()-&gt;&quot;</span> );
<a name="l00171"></a>00171         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00172"></a>00172     }
<a name="l00173"></a>00173 
<a name="l00174"></a>00174     <span class="comment">// Process new connections</span>
<a name="l00175"></a>00175     <span class="keywordflow">if</span> ( FD_ISSET( server_desc, &amp;in_set ) )
<a name="l00176"></a>00176         <a class="code" href="classServer.xhtml#abc51b5fc62103bb44ef90b35f1bac666">m_socket</a>-&gt;<a class="code" href="classSocketServer.xhtml#afdbc60c3bc840875d2214b59c6213f63" title="Accept a new connection on the listening port.">Accept</a>();
<a name="l00177"></a>00177 
<a name="l00178"></a>00178     <span class="comment">// Process faulted connections</span>
<a name="l00179"></a>00179     <span class="keywordflow">for</span> ( si = <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.begin(); si != <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.end(); si = m_socket_client_next )
<a name="l00180"></a>00180     {
<a name="l00181"></a>00181         socket_client = *si;
<a name="l00182"></a>00182         m_socket_client_next = ++si;
<a name="l00183"></a>00183 
<a name="l00184"></a>00184         <span class="keywordflow">if</span> ( ( client_desc = socket_client-&gt;<a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82">gDescriptor</a>() ) &lt; 1 )
<a name="l00185"></a>00185         {
<a name="l00186"></a>00186             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt;SocketClient::gDescriptor()-&gt; returned invalid descriptor: %ld&quot;</span>, client_desc );
<a name="l00187"></a>00187             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00188"></a>00188             <span class="keywordflow">continue</span>;
<a name="l00189"></a>00189         }
<a name="l00190"></a>00190 
<a name="l00191"></a>00191         <span class="comment">// Found a faulted socket in the exceptions list</span>
<a name="l00192"></a>00192         <span class="keywordflow">if</span> ( FD_ISSET( client_desc, &amp;exc_set ) )
<a name="l00193"></a>00193         {
<a name="l00194"></a>00194             <span class="comment">// Don&#39;t try to save characters on faulty clients, just boot them</span>
<a name="l00195"></a>00195             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt; disconnecting faulted descriptor: %ld&quot;</span>, client_desc );
<a name="l00196"></a>00196             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00197"></a>00197             <span class="keywordflow">continue</span>;
<a name="l00198"></a>00198         }
<a name="l00199"></a>00199     }
<a name="l00200"></a>00200 
<a name="l00201"></a>00201     <span class="comment">// Process input from active connections</span>
<a name="l00202"></a>00202     <span class="keywordflow">for</span> ( si = <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.begin(); si != <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.end(); si = m_socket_client_next )
<a name="l00203"></a>00203     {
<a name="l00204"></a>00204         socket_client = *si;
<a name="l00205"></a>00205         m_socket_client_next = ++si;
<a name="l00206"></a>00206 
<a name="l00207"></a>00207         <span class="keywordflow">if</span> ( ( client_desc = socket_client-&gt;<a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82">gDescriptor</a>() ) &lt; 1 )
<a name="l00208"></a>00208         {
<a name="l00209"></a>00209             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt;SocketClient::gDescriptor()-&gt; returned invalid descriptor: %ld&quot;</span>, client_desc );
<a name="l00210"></a>00210             <span class="comment">// todo: save character</span>
<a name="l00211"></a>00211             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00212"></a>00212             <span class="keywordflow">continue</span>;
<a name="l00213"></a>00213         }
<a name="l00214"></a>00214 
<a name="l00215"></a>00215         <span class="comment">// Found an active socket in the input list</span>
<a name="l00216"></a>00216         <span class="keywordflow">if</span> ( FD_ISSET( client_desc, &amp;in_set ) )
<a name="l00217"></a>00217         {
<a name="l00218"></a>00218             <span class="comment">// Pending input; clear the idle timeout</span>
<a name="l00219"></a>00219             <span class="keywordflow">if</span> ( !socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a686aea73a8e9c9dbaac6438ec1b24293" title="Set the idle timer value of the socket.">sIdle</a>( 0 ) )
<a name="l00220"></a>00220             {
<a name="l00221"></a>00221                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt;SocketClient::sIdle()-&gt; descriptor %ld returned false setting idle: 0&quot;</span>, client_desc );
<a name="l00222"></a>00222                 <span class="comment">// todo: save character</span>
<a name="l00223"></a>00223                 socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00224"></a>00224                 <span class="keywordflow">continue</span>;
<a name="l00225"></a>00225             }
<a name="l00226"></a>00226 
<a name="l00227"></a>00227             <span class="comment">// Read input, save game character and disconnect socket if unable to</span>
<a name="l00228"></a>00228             <span class="keywordflow">if</span> ( !socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a9ee09f452d900e288b2aa187561ef05d" title="Receive data from the client and append it to a receive buffer.">Recv</a>() )
<a name="l00229"></a>00229             {
<a name="l00230"></a>00230                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt;SocketClient::Recv()-&gt; descriptor %ld returned false&quot;</span>, client_desc );
<a name="l00231"></a>00231                 <span class="comment">// todo: save character</span>
<a name="l00232"></a>00232                 socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00233"></a>00233                 <span class="keywordflow">continue</span>;
<a name="l00234"></a>00234             }
<a name="l00235"></a>00235         }
<a name="l00236"></a>00236         <span class="keywordflow">else</span>
<a name="l00237"></a>00237         {
<a name="l00238"></a>00238             <span class="keywordflow">if</span> ( !socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a686aea73a8e9c9dbaac6438ec1b24293" title="Set the idle timer value of the socket.">sIdle</a>( socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a9c982fdda7a3daa5b153eada40a3b6fb">gIdle</a>() + 1 ) )
<a name="l00239"></a>00239             {
<a name="l00240"></a>00240                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt;SocketClient::sIdle()-&gt; descriptor %ld returned false setting idle: %lu&quot;</span>, client_desc, socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a9c982fdda7a3daa5b153eada40a3b6fb">gIdle</a>() + 1 );
<a name="l00241"></a>00241                 <span class="comment">// todo: save character</span>
<a name="l00242"></a>00242                 socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00243"></a>00243                 <span class="keywordflow">continue</span>;
<a name="l00244"></a>00244             }
<a name="l00245"></a>00245         }
<a name="l00246"></a>00246     }
<a name="l00247"></a>00247 
<a name="l00248"></a>00248     <span class="comment">// Process any pending output</span>
<a name="l00249"></a>00249     <span class="keywordflow">for</span> ( si = <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.begin(); si != <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.end(); si = m_socket_client_next )
<a name="l00250"></a>00250     {
<a name="l00251"></a>00251         socket_client = *si;
<a name="l00252"></a>00252         m_socket_client_next = ++si;
<a name="l00253"></a>00253 
<a name="l00254"></a>00254         <span class="keywordflow">if</span> ( ( client_desc = socket_client-&gt;<a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82">gDescriptor</a>() ) &lt; 1 )
<a name="l00255"></a>00255         {
<a name="l00256"></a>00256             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt;SocketClient::gDescriptor()-&gt; returned invalid descriptor: %ld&quot;</span>, client_desc );
<a name="l00257"></a>00257             <span class="comment">// todo: save character</span>
<a name="l00258"></a>00258             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00259"></a>00259             <span class="keywordflow">continue</span>;
<a name="l00260"></a>00260         }
<a name="l00261"></a>00261 
<a name="l00262"></a>00262         <span class="comment">// Disconnect sockets that have been idle for too long</span>
<a name="l00263"></a>00263         <span class="keywordflow">if</span> ( socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a9c982fdda7a3daa5b153eada40a3b6fb">gIdle</a>() &gt;= <a class="code" href="config_8h.xhtml#a9e1bbc3ba39f67dbf7398220cdca6441" title="(Minutes / tick rate) before disconneting an idle socket. Approx 30 minutes.">CFG_SOC_MAX_IDLE</a> )
<a name="l00264"></a>00264         {
<a name="l00265"></a>00265             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt;SocketClient::gIdle()-&gt; disconnecting idle descriptor: %ld&quot;</span>, client_desc );
<a name="l00266"></a>00266             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a472a64c9b811361791c107498eebf57a">Send</a>( <a class="code" href="config_8h.xhtml#a8e2bae4932d5625144ae9f3bfc8c3fb0" title="String sent on disconnecting an idle socket.">CFG_STR_IDLE</a> );
<a name="l00267"></a>00267             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00268"></a>00268             <span class="comment">// todo: save character</span>
<a name="l00269"></a>00269             <span class="keywordflow">continue</span>;
<a name="l00270"></a>00270         }
<a name="l00271"></a>00271 
<a name="l00272"></a>00272         <span class="comment">// Found an active socket in the output list</span>
<a name="l00273"></a>00273         <span class="keywordflow">if</span> ( FD_ISSET( client_desc, &amp;out_set ) &amp;&amp; socket_client-&gt;<a class="code" href="classSocketClient.xhtml#ad887231d8188cf23b88b6dad24b9408a">PendingOutput</a>() )
<a name="l00274"></a>00274         {
<a name="l00275"></a>00275             <span class="comment">// Send output, save game character and disconnect socket if unable to</span>
<a name="l00276"></a>00276             <span class="keywordflow">if</span> ( !socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a472a64c9b811361791c107498eebf57a">Send</a>() )
<a name="l00277"></a>00277             {
<a name="l00278"></a>00278                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::PollSockets()-&gt;SocketClient::PendingOutput()-&gt;SocketClient::Send()-&gt; descriptor %ld returned false&quot;</span>, client_desc );
<a name="l00279"></a>00279                 socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00280"></a>00280                 <span class="comment">// todo: save character</span>
<a name="l00281"></a>00281                 <span class="keywordflow">continue</span>;
<a name="l00282"></a>00282             }
<a name="l00283"></a>00283         }
<a name="l00284"></a>00284     }
<a name="l00285"></a>00285 
<a name="l00286"></a>00286     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00287"></a>00287 }
<a name="l00288"></a>00288 
<a name="l00289"></a><a class="code" href="classServer.xhtml#a7f5259e36a6bcf3a78a5bede522c3632">00289</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classServer.xhtml#a7f5259e36a6bcf3a78a5bede522c3632">Server::ProcessInput</a>()
<a name="l00290"></a>00290 {
<a name="l00291"></a>00291     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00292"></a>00292     <a class="code" href="classServer.xhtml#a928e4066f1c5c5b5e0c6e4cd13edfc29">ITER</a>( list, <a class="code" href="classSocketClient.xhtml">SocketClient</a>*, si );
<a name="l00293"></a>00293     <a class="code" href="classSocketClient.xhtml">SocketClient</a>* socket_client;
<a name="l00294"></a>00294     <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a> client_desc = 0;
<a name="l00295"></a>00295 
<a name="l00296"></a>00296     <span class="keywordflow">for</span> ( si = <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.begin(); si != <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.end(); si = m_socket_client_next )
<a name="l00297"></a>00297     {
<a name="l00298"></a>00298         socket_client = *si;
<a name="l00299"></a>00299         m_socket_client_next = ++si;
<a name="l00300"></a>00300 
<a name="l00301"></a>00301         <span class="keywordflow">if</span> ( ( client_desc = socket_client-&gt;<a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82">gDescriptor</a>() ) &lt; 1 )
<a name="l00302"></a>00302         {
<a name="l00303"></a>00303             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::ProcessInput()-&gt;SocketClient::gDescriptor()-&gt; returned invalid descriptor: %ld&quot;</span>, client_desc );
<a name="l00304"></a>00304             <span class="comment">// todo: save character</span>
<a name="l00305"></a>00305             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00306"></a>00306             <span class="keywordflow">continue</span>;
<a name="l00307"></a>00307         }
<a name="l00308"></a>00308 
<a name="l00309"></a>00309         <span class="keywordflow">if</span> ( !socket_client-&gt;<a class="code" href="classSocketClient.xhtml#a92fea2bf7e0f20578404ce1abb835a0b" title="Process data from the client&#39;s receive buffer and split it into commands to queue as necessary...">ProcessInput</a>() )
<a name="l00310"></a>00310         {
<a name="l00311"></a>00311             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::ProcessInput()-&gt;SocketClient::ProcessInput()-&gt; descriptor %ld returned false&quot;</span>, client_desc );
<a name="l00312"></a>00312             <span class="comment">// todo: save character</span>
<a name="l00313"></a>00313             socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00314"></a>00314             <span class="keywordflow">continue</span>;
<a name="l00315"></a>00315         }
<a name="l00316"></a>00316 
<a name="l00317"></a>00317         <span class="keywordflow">if</span> ( socket_client-&gt;<a class="code" href="classSocketClient.xhtml#aa46590f5ac09115d9888fdb7c600ef1d">PendingCommand</a>() )
<a name="l00318"></a>00318         {
<a name="l00319"></a>00319             <span class="keywordflow">if</span> ( !socket_client-&gt;<a class="code" href="classSocketClient.xhtml#ad4f63c7d906310dc56a1217136047d7f" title="Interpret the command at the front of the queue.">ProcessCommand</a>() )
<a name="l00320"></a>00320             {
<a name="l00321"></a>00321                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::ProcessInput()-&gt;SocketClient::PendingCommand()-&gt;SocketClient::ProcessCommand()-&gt; descriptor %ld returned false&quot;</span>, client_desc );
<a name="l00322"></a>00322                 <span class="comment">// todo: save character</span>
<a name="l00323"></a>00323                 socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">Delete</a>();
<a name="l00324"></a>00324                 <span class="keywordflow">continue</span>;
<a name="l00325"></a>00325             }
<a name="l00326"></a>00326         }
<a name="l00327"></a>00327     }
<a name="l00328"></a>00328 
<a name="l00329"></a>00329     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00330"></a>00330 }
<a name="l00331"></a>00331 
<a name="l00337"></a><a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762">00337</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762" title="Perform a clean shutdown of the NAMS server providing a chance to complete disk writes and free all m...">Server::Shutdown</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a>&amp; status )
<a name="l00338"></a>00338 {
<a name="l00339"></a>00339     <span class="keywordtype">bool</span> was_running = !<a class="code" href="classServer.xhtml#a959219a66f40019668e8d56e4c0c4cb6">m_shutdown</a>;
<a name="l00340"></a>00340     <a class="code" href="classServer.xhtml#a959219a66f40019668e8d56e4c0c4cb6">m_shutdown</a> = <span class="keyword">true</span>;
<a name="l00341"></a>00341 
<a name="l00342"></a>00342     <span class="comment">// Cleanup commands</span>
<a name="l00343"></a>00343     <span class="keywordflow">while</span> ( !<a class="code" href="list_8cpp.xhtml#a622badbc988ce65ebb3b4c1c8eb197b4" title="All commands loaded into memory.">command_list</a>.empty() )
<a name="l00344"></a>00344         <a class="code" href="list_8cpp.xhtml#a622badbc988ce65ebb3b4c1c8eb197b4" title="All commands loaded into memory.">command_list</a>.begin()-&gt;second-&gt;Delete();
<a name="l00345"></a>00345     <span class="comment">// Cleanup socket clients</span>
<a name="l00346"></a>00346     <span class="keywordflow">while</span> ( !<a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.empty() )
<a name="l00347"></a>00347         <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.front()-&gt;Delete();
<a name="l00348"></a>00348     <span class="comment">// Cleanup socket servers</span>
<a name="l00349"></a>00349     <span class="keywordflow">while</span> ( !<a class="code" href="list_8cpp.xhtml#acc7c180313f75720b77ac49721ba874b" title="All SocketServer objects listening for new client connections.">socket_server_list</a>.empty() )
<a name="l00350"></a>00350         <a class="code" href="list_8cpp.xhtml#acc7c180313f75720b77ac49721ba874b" title="All SocketServer objects listening for new client connections.">socket_server_list</a>.front()-&gt;Delete();
<a name="l00351"></a>00351 
<a name="l00352"></a>00352     <span class="comment">// Only output if the server actually booted; otherwise it probably faulted while getting a port from main()</span>
<a name="l00353"></a>00353     <span class="keywordflow">if</span> ( was_running )
<a name="l00354"></a>00354     {
<a name="l00355"></a>00355         <span class="keywordflow">if</span> ( status == EXIT_SUCCESS )
<a name="l00356"></a>00356             <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( 0, <a class="code" href="config_8h.xhtml#ac53ab4c77c45a5e739a054086eec42fa" title="String to write to log on EXIT_SUCCESS.">CFG_STR_EXIT_SUCCESS</a> );
<a name="l00357"></a>00357         <span class="keywordflow">else</span>
<a name="l00358"></a>00358             <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( 0, <a class="code" href="config_8h.xhtml#ac890497fb16954e976eabed51b23b1dd" title="String to write to log on EXIT_FAILURE.">CFG_STR_EXIT_FAILURE</a> );
<a name="l00359"></a>00359     }
<a name="l00360"></a>00360 
<a name="l00361"></a>00361     ::exit( status );
<a name="l00362"></a>00362 }
<a name="l00363"></a>00363 
<a name="l00368"></a><a class="code" href="classServer.xhtml#a84ed4b0103f83fe0ece0a89983d0787a">00368</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="classServer.xhtml#a84ed4b0103f83fe0ece0a89983d0787a" title="Start the NAMS server. Responsible for calling all critical boot-time functions such as SocketServer ...">Server::Startup</a>()
<a name="l00369"></a>00369 {
<a name="l00370"></a>00370     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00371"></a>00371     <a class="code" href="classSocketServer.xhtml">SocketServer</a>* socket_server;
<a name="l00372"></a>00372     <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a> descriptor = 0;
<a name="l00373"></a>00373     <a class="code" href="classServer.xhtml#a959219a66f40019668e8d56e4c0c4cb6">m_shutdown</a> = <span class="keyword">false</span>;
<a name="l00374"></a>00374 
<a name="l00375"></a>00375     <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( 0, <span class="stringliteral">&quot;%s started.&quot;</span>, <a class="code" href="config_8h.xhtml#ae0189326402738016ca074f43606978f" title="The current server version.">CFG_STR_VERSION</a> );
<a name="l00376"></a>00376     <a class="code" href="classServer.xhtml#ab31b9d2584a9bdcae78154fb7ed37915">m_time_boot</a> = <a class="code" href="namespaceUtils.xhtml#adbb91eecf7e80e6e97b3ebe38123cc12" title="Returns the current system time.">Utils::CurrentTime</a>();
<a name="l00377"></a>00377 
<a name="l00378"></a>00378     <span class="keywordflow">if</span> ( ( descriptor = ::socket( AF_INET6, SOCK_STREAM, 0 ) ) &lt; 0 )
<a name="l00379"></a>00379     {
<a name="l00380"></a>00380         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Server::Startup()-&gt;socket()-&gt;&quot;</span> );
<a name="l00381"></a>00381         <a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762" title="Perform a clean shutdown of the NAMS server providing a chance to complete disk writes and free all m...">Shutdown</a>( EXIT_FAILURE );
<a name="l00382"></a>00382     }
<a name="l00383"></a>00383 
<a name="l00384"></a>00384     socket_server = <span class="keyword">new</span> <a class="code" href="classSocketServer.xhtml">SocketServer</a>( <span class="keyword">this</span>, descriptor );
<a name="l00385"></a>00385     <a class="code" href="classServer.xhtml#abc51b5fc62103bb44ef90b35f1bac666">m_socket</a> = socket_server;
<a name="l00386"></a>00386 
<a name="l00387"></a>00387     <span class="keywordflow">if</span> ( !socket_server-&gt;<a class="code" href="classSocketServer.xhtml#a276e17da8bbf562313bce8edfd32e231" title="Build a socket for a server and set all attributes.">New</a>() )
<a name="l00388"></a>00388     {
<a name="l00389"></a>00389         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Server::Startup()-&gt;SocketServer::New()-&gt; returned false&quot;</span> );
<a name="l00390"></a>00390         <a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762" title="Perform a clean shutdown of the NAMS server providing a chance to complete disk writes and free all m...">Shutdown</a>( EXIT_FAILURE );
<a name="l00391"></a>00391     }
<a name="l00392"></a>00392 
<a name="l00393"></a>00393     <span class="comment">// Bump ourselves to the root folder for file paths</span>
<a name="l00394"></a>00394     <span class="keywordflow">if</span> ( ::chdir( <span class="stringliteral">&quot;..&quot;</span> ) &lt; 0 )
<a name="l00395"></a>00395     {
<a name="l00396"></a>00396         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Server::Startup()-&gt;chdir()-&gt;&quot;</span> );
<a name="l00397"></a>00397         <a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762" title="Perform a clean shutdown of the NAMS server providing a chance to complete disk writes and free all m...">Shutdown</a>( EXIT_FAILURE );
<a name="l00398"></a>00398     }
<a name="l00399"></a>00399 
<a name="l00400"></a>00400     <span class="keywordflow">if</span> ( !<a class="code" href="classServer.xhtml#ac2e1d14caee54a38a89c2394abe6e5a5" title="Search all subfolders of CFG_DAT_DIR_COMMAND and call Command::New() to load each file found to memor...">LoadCommands</a>() )
<a name="l00401"></a>00401     {
<a name="l00402"></a>00402         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Server::Startup()-&gt;Server::LoadCommands()-&gt; returned false&quot;</span> );
<a name="l00403"></a>00403         <a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762" title="Perform a clean shutdown of the NAMS server providing a chance to complete disk writes and free all m...">Shutdown</a>( EXIT_FAILURE );
<a name="l00404"></a>00404     }
<a name="l00405"></a>00405 
<a name="l00406"></a>00406     <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( 0, <span class="stringliteral">&quot;%s is ready on port %lu.&quot;</span>, <a class="code" href="config_8h.xhtml#ae0189326402738016ca074f43606978f" title="The current server version.">CFG_STR_VERSION</a>, <a class="code" href="classServer.xhtml#af41cecc8069262fe8e795518afc93bd6">m_port</a> );
<a name="l00407"></a>00407     <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( 0, <span class="stringliteral">&quot;Last compiled on &quot;</span> __DATE__ <span class="stringliteral">&quot; at &quot;</span> __TIME__ <span class="stringliteral">&quot;.&quot;</span> );
<a name="l00408"></a>00408 
<a name="l00409"></a>00409     <span class="keywordflow">return</span>;
<a name="l00410"></a>00410 }
<a name="l00411"></a>00411 
<a name="l00416"></a><a class="code" href="classServer.xhtml#a50b81aa91d8fdaee6f52c5c5ec987990">00416</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="classServer.xhtml#a50b81aa91d8fdaee6f52c5c5ec987990" title="The core update loop of NAMS. This loop spawns all other subsystem update routines and then sleeps fo...">Server::Update</a>()
<a name="l00417"></a>00417 {
<a name="l00418"></a>00418     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00419"></a>00419 
<a name="l00420"></a>00420     <a class="code" href="classServer.xhtml#a8f5d1702652eae5aa8602fd7b24d4b5c">m_time_current</a> = <a class="code" href="namespaceUtils.xhtml#adbb91eecf7e80e6e97b3ebe38123cc12" title="Returns the current system time.">Utils::CurrentTime</a>();
<a name="l00421"></a>00421 
<a name="l00422"></a>00422     <span class="keywordflow">if</span> ( !<a class="code" href="classServer.xhtml#a39dbe16fdc8c5f6fbd678c6540fbcd6c">PollSockets</a>() )
<a name="l00423"></a>00423     {
<a name="l00424"></a>00424         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Server::Update()-&gt;Server::PollSockets()-&gt; returned false&quot;</span> );
<a name="l00425"></a>00425         <a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762" title="Perform a clean shutdown of the NAMS server providing a chance to complete disk writes and free all m...">Shutdown</a>( EXIT_FAILURE );
<a name="l00426"></a>00426     }
<a name="l00427"></a>00427 
<a name="l00428"></a>00428     <span class="keywordflow">if</span> ( !<a class="code" href="classServer.xhtml#a7f5259e36a6bcf3a78a5bede522c3632">ProcessInput</a>() )
<a name="l00429"></a>00429     {
<a name="l00430"></a>00430         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Server::Update()-&gt;Server::ProcessInput()-&gt; returned false&quot;</span> );
<a name="l00431"></a>00431         <a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762" title="Perform a clean shutdown of the NAMS server providing a chance to complete disk writes and free all m...">Shutdown</a>( EXIT_FAILURE );
<a name="l00432"></a>00432     }
<a name="l00433"></a>00433 
<a name="l00434"></a>00434     <span class="comment">// Sleep to control game pacing</span>
<a name="l00435"></a>00435     ::usleep( <a class="code" href="macros_8h.xhtml#a5fc45be6b0bb71dc5d4c6390d98bf3ee" title="This is the maximum value usleep will take per man (3) usleep -- 1 second.">USLEEP_MAX</a> / <a class="code" href="config_8h.xhtml#abf59791d9bc371bb841717a963babfc3" title="How many cycles per second should be processed.">CFG_GAM_PULSE_RATE</a> );
<a name="l00436"></a>00436 
<a name="l00437"></a>00437     <span class="keywordflow">return</span>;
<a name="l00438"></a>00438 } 
<a name="l00447"></a><a class="code" href="classServer.xhtml#a49dcdc5d378b3c12c46b80788c986052">00447</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="classServer.xhtml#a49dcdc5d378b3c12c46b80788c986052" title="Gets the hostname of the machine that NAMS is running on.">Server::gHostname</a>()<span class="keyword"> const</span>
<a name="l00448"></a>00448 <span class="keyword"></span>{
<a name="l00449"></a>00449     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00450"></a>00450     <span class="keywordtype">string</span> output;
<a name="l00451"></a>00451     <span class="keywordtype">char</span> hostname[<a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a>] = {<span class="charliteral">&#39;\0&#39;</span>};
<a name="l00452"></a>00452 
<a name="l00453"></a>00453     <span class="keywordflow">if</span> ( ::gethostname( hostname, <a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a> - 1 ) &lt; 0 )
<a name="l00454"></a>00454     {
<a name="l00455"></a>00455         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Server::gHostname()-&gt;gethostname()-&gt;&quot;</span> );
<a name="l00456"></a>00456         output = <span class="stringliteral">&quot;(unknown)&quot;</span>;
<a name="l00457"></a>00457 
<a name="l00458"></a>00458         <span class="keywordflow">return</span> output;
<a name="l00459"></a>00459     }
<a name="l00460"></a>00460 
<a name="l00461"></a>00461     output = hostname;
<a name="l00462"></a>00462 
<a name="l00463"></a>00463     <span class="keywordflow">return</span> output;
<a name="l00464"></a>00464 }
<a name="l00465"></a>00465 
<a name="l00471"></a><a class="code" href="classServer.xhtml#aed2e8d1792f3ee019c859c19bfd187e8">00471</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="classServer.xhtml#aed2e8d1792f3ee019c859c19bfd187e8" title="Display miscellaneous data about the NAMS server, such as total data transfered, objects in memory...">Server::gStatus</a>()<span class="keyword"> const</span>
<a name="l00472"></a>00472 <span class="keyword"></span>{
<a name="l00473"></a>00473     <span class="keywordtype">string</span> output;
<a name="l00474"></a>00474 
<a name="l00475"></a>00475     <span class="keywordflow">return</span> output;
<a name="l00476"></a>00476 } 
<a name="l00486"></a><a class="code" href="classServer.xhtml#a89c8ebfdaa4826583f6b53c62b86b244">00486</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classServer.xhtml#a89c8ebfdaa4826583f6b53c62b86b244" title="Set the port of a NAMS Server object.">Server::sPort</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; port )
<a name="l00487"></a>00487 {
<a name="l00488"></a>00488     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00489"></a>00489 
<a name="l00490"></a>00490     <span class="comment">// No logger output; this should only be called pre-boot</span>
<a name="l00491"></a>00491     <span class="keywordflow">if</span> ( port &lt;= CFG_SOC_MIN_PORTNUM || port &gt;= <a class="code" href="config_8h.xhtml#a234e78c07d081a99b72af652cfa37cb8" title="The listening server socket must be below this port.">CFG_SOC_MAX_PORTNUM</a> )
<a name="l00492"></a>00492         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00493"></a>00493 
<a name="l00494"></a>00494     <a class="code" href="classServer.xhtml#af41cecc8069262fe8e795518afc93bd6">m_port</a> = port;
<a name="l00495"></a>00495 
<a name="l00496"></a>00496     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00497"></a>00497 }
<a name="l00498"></a>00498 
<a name="l00505"></a><a class="code" href="classServer.xhtml#a1e68e32745cdfe194e0af388d9d5244a">00505</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classServer.xhtml#a1e68e32745cdfe194e0af388d9d5244a" title="Set the amount of subordinate SocketClient and SocketServer objects that have been closed on a NAMS S...">Server::sSocketClose</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; amount )
<a name="l00506"></a>00506 {
<a name="l00507"></a>00507     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00508"></a>00508 
<a name="l00509"></a>00509     <span class="keywordflow">if</span> ( amount &lt; 0 || amount &gt;= <a class="code" href="limits_8h.xhtml#a036884201058b0d86aae031fdbcfa16f" title="The maximum value of any uint_t variable.">uintmax_t</a> )
<a name="l00510"></a>00510     {
<a name="l00511"></a>00511         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::sSocketClose()-&gt; called with m_socket_close overflow: %lu + %lu&quot;</span>, <a class="code" href="classServer.xhtml#adc7365e75189f3e15ada44fb140e32b0">m_socket_close</a>, amount );
<a name="l00512"></a>00512         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00513"></a>00513     }
<a name="l00514"></a>00514 
<a name="l00515"></a>00515     <a class="code" href="classServer.xhtml#adc7365e75189f3e15ada44fb140e32b0">m_socket_close</a> = amount;
<a name="l00516"></a>00516 
<a name="l00517"></a>00517     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00518"></a>00518 }
<a name="l00519"></a>00519 
<a name="l00526"></a><a class="code" href="classServer.xhtml#a2b261b9b308edee58ec6191966bd019a">00526</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classServer.xhtml#a2b261b9b308edee58ec6191966bd019a" title="Set the amount of subordinate SocketClient and SocketServer objects that have been opened on a NAMS S...">Server::sSocketOpen</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; amount )
<a name="l00527"></a>00527 {
<a name="l00528"></a>00528     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00529"></a>00529 
<a name="l00530"></a>00530     <span class="keywordflow">if</span> ( amount &lt; 0 || amount &gt;= <a class="code" href="limits_8h.xhtml#a036884201058b0d86aae031fdbcfa16f" title="The maximum value of any uint_t variable.">uintmax_t</a> )
<a name="l00531"></a>00531     {
<a name="l00532"></a>00532         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Server::sSocketOpen()-&gt; called with m_socket_open overflow: %lu + %lu&quot;</span>, <a class="code" href="classServer.xhtml#a283e960ea969fe689650af43223395b9">m_socket_open</a>, amount );
<a name="l00533"></a>00533         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00534"></a>00534     }
<a name="l00535"></a>00535 
<a name="l00536"></a>00536     <a class="code" href="classServer.xhtml#a283e960ea969fe689650af43223395b9">m_socket_open</a> = amount;
<a name="l00537"></a>00537 
<a name="l00538"></a>00538     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00539"></a>00539 } 
<a name="l00546"></a><a class="code" href="classServer.xhtml#ad5ec9462b520e59f7ea831e157ee5e59">00546</a> <a class="code" href="classServer.xhtml#ad5ec9462b520e59f7ea831e157ee5e59" title="Constructor for the Server class.">Server::Server</a>()
<a name="l00547"></a>00547 {
<a name="l00548"></a>00548     <a class="code" href="classServer.xhtml#a1747867dad63252314aa7083b0084e2b">m_dir_close</a> = 0;
<a name="l00549"></a>00549     <a class="code" href="classServer.xhtml#ad14d47d1da6c22097a242519709e960c">m_dir_open</a> = 0;
<a name="l00550"></a>00550     <a class="code" href="classServer.xhtml#af41cecc8069262fe8e795518afc93bd6">m_port</a> = 0;
<a name="l00551"></a>00551     <a class="code" href="classServer.xhtml#a7c791c42eb4544ad73c64d8ec4601fff">m_pulse_rate</a> = <a class="code" href="config_8h.xhtml#abf59791d9bc371bb841717a963babfc3" title="How many cycles per second should be processed.">CFG_GAM_PULSE_RATE</a>;
<a name="l00552"></a>00552     <a class="code" href="classServer.xhtml#a959219a66f40019668e8d56e4c0c4cb6">m_shutdown</a> = <span class="keyword">true</span>;
<a name="l00553"></a>00553     <a class="code" href="classServer.xhtml#abc51b5fc62103bb44ef90b35f1bac666">m_socket</a> = 0;
<a name="l00554"></a>00554     m_socket_client_next = <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.begin();
<a name="l00555"></a>00555     <a class="code" href="classServer.xhtml#adc7365e75189f3e15ada44fb140e32b0">m_socket_close</a> = 0;
<a name="l00556"></a>00556     <a class="code" href="classServer.xhtml#a283e960ea969fe689650af43223395b9">m_socket_open</a> = 0;
<a name="l00557"></a>00557     <a class="code" href="classServer.xhtml#ab31b9d2584a9bdcae78154fb7ed37915">m_time_boot</a> = timeval();
<a name="l00558"></a>00558     <a class="code" href="classServer.xhtml#a8f5d1702652eae5aa8602fd7b24d4b5c">m_time_current</a> = timeval();
<a name="l00559"></a>00559 
<a name="l00560"></a>00560     <span class="keywordflow">return</span>;
<a name="l00561"></a>00561 }
<a name="l00562"></a>00562 
<a name="l00566"></a><a class="code" href="classServer.xhtml#a4b3aa2579cb1c8cd1d069582c14d0fa6">00566</a> <a class="code" href="classServer.xhtml#a4b3aa2579cb1c8cd1d069582c14d0fa6" title="Destructor for the Server class.">Server::~Server</a>()
<a name="l00567"></a>00567 {
<a name="l00568"></a>00568     <span class="keywordflow">return</span>;
<a name="l00569"></a>00569 }
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Sun Nov 25 2012 08:13:41 for NAMS - Not Another MUD Server by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
