<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>NAMS - Not Another MUD Server: account.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">NAMS - Not Another MUD Server
   
   </div>
   <div id="projectbrief">NAMS is a C++ MUD server with the primary goals of a safe, modular design and a server core that is substantially decouppled from game logic.</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="dynsections.js"></script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">account.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="account_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/***************************************************************************</span>
<a name="l00002"></a>00002 <span class="comment"> * NAMS - Not Another MUD Server                                           *</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2012 Matthew Goff (matt@goff.cc) &lt;http://www.ackmud.net/&gt; *</span>
<a name="l00004"></a>00004 <span class="comment"> *                                                                         *</span>
<a name="l00005"></a>00005 <span class="comment"> * This program is free software: you can redistribute it and/or modify    *</span>
<a name="l00006"></a>00006 <span class="comment"> * it under the terms of the GNU General Public License as published by    *</span>
<a name="l00007"></a>00007 <span class="comment"> * the Free Software Foundation, either version 3 of the License, or       *</span>
<a name="l00008"></a>00008 <span class="comment"> * (at your option) any later version.                                     *</span>
<a name="l00009"></a>00009 <span class="comment"> *                                                                         *</span>
<a name="l00010"></a>00010 <span class="comment"> * This program is distributed in the hope that it will be useful,         *</span>
<a name="l00011"></a>00011 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of          *</span>
<a name="l00012"></a>00012 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *</span>
<a name="l00013"></a>00013 <span class="comment"> * GNU General Public License for more details.                            *</span>
<a name="l00014"></a>00014 <span class="comment"> *                                                                         *</span>
<a name="l00015"></a>00015 <span class="comment"> * You should have received a copy of the GNU General Public License       *</span>
<a name="l00016"></a>00016 <span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.   *</span>
<a name="l00017"></a>00017 <span class="comment"> ***************************************************************************/</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;<a class="code" href="includes_8h.xhtml" title="All non-system includes that need to be within each .cpp file.">h/includes.h</a>&quot;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="class_8h.xhtml" title="All class declarations.">h/class.h</a>&quot;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="account_8h.xhtml" title="The Account class.">h/account.h</a>&quot;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="comment">/* Core */</span>
<a name="l00034"></a><a class="code" href="classAccount.xhtml#a9d26a3cae2d36c829a42cab3d5c9fe05">00034</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="classAccount.xhtml#a9d26a3cae2d36c829a42cab3d5c9fe05" title="This will set the m_character pointer to NULL, invalidating any references. This exists outside of sC...">Account::ClearCharacter</a>()
<a name="l00035"></a>00035 {
<a name="l00036"></a>00036     <a class="code" href="classAccount.xhtml#af9e8554557e92e13ba37da963ca7c2d7">m_character</a> = NULL;
<a name="l00037"></a>00037 
<a name="l00038"></a>00038     <span class="keywordflow">return</span>;
<a name="l00039"></a>00039 }
<a name="l00040"></a>00040 
<a name="l00045"></a><a class="code" href="classAccount.xhtml#aa82e62e930fb3a8ac58a4592f323db75">00045</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="classAccount.xhtml#aa82e62e930fb3a8ac58a4592f323db75" title="Unload an account from memory that was previously loaded via Account::New().">Account::Delete</a>()
<a name="l00046"></a>00046 {
<a name="l00047"></a>00047     <span class="keyword">delete</span> <span class="keyword">this</span>;
<a name="l00048"></a>00048 
<a name="l00049"></a>00049     <span class="keywordflow">return</span>;
<a name="l00050"></a>00050 }
<a name="l00051"></a>00051 
<a name="l00059"></a><a class="code" href="classAccount.xhtml#adc4545f17264112e532b5a48abe94baf">00059</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classAccount.xhtml#adc4545f17264112e532b5a48abe94baf" title="Create a new account.">Account::New</a>( <a class="code" href="classSocketClient.xhtml" title="Client / remote host specific functions that extend the Socket class.">SocketClient</a>* client, <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; exists )
<a name="l00060"></a>00060 {
<a name="l00061"></a>00061     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00062"></a>00062 
<a name="l00063"></a>00063     <span class="keywordflow">if</span> ( client == NULL )
<a name="l00064"></a>00064     {
<a name="l00065"></a>00065         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Account::New()-&gt; called with NULL client&quot;</span> );
<a name="l00066"></a>00066         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00067"></a>00067     }
<a name="l00068"></a>00068 
<a name="l00069"></a>00069     <span class="keywordflow">if</span> ( client-&gt;<a class="code" href="classSocketClient.xhtml#acdff38db903da34b2a9fcc3e12d6a796" title="Returns the value of a SOC_LOGIN key.">gLogin</a>( <a class="code" href="enum_8h.xhtml#a24c6d1cb52c9ac856a707a99c2308b2aa2795241d82649418f379522adb32897a">SOC_LOGIN_NAME</a> ).empty() )
<a name="l00070"></a>00070     {
<a name="l00071"></a>00071         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Account::New()-&gt;SocketClient::gLogin()-&gt; called with empty SOC_LOGIN_NAME&quot;</span> );
<a name="l00072"></a>00072         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00073"></a>00073     }
<a name="l00074"></a>00074 
<a name="l00075"></a>00075     <span class="keywordflow">if</span> ( client-&gt;<a class="code" href="classSocketClient.xhtml#acdff38db903da34b2a9fcc3e12d6a796" title="Returns the value of a SOC_LOGIN key.">gLogin</a>( <a class="code" href="enum_8h.xhtml#a24c6d1cb52c9ac856a707a99c2308b2aaef7df213742c1c08fe0d427288d8f819">SOC_LOGIN_PASSWORD</a> ).empty() )
<a name="l00076"></a>00076     {
<a name="l00077"></a>00077         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Account::New()-&gt;SocketClient::gLogin()-&gt; called with empty SOC_LOGIN_PASSWORD&quot;</span> );
<a name="l00078"></a>00078         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00079"></a>00079     }
<a name="l00080"></a>00080 
<a name="l00081"></a>00081     <a class="code" href="classAccount.xhtml#abaabaa011c36988830dfb36ee18d79c9">m_client</a> = client;
<a name="l00082"></a>00082 
<a name="l00083"></a>00083     <span class="keywordflow">if</span> ( exists )
<a name="l00084"></a>00084     {
<a name="l00085"></a>00085         <span class="keywordflow">if</span> ( !<a class="code" href="classAccount.xhtml#ae236325fef7b2269f54e9567577e0b92" title="Unserialize the account data from CFG_DAT_FILE_SETTINGS.">Unserialize</a>() )
<a name="l00086"></a>00086         {
<a name="l00087"></a>00087             <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Account::new()-&gt;Account::Unserialize()-&gt; returned false&quot;</span> );
<a name="l00088"></a>00088             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00089"></a>00089         }
<a name="l00090"></a>00090     }
<a name="l00091"></a>00091     <span class="keywordflow">else</span>
<a name="l00092"></a>00092     {
<a name="l00093"></a>00093         <a class="code" href="classAccount.xhtml#acee6203484511ee33880c5ec182c1586">m_name</a> = client-&gt;<a class="code" href="classSocketClient.xhtml#acdff38db903da34b2a9fcc3e12d6a796" title="Returns the value of a SOC_LOGIN key.">gLogin</a>( <a class="code" href="enum_8h.xhtml#a24c6d1cb52c9ac856a707a99c2308b2aa2795241d82649418f379522adb32897a">SOC_LOGIN_NAME</a> );
<a name="l00094"></a>00094         <a class="code" href="classAccount.xhtml#a1435d54c3596aec8968a206d69d1b3e9">m_password</a> = client-&gt;<a class="code" href="classSocketClient.xhtml#acdff38db903da34b2a9fcc3e12d6a796" title="Returns the value of a SOC_LOGIN key.">gLogin</a>( <a class="code" href="enum_8h.xhtml#a24c6d1cb52c9ac856a707a99c2308b2aaef7df213742c1c08fe0d427288d8f819">SOC_LOGIN_PASSWORD</a> );
<a name="l00095"></a>00095 
<a name="l00096"></a>00096         <span class="keywordflow">if</span> ( ::mkdir( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( <a class="code" href="namespaceUtils.xhtml#ad21617b756ef242fbc66e63dec3e4e4d" title="Returns a string consisting of directory/file.ext.">Utils::DirPath</a>( <a class="code" href="config_8h.xhtml#a5820804ddbdd36a88754b698a1a28220" title="Directory for accounts to be loaded from.">CFG_DAT_DIR_ACCOUNT</a>, <a class="code" href="classAccount.xhtml#acee6203484511ee33880c5ec182c1586">m_name</a> ) ), <a class="code" href="config_8h.xhtml#ac352e3d9f85e4ab2996ab932186270c4" title="The chmod mode to set on directories (accounts) created by the server.">CFG_SEC_DIR_MODE</a> ) &lt; 0 )
<a name="l00097"></a>00097         {
<a name="l00098"></a>00098             <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Account::New()-&gt;mkdir()-&gt;&quot;</span> );
<a name="l00099"></a>00099             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00100"></a>00100         }
<a name="l00101"></a>00101 
<a name="l00102"></a>00102         <span class="keywordflow">if</span> ( !<a class="code" href="classAccount.xhtml#a87dfcb1fd6c275ea89ec6f279e7ee8ff" title="Serialize the account data and write them to CFG_DAT_FILE_SETTINGS.">Serialize</a>() )
<a name="l00103"></a>00103         {
<a name="l00104"></a>00104             <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Account::New()-&gt;Account::Serialize()-&gt; returned false&quot;</span> );
<a name="l00105"></a>00105 
<a name="l00106"></a>00106             <span class="keywordflow">if</span> ( ::rmdir( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( <a class="code" href="namespaceUtils.xhtml#ad21617b756ef242fbc66e63dec3e4e4d" title="Returns a string consisting of directory/file.ext.">Utils::DirPath</a>( <a class="code" href="config_8h.xhtml#a5820804ddbdd36a88754b698a1a28220" title="Directory for accounts to be loaded from.">CFG_DAT_DIR_ACCOUNT</a>, <a class="code" href="classAccount.xhtml#acee6203484511ee33880c5ec182c1586">m_name</a> ) ) ) &lt; 0 )
<a name="l00107"></a>00107                 <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Account::New()-&gt;rmdir-&gt;&quot;</span> );
<a name="l00108"></a>00108 
<a name="l00109"></a>00109             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00110"></a>00110         }
<a name="l00111"></a>00111     }
<a name="l00112"></a>00112 
<a name="l00113"></a>00113     <span class="keywordflow">if</span> ( !client-&gt;<a class="code" href="classSocketClient.xhtml#aaa13ed7d0aa65770b617cbf72a5c28d9" title="Associates an Account object to the SocketClient.">sAccount</a>( <span class="keyword">this</span> ) )
<a name="l00114"></a>00114     {
<a name="l00115"></a>00115         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Account::New()-&gt;SocketClient::sAccount()-&gt; returned false&quot;</span> );
<a name="l00116"></a>00116         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00117"></a>00117     }
<a name="l00118"></a>00118 
<a name="l00119"></a>00119     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00120"></a>00120 }
<a name="l00121"></a>00121 
<a name="l00127"></a><a class="code" href="classAccount.xhtml#a87dfcb1fd6c275ea89ec6f279e7ee8ff">00127</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classAccount.xhtml#a87dfcb1fd6c275ea89ec6f279e7ee8ff" title="Serialize the account data and write them to CFG_DAT_FILE_SETTINGS.">Account::Serialize</a>()<span class="keyword"> const</span>
<a name="l00128"></a>00128 <span class="keyword"></span>{
<a name="l00129"></a>00129     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00130"></a>00130     ofstream ofs;
<a name="l00131"></a>00131     <span class="keywordtype">string</span> value;
<a name="l00132"></a>00132     stringstream line;
<a name="l00133"></a>00133     <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> i = <a class="code" href="limits_8h.xhtml#ace307ffbe4c934f4565176f184b38d78" title="The minimum value of any uint_t variable.">uintmin_t</a>;
<a name="l00134"></a>00134     <span class="keywordtype">string</span> file( <a class="code" href="namespaceUtils.xhtml#a3e236b07fd628bcaf2e7c5854dd2a281" title="Returns a string consisting of file.ext.">Utils::FileExt</a>( <a class="code" href="classAccount.xhtml#acee6203484511ee33880c5ec182c1586">m_name</a>, <a class="code" href="config_8h.xhtml#a06ca80b984aa3c3675dd3ac21f08b83d" title="File extension to use for account setting files.">CFG_DAT_FILE_ACT_EXT</a> ) );
<a name="l00135"></a>00135     <a class="code" href="macros_8h.xhtml#ae55287491ba1907e91a3a9fa09ef9d9a" title="Define a const iterator variable (name) of (type) using (container).">CITER</a>( forward_list, <span class="keywordtype">string</span>, li );
<a name="l00136"></a>00136     list&lt;pair&lt;string,string&gt;&gt;::const_iterator pi;
<a name="l00137"></a>00137 
<a name="l00138"></a>00138     <a class="code" href="namespaceUtils.xhtml#a67fd451200ee8a3cc646aeba5cb9513b" title="Begins a write to a temporary file that is intended to replace a live file.">Utils::FileOpen</a>( ofs, file );
<a name="l00139"></a>00139 
<a name="l00140"></a>00140     <span class="keywordflow">if</span> ( !ofs.good() )
<a name="l00141"></a>00141     {
<a name="l00142"></a>00142         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Account::Serialize()-&gt; failed to open settings file: %s&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( file ) );
<a name="l00143"></a>00143         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00144"></a>00144     }
<a name="l00145"></a>00145 
<a name="l00146"></a>00146     <span class="comment">// First to ensure name is loaded for logging later</span>
<a name="l00147"></a>00147     <a class="code" href="macros_8h.xhtml#ae82f16e6bd484cc5cb600fb899b8c24d" title="Write (name) and (value) to (stream) in key:value format.">KEY</a>( ofs, <span class="stringliteral">&quot;name&quot;</span>, <a class="code" href="classAccount.xhtml#acee6203484511ee33880c5ec182c1586">m_name</a> );
<a name="l00148"></a>00148     <a class="code" href="macros_8h.xhtml#a820638a5bca755f5ec10ced9cd8e1a37" title="Begins writing (name) to (stream) in key:value format.">KEYLIST</a>( ofs, <span class="stringliteral">&quot;characters&quot;</span> );
<a name="l00149"></a>00149     {
<a name="l00150"></a>00150         <span class="keywordflow">if</span> ( !<a class="code" href="classAccount.xhtml#aafeee8895a03153e8619e349acfa5374">m_characters</a>.empty() )
<a name="l00151"></a>00151         {
<a name="l00152"></a>00152             <span class="keywordflow">for</span> ( li = <a class="code" href="classAccount.xhtml#aafeee8895a03153e8619e349acfa5374">m_characters</a>.begin(); li != <a class="code" href="classAccount.xhtml#aafeee8895a03153e8619e349acfa5374">m_characters</a>.end(); li++ )
<a name="l00153"></a>00153                 line &lt;&lt; *li &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;
<a name="l00154"></a>00154 
<a name="l00155"></a>00155             value = line.str();
<a name="l00156"></a>00156             value.erase( value.end() - 1 );
<a name="l00157"></a>00157             ofs &lt;&lt; value &lt;&lt; endl;
<a name="l00158"></a>00158         }
<a name="l00159"></a>00159         <span class="keywordflow">else</span>
<a name="l00160"></a>00160             ofs &lt;&lt; endl;
<a name="l00161"></a>00161     }
<a name="l00162"></a>00162     <a class="code" href="macros_8h.xhtml#a56c55a4fe68d269a30a5dbddbb210b47" title="Begins writing (name)[iter] to (stream) in key:value format.">KEYLISTLOOP</a>( ofs, <span class="stringliteral">&quot;logins&quot;</span>, i ); 
<a name="l00163"></a>00163     {
<a name="l00164"></a>00164         <span class="keywordflow">for</span> ( i = 0; i &lt; <a class="code" href="enum_8h.xhtml#a5ed7c456fadb6b481136921090268797a72df719bd3dcc79326c55af673f3f6f4">MAX_ACT_LOGIN</a>; i++ )
<a name="l00165"></a>00165         {
<a name="l00166"></a>00166             ofs &lt;&lt; <span class="stringliteral">&quot;logins[&quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;]&quot;</span> &lt;&lt; <span class="stringliteral">&quot; = &quot;</span>;
<a name="l00167"></a>00167             line.str( <span class="stringliteral">&quot;&quot;</span> );
<a name="l00168"></a>00168 
<a name="l00169"></a>00169             <span class="keywordflow">if</span> ( !<a class="code" href="classAccount.xhtml#aff3dbe2d8fd54c0d215a54353e4c1bf3">m_logins</a>[i].empty() )
<a name="l00170"></a>00170             {
<a name="l00171"></a>00171                 <span class="keywordflow">for</span> ( pi = <a class="code" href="classAccount.xhtml#aff3dbe2d8fd54c0d215a54353e4c1bf3">m_logins</a>[i].begin(); pi != <a class="code" href="classAccount.xhtml#aff3dbe2d8fd54c0d215a54353e4c1bf3">m_logins</a>[i].end(); pi++ )
<a name="l00172"></a>00172                     line &lt;&lt; <a class="code" href="namespaceUtils.xhtml#a1cd33b86e538bb0c765d5c0bcde259e1" title="Generates a string from the pair of t and v.">Utils::MakePair</a>( pi-&gt;first, pi-&gt;second ) &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;
<a name="l00173"></a>00173 
<a name="l00174"></a>00174                 value = line.str();
<a name="l00175"></a>00175                 value.erase( value.end() - 1 );
<a name="l00176"></a>00176                 ofs &lt;&lt; value &lt;&lt; endl;
<a name="l00177"></a>00177             }
<a name="l00178"></a>00178             <span class="keywordflow">else</span>
<a name="l00179"></a>00179                 ofs &lt;&lt; endl;
<a name="l00180"></a>00180         }
<a name="l00181"></a>00181     }
<a name="l00182"></a>00182     <a class="code" href="macros_8h.xhtml#ae82f16e6bd484cc5cb600fb899b8c24d" title="Write (name) and (value) to (stream) in key:value format.">KEY</a>( ofs, <span class="stringliteral">&quot;password&quot;</span>, <a class="code" href="classAccount.xhtml#a1435d54c3596aec8968a206d69d1b3e9">m_password</a> );
<a name="l00183"></a>00183     <a class="code" href="macros_8h.xhtml#ae82f16e6bd484cc5cb600fb899b8c24d" title="Write (name) and (value) to (stream) in key:value format.">KEY</a>( ofs, <span class="stringliteral">&quot;security&quot;</span>, <a class="code" href="classAccount.xhtml#a7d0c6fc3a665919f8cc292ad3c33aef9">m_security</a> );
<a name="l00184"></a>00184 
<a name="l00185"></a>00185     <a class="code" href="namespaceUtils.xhtml#a7008f8effca71806721305d1834bde1e" title="Completes a read from a file.">Utils::FileClose</a>( ofs, <a class="code" href="namespaceUtils.xhtml#ad21617b756ef242fbc66e63dec3e4e4d" title="Returns a string consisting of directory/file.ext.">Utils::DirPath</a>( <a class="code" href="config_8h.xhtml#a5820804ddbdd36a88754b698a1a28220" title="Directory for accounts to be loaded from.">CFG_DAT_DIR_ACCOUNT</a>, <a class="code" href="classAccount.xhtml#acee6203484511ee33880c5ec182c1586">m_name</a> ), <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( file ) );
<a name="l00186"></a>00186 
<a name="l00187"></a>00187     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00188"></a>00188 }
<a name="l00189"></a>00189 
<a name="l00195"></a><a class="code" href="classAccount.xhtml#ae236325fef7b2269f54e9567577e0b92">00195</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classAccount.xhtml#ae236325fef7b2269f54e9567577e0b92" title="Unserialize the account data from CFG_DAT_FILE_SETTINGS.">Account::Unserialize</a>()
<a name="l00196"></a>00196 {
<a name="l00197"></a>00197     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00198"></a>00198     <a class="code" href="macros_8h.xhtml#a6e32552c1b3df78e64aa5205ddf6dae9" title="Define a bitset variable (name) with UTILS_TYPE_INFO already enabled.">UFLAGS_I</a>( finfo );
<a name="l00199"></a>00199     ifstream ifs;
<a name="l00200"></a>00200     <span class="keywordtype">string</span> key, value, line, arg;
<a name="l00201"></a>00201     stringstream loop;
<a name="l00202"></a>00202     <span class="keywordtype">bool</span> found = <span class="keyword">false</span>, maxb = <span class="keyword">false</span>;
<a name="l00203"></a>00203     pair&lt;string,string&gt; item;
<a name="l00204"></a>00204     vector&lt;string&gt; token;
<a name="l00205"></a>00205     <a class="code" href="macros_8h.xhtml#a05e235f398566bf49e21735cf00fc656" title="Define an iterator variable (name) of (type) using (container).">ITER</a>( vector, <span class="keywordtype">string</span>, ti );
<a name="l00206"></a>00206     <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> i = <a class="code" href="limits_8h.xhtml#ace307ffbe4c934f4565176f184b38d78" title="The minimum value of any uint_t variable.">uintmin_t</a>;
<a name="l00207"></a>00207     <span class="keywordtype">string</span> file( <a class="code" href="namespaceUtils.xhtml#a3e236b07fd628bcaf2e7c5854dd2a281" title="Returns a string consisting of file.ext.">Utils::FileExt</a>( <a class="code" href="classAccount.xhtml#abaabaa011c36988830dfb36ee18d79c9">m_client</a>-&gt;<a class="code" href="classSocketClient.xhtml#acdff38db903da34b2a9fcc3e12d6a796" title="Returns the value of a SOC_LOGIN key.">gLogin</a>( <a class="code" href="enum_8h.xhtml#a24c6d1cb52c9ac856a707a99c2308b2aa2795241d82649418f379522adb32897a">SOC_LOGIN_NAME</a> ), <a class="code" href="config_8h.xhtml#a06ca80b984aa3c3675dd3ac21f08b83d" title="File extension to use for account setting files.">CFG_DAT_FILE_ACT_EXT</a> ) );
<a name="l00208"></a>00208 
<a name="l00209"></a>00209     <a class="code" href="namespaceUtils.xhtml#a67fd451200ee8a3cc646aeba5cb9513b" title="Begins a write to a temporary file that is intended to replace a live file.">Utils::FileOpen</a>( ifs, <a class="code" href="namespaceUtils.xhtml#ad21617b756ef242fbc66e63dec3e4e4d" title="Returns a string consisting of directory/file.ext.">Utils::DirPath</a>( <a class="code" href="config_8h.xhtml#a5820804ddbdd36a88754b698a1a28220" title="Directory for accounts to be loaded from.">CFG_DAT_DIR_ACCOUNT</a>, <a class="code" href="classAccount.xhtml#abaabaa011c36988830dfb36ee18d79c9">m_client</a>-&gt;<a class="code" href="classSocketClient.xhtml#acdff38db903da34b2a9fcc3e12d6a796" title="Returns the value of a SOC_LOGIN key.">gLogin</a>( <a class="code" href="enum_8h.xhtml#a24c6d1cb52c9ac856a707a99c2308b2aa2795241d82649418f379522adb32897a">SOC_LOGIN_NAME</a> ) ), file );
<a name="l00210"></a>00210 
<a name="l00211"></a>00211     <span class="keywordflow">if</span> ( !ifs.good() )
<a name="l00212"></a>00212     {
<a name="l00213"></a>00213         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Account::Unserialize()-&gt; failed to open settings file: %s&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( file ) );
<a name="l00214"></a>00214         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00215"></a>00215     }
<a name="l00216"></a>00216 
<a name="l00217"></a>00217     <span class="keywordflow">while</span> ( getline( ifs, line ) )
<a name="l00218"></a>00218     {
<a name="l00219"></a>00219         <span class="keywordflow">if</span> ( !<a class="code" href="namespaceUtils.xhtml#a4a4d3dfd2ddb691bc5bcff82252c058b" title="Splits a string in the format of key=value. Retains any whitespace in the value.">Utils::KeyValue</a>( key, value, line) )
<a name="l00220"></a>00220         {
<a name="l00221"></a>00221             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Account::Unserialize()-&gt; error reading line: %s&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( line ) );
<a name="l00222"></a>00222             <span class="keywordflow">continue</span>;
<a name="l00223"></a>00223         }
<a name="l00224"></a>00224 
<a name="l00225"></a>00225         <span class="keywordflow">for</span> ( ;; )
<a name="l00226"></a>00226         {
<a name="l00227"></a>00227             found = <span class="keyword">false</span>;
<a name="l00228"></a>00228 
<a name="l00229"></a>00229             <span class="comment">// First to ensure name is loaded for logging later</span>
<a name="l00230"></a>00230             <a class="code" href="namespaceUtils.xhtml#aba8fca9daa0f767d7f5af5e2b1d6b81d" title="If the contents of keyd == valu, assigns loc = item.">Utils::KeySet</a>( <span class="keyword">true</span>, found, key, <span class="stringliteral">&quot;name&quot;</span>, value, <a class="code" href="classAccount.xhtml#acee6203484511ee33880c5ec182c1586">m_name</a> );
<a name="l00231"></a>00231             <span class="keywordflow">if</span> ( key == <span class="stringliteral">&quot;characters&quot;</span> )
<a name="l00232"></a>00232             {
<a name="l00233"></a>00233                 found = <span class="keyword">true</span>;
<a name="l00234"></a>00234                 token = <a class="code" href="namespaceUtils.xhtml#a402a36406edb7938330204e83b1abe83" title="Returns a vector of strings split at spaces based on input.">Utils::StrTokens</a>( value, <span class="keyword">true</span> );
<a name="l00235"></a>00235                 <span class="keywordflow">for</span> ( ti = token.begin(); ti != token.end(); ti++ )
<a name="l00236"></a>00236                     <a class="code" href="classAccount.xhtml#aafeee8895a03153e8619e349acfa5374">m_characters</a>.push_front( *ti );
<a name="l00237"></a>00237                 <a class="code" href="classAccount.xhtml#aafeee8895a03153e8619e349acfa5374">m_characters</a>.reverse();
<a name="l00238"></a>00238             }
<a name="l00239"></a>00239             <span class="keywordflow">if</span> ( <a class="code" href="namespaceUtils.xhtml#acf9ee675ffc2d73b7b2a2a71aa68e36a" title="Returns if string s1 is a prefix of string s2.">Utils::StrPrefix</a>( <span class="stringliteral">&quot;logins&quot;</span>, key ) ) 
<a name="l00240"></a>00240             {
<a name="l00241"></a>00241                 <span class="keywordflow">for</span> ( ; i &lt; <a class="code" href="enum_8h.xhtml#a5ed7c456fadb6b481136921090268797a72df719bd3dcc79326c55af673f3f6f4">MAX_ACT_LOGIN</a>; i++ )
<a name="l00242"></a>00242                 {
<a name="l00243"></a>00243                     loop.str( <span class="stringliteral">&quot;&quot;</span> );
<a name="l00244"></a>00244                     loop &lt;&lt; <span class="stringliteral">&quot;logins[&quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;
<a name="l00245"></a>00245 
<a name="l00246"></a>00246                     <span class="keywordflow">if</span> ( key == loop.str() )
<a name="l00247"></a>00247                     {
<a name="l00248"></a>00248                         found = <span class="keyword">true</span>;
<a name="l00249"></a>00249                         <span class="keywordflow">break</span>;
<a name="l00250"></a>00250                     }
<a name="l00251"></a>00251                 }
<a name="l00252"></a>00252 
<a name="l00253"></a>00253                 <span class="keywordflow">while</span> ( !value.empty() )
<a name="l00254"></a>00254                 {
<a name="l00255"></a>00255                     arg = <a class="code" href="namespaceUtils.xhtml#af8586b5c4d77ae0617279186b2bfdb66" title="Returns the first delimeter separated argument from input and then erases it from input...">Utils::Argument</a>( value, <span class="stringliteral">&quot;} &quot;</span> );
<a name="l00256"></a>00256                     item = <a class="code" href="namespaceUtils.xhtml#a11bfe61c6e77603d59116397b1d3f580" title="Returns a pair of type T,V after receiving an input string generated from Utils::MakePair().">Utils::ReadPair</a>( arg );
<a name="l00257"></a>00257                     <a class="code" href="classAccount.xhtml#aff3dbe2d8fd54c0d215a54353e4c1bf3">m_logins</a>[i].push_back( pair&lt;string,string&gt;( item.first, item.second ) );
<a name="l00258"></a>00258                 }
<a name="l00259"></a>00259             }
<a name="l00260"></a>00260             <a class="code" href="namespaceUtils.xhtml#aba8fca9daa0f767d7f5af5e2b1d6b81d" title="If the contents of keyd == valu, assigns loc = item.">Utils::KeySet</a>( <span class="keyword">true</span>, found, key, <span class="stringliteral">&quot;password&quot;</span>, value, <a class="code" href="classAccount.xhtml#a1435d54c3596aec8968a206d69d1b3e9">m_password</a> );
<a name="l00261"></a>00261             <a class="code" href="namespaceUtils.xhtml#aba8fca9daa0f767d7f5af5e2b1d6b81d" title="If the contents of keyd == valu, assigns loc = item.">Utils::KeySet</a>( <span class="keyword">true</span>, found, key, <span class="stringliteral">&quot;security&quot;</span>, value, <a class="code" href="classAccount.xhtml#a7d0c6fc3a665919f8cc292ad3c33aef9">m_security</a>, <a class="code" href="enum_8h.xhtml#a1ac3d345b9be3a5c05bc8d91f23ebd7aa890362692954667bb9893f2ffdf0bef5">MAX_ACT_SECURITY</a>, maxb );
<a name="l00262"></a>00262 
<a name="l00263"></a>00263             <span class="keywordflow">if</span> ( !found )
<a name="l00264"></a>00264                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Account::Unserialize()-&gt;Utils::KeySet()-&gt; key not found: %s&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( key ) );
<a name="l00265"></a>00265 
<a name="l00266"></a>00266             <span class="keywordflow">if</span> ( maxb )
<a name="l00267"></a>00267                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( finfo, <span class="stringliteral">&quot;Account::Unserialize()-&gt;Utils::KeySet()-&gt; account %s, key %s has illegal value %s&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( <a class="code" href="classAccount.xhtml#acee6203484511ee33880c5ec182c1586">m_name</a> ), <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( key ), <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( value ) );
<a name="l00268"></a>00268 
<a name="l00269"></a>00269             <span class="keywordflow">break</span>;
<a name="l00270"></a>00270         }
<a name="l00271"></a>00271     }
<a name="l00272"></a>00272 
<a name="l00273"></a>00273     <a class="code" href="namespaceUtils.xhtml#a7008f8effca71806721305d1834bde1e" title="Completes a read from a file.">Utils::FileClose</a>( ifs );
<a name="l00274"></a>00274 
<a name="l00275"></a>00275     <span class="keywordflow">if</span> ( <a class="code" href="classAccount.xhtml#a1435d54c3596aec8968a206d69d1b3e9">m_password</a> == <a class="code" href="classAccount.xhtml#a1314e9f054a5354c77c20f48e1c6d7f9" title="Returns the associated SocketClient.">gClient</a>()-&gt;gLogin( <a class="code" href="enum_8h.xhtml#a24c6d1cb52c9ac856a707a99c2308b2aaef7df213742c1c08fe0d427288d8f819">SOC_LOGIN_PASSWORD</a> ) )
<a name="l00276"></a>00276     {
<a name="l00277"></a>00277         <span class="comment">// Use the setter as it provides sanity checking and config constraints</span>
<a name="l00278"></a>00278         <a class="code" href="classAccount.xhtml#ae5536f896c11d85f4f948484dd70449a" title="Adds a hostname to the list of previous successful logins. Bumps the oldest entry.">aLogin</a>( <a class="code" href="namespaceUtils.xhtml#a2b2dad8fa1999271cf613dc735f851d4" title="Returns a given time as a string.">Utils::StrTime</a>(), <a class="code" href="classAccount.xhtml#abaabaa011c36988830dfb36ee18d79c9">m_client</a>-&gt;<a class="code" href="classSocket.xhtml#adc72a37934a4f2d10f6ae8fc94bb4ca7" title="Returns the hostname associated to the Socket.">gHostname</a>(), <a class="code" href="enum_8h.xhtml#a5ed7c456fadb6b481136921090268797a5f975459cb924a1c9fd0925a30a5e251">ACT_LOGIN_SUCCESS</a> );
<a name="l00279"></a>00279         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00280"></a>00280     }
<a name="l00281"></a>00281     <span class="keywordflow">else</span>
<a name="l00282"></a>00282     {
<a name="l00283"></a>00283         <span class="comment">// Track that there was a failure, force a save to ensure the data is retained</span>
<a name="l00284"></a>00284         <a class="code" href="classAccount.xhtml#ae5536f896c11d85f4f948484dd70449a" title="Adds a hostname to the list of previous successful logins. Bumps the oldest entry.">aLogin</a>( <a class="code" href="namespaceUtils.xhtml#a2b2dad8fa1999271cf613dc735f851d4" title="Returns a given time as a string.">Utils::StrTime</a>(), <a class="code" href="classAccount.xhtml#abaabaa011c36988830dfb36ee18d79c9">m_client</a>-&gt;<a class="code" href="classSocket.xhtml#adc72a37934a4f2d10f6ae8fc94bb4ca7" title="Returns the hostname associated to the Socket.">gHostname</a>(), <a class="code" href="enum_8h.xhtml#a5ed7c456fadb6b481136921090268797acfbbe15f0da141a4888dd55e37b4b8ea">ACT_LOGIN_FAILURE</a> );
<a name="l00285"></a>00285         <a class="code" href="classAccount.xhtml#a87dfcb1fd6c275ea89ec6f279e7ee8ff" title="Serialize the account data and write them to CFG_DAT_FILE_SETTINGS.">Serialize</a>();
<a name="l00286"></a>00286         <a class="code" href="classAccount.xhtml#a1314e9f054a5354c77c20f48e1c6d7f9" title="Returns the associated SocketClient.">gClient</a>()-&gt;<a class="code" href="classSocketClient.xhtml#a6268f3d184970ec0076da657c39d2e80" title="Process data from the client&#39;s send buffer and transmit it via the socket.">Send</a>( <a class="code" href="config_8h.xhtml#a8ca9b1580c268c16dbe8feddb330c025" title="String sent when an invalid account password is received.">CFG_STR_ACT_PASSWORD_INVALID</a> );
<a name="l00287"></a>00287 
<a name="l00288"></a>00288         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00289"></a>00289     }
<a name="l00290"></a>00290 }
<a name="l00291"></a>00291 
<a name="l00292"></a>00292 <span class="comment">/* Query */</span>
<a name="l00297"></a><a class="code" href="classAccount.xhtml#a1d2b9eb6c351b9d43d16e649fa599466">00297</a> <a class="code" href="classCharacter.xhtml" title="An actor within the game world.">Character</a>* <a class="code" href="classAccount.xhtml#a1d2b9eb6c351b9d43d16e649fa599466" title="Returns the associated Character, if any.">Account::gCharacter</a>()<span class="keyword"> const</span>
<a name="l00298"></a>00298 <span class="keyword"></span>{
<a name="l00299"></a>00299     <span class="keywordflow">return</span> <a class="code" href="classAccount.xhtml#af9e8554557e92e13ba37da963ca7c2d7">m_character</a>;
<a name="l00300"></a>00300 }
<a name="l00301"></a>00301 
<a name="l00306"></a><a class="code" href="classAccount.xhtml#a1314e9f054a5354c77c20f48e1c6d7f9">00306</a> <a class="code" href="classSocketClient.xhtml" title="Client / remote host specific functions that extend the Socket class.">SocketClient</a>* <a class="code" href="classAccount.xhtml#a1314e9f054a5354c77c20f48e1c6d7f9" title="Returns the associated SocketClient.">Account::gClient</a>()<span class="keyword"> const</span>
<a name="l00307"></a>00307 <span class="keyword"></span>{
<a name="l00308"></a>00308     <span class="keywordflow">return</span> <a class="code" href="classAccount.xhtml#abaabaa011c36988830dfb36ee18d79c9">m_client</a>;
<a name="l00309"></a>00309 }
<a name="l00310"></a>00310 
<a name="l00316"></a><a class="code" href="classAccount.xhtml#a3e2d487e0962a90f4f00cf0ac73cbb7e">00316</a> <span class="keyword">const</span> list&lt;pair&lt;string,string&gt;&gt; <a class="code" href="classAccount.xhtml#a3e2d487e0962a90f4f00cf0ac73cbb7e" title="Returns a list of either login successes or failures based on ACT_LOGIN.">Account::gLogins</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; type )<span class="keyword"> const</span>
<a name="l00317"></a>00317 <span class="keyword"></span>{
<a name="l00318"></a>00318     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00319"></a>00319 
<a name="l00320"></a>00320     <span class="keywordflow">if</span> ( type &lt; uintmin_t || type &gt;= <a class="code" href="enum_8h.xhtml#a5ed7c456fadb6b481136921090268797a72df719bd3dcc79326c55af673f3f6f4">MAX_ACT_LOGIN</a> )
<a name="l00321"></a>00321     {
<a name="l00322"></a>00322         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Account::gLogins()-&gt; called with invalid type %lu&quot;</span>, type );
<a name="l00323"></a>00323         <span class="keywordflow">return</span> list&lt;pair&lt;string,string&gt;&gt;();
<a name="l00324"></a>00324     }
<a name="l00325"></a>00325 
<a name="l00326"></a>00326     <span class="keywordflow">return</span> <a class="code" href="classAccount.xhtml#aff3dbe2d8fd54c0d215a54353e4c1bf3">m_logins</a>[type];
<a name="l00327"></a>00327 }
<a name="l00328"></a>00328 
<a name="l00333"></a><a class="code" href="classAccount.xhtml#aa5598c7fb0b2099dfee5d15696a5ef24">00333</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="classAccount.xhtml#aa5598c7fb0b2099dfee5d15696a5ef24" title="Returns the name of the account.">Account::gName</a>()<span class="keyword"> const</span>
<a name="l00334"></a>00334 <span class="keyword"></span>{
<a name="l00335"></a>00335     <span class="keywordflow">return</span> <a class="code" href="classAccount.xhtml#acee6203484511ee33880c5ec182c1586">m_name</a>;
<a name="l00336"></a>00336 }
<a name="l00337"></a>00337 
<a name="l00342"></a><a class="code" href="classAccount.xhtml#a9a9ee5a78d3353c688c6418c2a88ba54">00342</a> <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> <a class="code" href="classAccount.xhtml#a9a9ee5a78d3353c688c6418c2a88ba54" title="Returns the authorized security level of the account.">Account::gSecurity</a>()<span class="keyword"> const</span>
<a name="l00343"></a>00343 <span class="keyword"></span>{
<a name="l00344"></a>00344     <span class="keywordflow">return</span> <a class="code" href="classAccount.xhtml#a7d0c6fc3a665919f8cc292ad3c33aef9">m_security</a>;
<a name="l00345"></a>00345 }
<a name="l00346"></a>00346 
<a name="l00347"></a>00347 <span class="comment">/* Manipulate */</span>
<a name="l00354"></a><a class="code" href="classAccount.xhtml#a42914cf1147f5c5a480dbfcb9a0ff3fe">00354</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classAccount.xhtml#a42914cf1147f5c5a480dbfcb9a0ff3fe" title="Sets the active Character associated with the account.">Account::sCharacter</a>( <a class="code" href="classCharacter.xhtml" title="An actor within the game world.">Character</a>* character )
<a name="l00355"></a>00355 {
<a name="l00356"></a>00356     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00357"></a>00357 
<a name="l00358"></a>00358     <span class="keywordflow">if</span> ( character == NULL )
<a name="l00359"></a>00359     {
<a name="l00360"></a>00360         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Account::sCharacter()-&gt; called with NULL character&quot;</span> );
<a name="l00361"></a>00361         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00362"></a>00362     }
<a name="l00363"></a>00363 
<a name="l00364"></a>00364     <span class="keywordflow">if</span> ( <a class="code" href="classAccount.xhtml#af9e8554557e92e13ba37da963ca7c2d7">m_character</a> != NULL )
<a name="l00365"></a>00365     {
<a name="l00366"></a>00366         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Account::sCharacter()-&gt; called while m_character is not NULL&quot;</span> );
<a name="l00367"></a>00367         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00368"></a>00368     }
<a name="l00369"></a>00369 
<a name="l00370"></a>00370     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00371"></a>00371 }
<a name="l00372"></a>00372 
<a name="l00381"></a><a class="code" href="classAccount.xhtml#ae5536f896c11d85f4f948484dd70449a">00381</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classAccount.xhtml#ae5536f896c11d85f4f948484dd70449a" title="Adds a hostname to the list of previous successful logins. Bumps the oldest entry.">Account::aLogin</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; date, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; name, <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; type )
<a name="l00382"></a>00382 {
<a name="l00383"></a>00383     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00384"></a>00384 
<a name="l00385"></a>00385     <span class="keywordflow">if</span> ( date.empty() )
<a name="l00386"></a>00386     {
<a name="l00387"></a>00387         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Account::aHost()-&gt; called with empty date&quot;</span> );
<a name="l00388"></a>00388         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00389"></a>00389     }
<a name="l00390"></a>00390 
<a name="l00391"></a>00391     <span class="keywordflow">if</span> ( name.empty() )
<a name="l00392"></a>00392     {
<a name="l00393"></a>00393         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Account::aHost()-&gt; called with empty name&quot;</span> );
<a name="l00394"></a>00394         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00395"></a>00395     }
<a name="l00396"></a>00396 
<a name="l00397"></a>00397     <span class="keywordflow">if</span> ( type &gt;= <a class="code" href="enum_8h.xhtml#a5ed7c456fadb6b481136921090268797a72df719bd3dcc79326c55af673f3f6f4">MAX_ACT_LOGIN</a> )
<a name="l00398"></a>00398     {
<a name="l00399"></a>00399         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Account::aHost()-&gt; called with invalid type&quot;</span> );
<a name="l00400"></a>00400         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00401"></a>00401     }
<a name="l00402"></a>00402 
<a name="l00403"></a>00403     <span class="keywordflow">while</span> ( <a class="code" href="classAccount.xhtml#aff3dbe2d8fd54c0d215a54353e4c1bf3">m_logins</a>[type].size() &gt;= <a class="code" href="config_8h.xhtml#a30a6b57a247bf4c1e6745f05d56169b1" title="The number of previous hosts to track for login history.">CFG_ACT_LOGIN_MAX</a> )
<a name="l00404"></a>00404         <a class="code" href="classAccount.xhtml#aff3dbe2d8fd54c0d215a54353e4c1bf3">m_logins</a>[type].pop_back();
<a name="l00405"></a>00405 
<a name="l00406"></a>00406     <a class="code" href="classAccount.xhtml#aff3dbe2d8fd54c0d215a54353e4c1bf3">m_logins</a>[type].push_front( pair&lt;string,string&gt;( date, name ) );
<a name="l00407"></a>00407 
<a name="l00408"></a>00408     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00409"></a>00409 }
<a name="l00410"></a>00410 
<a name="l00417"></a><a class="code" href="classAccount.xhtml#a714070b95fbb57cb2f1a8e68046d92ef">00417</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classAccount.xhtml#a714070b95fbb57cb2f1a8e68046d92ef" title="Set the security level of the account.">Account::sSecurity</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; security )
<a name="l00418"></a>00418 {
<a name="l00419"></a>00419     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00420"></a>00420 
<a name="l00421"></a>00421     <span class="keywordflow">if</span> ( security &lt; ACT_SECURITY_NONE || security &gt;= <a class="code" href="enum_8h.xhtml#a1ac3d345b9be3a5c05bc8d91f23ebd7aa890362692954667bb9893f2ffdf0bef5">MAX_ACT_SECURITY</a> )
<a name="l00422"></a>00422     {
<a name="l00423"></a>00423         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Account::sSecurity()-&gt; called with invalid security level: %lu &quot;</span>, security );
<a name="l00424"></a>00424         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00425"></a>00425     }
<a name="l00426"></a>00426 
<a name="l00427"></a>00427     <a class="code" href="classAccount.xhtml#a7d0c6fc3a665919f8cc292ad3c33aef9">m_security</a> = security;
<a name="l00428"></a>00428 
<a name="l00429"></a>00429     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00430"></a>00430 }
<a name="l00431"></a>00431 
<a name="l00432"></a>00432 <span class="comment">/* Internal */</span>
<a name="l00436"></a><a class="code" href="classAccount.xhtml#a366660970b5eeb5c17436062327f1b14">00436</a> <a class="code" href="classAccount.xhtml#a366660970b5eeb5c17436062327f1b14" title="Constructor for the Account class.">Account::Account</a>()
<a name="l00437"></a>00437 {
<a name="l00438"></a>00438     <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> i = <a class="code" href="limits_8h.xhtml#ace307ffbe4c934f4565176f184b38d78" title="The minimum value of any uint_t variable.">uintmin_t</a>;
<a name="l00439"></a>00439 
<a name="l00440"></a>00440     <a class="code" href="classAccount.xhtml#af9e8554557e92e13ba37da963ca7c2d7">m_character</a> = NULL;
<a name="l00441"></a>00441     <a class="code" href="classAccount.xhtml#aafeee8895a03153e8619e349acfa5374">m_characters</a>.clear();
<a name="l00442"></a>00442     <a class="code" href="classAccount.xhtml#abaabaa011c36988830dfb36ee18d79c9">m_client</a> = NULL;
<a name="l00443"></a>00443     <span class="keywordflow">for</span> ( i = 0; i &lt; <a class="code" href="enum_8h.xhtml#a5ed7c456fadb6b481136921090268797a72df719bd3dcc79326c55af673f3f6f4">MAX_ACT_LOGIN</a>; i++ )
<a name="l00444"></a>00444         <a class="code" href="classAccount.xhtml#aff3dbe2d8fd54c0d215a54353e4c1bf3">m_logins</a>[i].clear();
<a name="l00445"></a>00445     <a class="code" href="classAccount.xhtml#acee6203484511ee33880c5ec182c1586">m_name</a>.clear();
<a name="l00446"></a>00446     <a class="code" href="classAccount.xhtml#a1435d54c3596aec8968a206d69d1b3e9">m_password</a>.clear();
<a name="l00447"></a>00447     <a class="code" href="classAccount.xhtml#a7d0c6fc3a665919f8cc292ad3c33aef9">m_security</a> = <a class="code" href="enum_8h.xhtml#a1ac3d345b9be3a5c05bc8d91f23ebd7aa62268793e26686df00b9673b04dd649b">ACT_SECURITY_NONE</a>;
<a name="l00448"></a>00448 
<a name="l00449"></a>00449     <span class="keywordflow">return</span>;
<a name="l00450"></a>00450 }
<a name="l00451"></a>00451 
<a name="l00455"></a><a class="code" href="classAccount.xhtml#a569c9ef0e42b9157690b4ceb646daba8">00455</a> <a class="code" href="classAccount.xhtml#a569c9ef0e42b9157690b4ceb646daba8" title="Destructor for the Account class.">Account::~Account</a>()
<a name="l00456"></a>00456 {
<a name="l00457"></a>00457     <span class="keywordflow">return</span>;
<a name="l00458"></a>00458 }
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Sun Mar 17 2013 18:30:02 for NAMS - Not Another MUD Server by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
