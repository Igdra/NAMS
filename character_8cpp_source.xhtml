<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>NAMS - Not Another MUD Server: character.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">NAMS - Not Another MUD Server
   
   </div>
   <div id="projectbrief">NAMS is a C++ MUD server with the primary goals of a safe, modular design and a server core that is substantially decouppled from game logic.</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="dynsections.js"></script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">character.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="character_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/***************************************************************************</span>
<a name="l00002"></a>00002 <span class="comment"> * NAMS - Not Another MUD Server                                           *</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2012 Matthew Goff (matt@goff.cc) &lt;http://www.ackmud.net/&gt; *</span>
<a name="l00004"></a>00004 <span class="comment"> *                                                                         *</span>
<a name="l00005"></a>00005 <span class="comment"> * This program is free software: you can redistribute it and/or modify    *</span>
<a name="l00006"></a>00006 <span class="comment"> * it under the terms of the GNU General Public License as published by    *</span>
<a name="l00007"></a>00007 <span class="comment"> * the Free Software Foundation, either version 3 of the License, or       *</span>
<a name="l00008"></a>00008 <span class="comment"> * (at your option) any later version.                                     *</span>
<a name="l00009"></a>00009 <span class="comment"> *                                                                         *</span>
<a name="l00010"></a>00010 <span class="comment"> * This program is distributed in the hope that it will be useful,         *</span>
<a name="l00011"></a>00011 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of          *</span>
<a name="l00012"></a>00012 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *</span>
<a name="l00013"></a>00013 <span class="comment"> * GNU General Public License for more details.                            *</span>
<a name="l00014"></a>00014 <span class="comment"> *                                                                         *</span>
<a name="l00015"></a>00015 <span class="comment"> * You should have received a copy of the GNU General Public License       *</span>
<a name="l00016"></a>00016 <span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.   *</span>
<a name="l00017"></a>00017 <span class="comment"> ***************************************************************************/</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="includes_8h.xhtml" title="All non-system includes that need to be within each .cpp file.">h/includes.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="character_8h.xhtml" title="The Character class.">h/character.h</a>&quot;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="account_8h.xhtml" title="The Account class.">h/account.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="list_8h.xhtml" title="All globally referenced list / map / vector types.">h/list.h</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="server_8h.xhtml" title="The Server class.">h/server.h</a>&quot;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="comment">/* Core */</span>
<a name="l00038"></a><a class="code" href="classCharacter.xhtml#a4f7ff295f5de0fa4f8fece0acb7aaa53">00038</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="classCharacter.xhtml#a4f7ff295f5de0fa4f8fece0acb7aaa53" title="Unload a character from memory that was previously loaded via Character::New().">Character::Delete</a>()
<a name="l00039"></a>00039 {
<a name="l00040"></a>00040     <a class="code" href="classThing.xhtml#a24cbae1bbf7bed91bdd782c5893b3250" title="Returns the Server associated with this Thing.">gServer</a>()-&gt;<a class="code" href="classServer.xhtml#a82fee111e14e3fcd3ea0658f092bed6e" title="Sets the Server&#39;s globally referenced next iterator for Character objects.">sCharacterNext</a>( <a class="code" href="list_8cpp.xhtml#a6e5a305399253b1fdc5f2ee6b6aece2c" title="All characters that exist within the server.">character_list</a>.erase( find( <a class="code" href="list_8cpp.xhtml#a6e5a305399253b1fdc5f2ee6b6aece2c" title="All characters that exist within the server.">character_list</a>.begin(), <a class="code" href="list_8cpp.xhtml#a6e5a305399253b1fdc5f2ee6b6aece2c" title="All characters that exist within the server.">character_list</a>.end(), this ) ) );
<a name="l00041"></a>00041     <span class="keyword">delete</span> <span class="keyword">this</span>;
<a name="l00042"></a>00042 
<a name="l00043"></a>00043     <span class="keywordflow">return</span>;
<a name="l00044"></a>00044 }
<a name="l00045"></a>00045 
<a name="l00054"></a><a class="code" href="classCharacter.xhtml#af7147ddb783cc1ebf56c21a27dfbed4a">00054</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classCharacter.xhtml#af7147ddb783cc1ebf56c21a27dfbed4a" title="Create a new character.">Character::New</a>( <a class="code" href="classServer.xhtml" title="The core of the game server.">Server</a>* server, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file, <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; exists )
<a name="l00055"></a>00055 {
<a name="l00056"></a>00056     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00057"></a>00057 
<a name="l00058"></a>00058     <a class="code" href="classCharacter.xhtml#a32489f7db50dddbed3e8920e8c4d3418">m_file</a> = file;
<a name="l00059"></a>00059     <a class="code" href="classThing.xhtml#a4737f44c77897dbe813fc6308cdeaa04" title="Associates a Server to this Thing.">sServer</a>( server );
<a name="l00060"></a>00060 
<a name="l00061"></a>00061     <span class="keywordflow">if</span> ( exists )
<a name="l00062"></a>00062     {
<a name="l00063"></a>00063         <span class="keywordflow">if</span> ( !<a class="code" href="classCharacter.xhtml#a91193d9bb29423c2ec95fb56c27d6bb3" title="Unserialize the character data.">Unserialize</a>() )
<a name="l00064"></a>00064         {
<a name="l00065"></a>00065             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Character::New()-&gt;Character::Unserialize()-&gt; returned false for file %s&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( file ) );
<a name="l00066"></a>00066             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00067"></a>00067         }
<a name="l00068"></a>00068     }
<a name="l00069"></a>00069 
<a name="l00070"></a>00070     <a class="code" href="list_8cpp.xhtml#a6e5a305399253b1fdc5f2ee6b6aece2c" title="All characters that exist within the server.">character_list</a>.push_back( <span class="keyword">this</span> );
<a name="l00071"></a>00071 
<a name="l00072"></a>00072     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00073"></a>00073 }
<a name="l00074"></a>00074 
<a name="l00080"></a><a class="code" href="classCharacter.xhtml#acbf271cc1d8bf64bd5bd4c286f508f67">00080</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classCharacter.xhtml#acbf271cc1d8bf64bd5bd4c286f508f67" title="Serialize the character data.">Character::Serialize</a>()<span class="keyword"> const</span>
<a name="l00081"></a>00081 <span class="keyword"></span>{
<a name="l00082"></a>00082     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00083"></a>00083     ofstream ofs;
<a name="l00084"></a>00084     <span class="keywordtype">string</span> value;
<a name="l00085"></a>00085     stringstream line;
<a name="l00086"></a>00086     <span class="keywordtype">string</span> file( <a class="code" href="namespaceUtils.xhtml#a3e236b07fd628bcaf2e7c5854dd2a281" title="Returns a string consisting of file.ext.">Utils::FileExt</a>( <a class="code" href="classThing.xhtml#aea5dad4f4241b325cdf64b232e84e602" title="Returns the id associated with this Thing.">gId</a>(), <a class="code" href="config_8h.xhtml#a2339c99068cee7dd8024d0097583cdee" title="File extension to use for player character files.">CFG_DAT_FILE_PLR_EXT</a> ) );
<a name="l00087"></a>00087 
<a name="l00088"></a>00088     <a class="code" href="namespaceUtils.xhtml#a67fd451200ee8a3cc646aeba5cb9513b" title="Begins a write to a temporary file that is intended to replace a live file.">Utils::FileOpen</a>( ofs, file );
<a name="l00089"></a>00089 
<a name="l00090"></a>00090     <span class="keywordflow">if</span> ( !ofs.good() )
<a name="l00091"></a>00091     {
<a name="l00092"></a>00092         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Character::Serialize()-&gt; failed to open character file: %s&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( file ) );
<a name="l00093"></a>00093         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00094"></a>00094     }
<a name="l00095"></a>00095 
<a name="l00096"></a>00096     <span class="comment">// First to ensure id is loaded for logging later</span>
<a name="l00097"></a>00097     <a class="code" href="macros_8h.xhtml#ae82f16e6bd484cc5cb600fb899b8c24d" title="Write (name) and (value) to (stream) in key:value format.">KEY</a>( ofs, <span class="stringliteral">&quot;id&quot;</span>, <a class="code" href="classThing.xhtml#aea5dad4f4241b325cdf64b232e84e602" title="Returns the id associated with this Thing.">gId</a>() );
<a name="l00098"></a>00098     <a class="code" href="macros_8h.xhtml#ae82f16e6bd484cc5cb600fb899b8c24d" title="Write (name) and (value) to (stream) in key:value format.">KEY</a>( ofs, <span class="stringliteral">&quot;name&quot;</span>, <a class="code" href="classThing.xhtml#a3c3c40c996ff562baa335f2ded022578" title="Returns the name associated with this Thing.">gName</a>() );
<a name="l00099"></a>00099     <a class="code" href="macros_8h.xhtml#ae82f16e6bd484cc5cb600fb899b8c24d" title="Write (name) and (value) to (stream) in key:value format.">KEY</a>( ofs, <span class="stringliteral">&quot;sex&quot;</span>, <a class="code" href="classCharacter.xhtml#a752ec2cc1fb8e5535679a73c97b611a4">m_sex</a> );
<a name="l00100"></a>00100 
<a name="l00101"></a>00101     <a class="code" href="namespaceUtils.xhtml#a7008f8effca71806721305d1834bde1e" title="Completes a read from a file.">Utils::FileClose</a>( ofs, <a class="code" href="namespaceUtils.xhtml#ad21617b756ef242fbc66e63dec3e4e4d" title="Returns a string consisting of directory/file.ext.">Utils::DirPath</a>( <a class="code" href="config_8h.xhtml#a5820804ddbdd36a88754b698a1a28220" title="Directory for accounts to be loaded from.">CFG_DAT_DIR_ACCOUNT</a>, <a class="code" href="classCharacter.xhtml#a9dce3d7ce7ac17f02397d198e47707ef" title="Returns the Account associated with this Character, if any.">gAccount</a>()-&gt;<a class="code" href="classThing.xhtml#a3c3c40c996ff562baa335f2ded022578" title="Returns the name associated with this Thing.">gName</a>() ), <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( file ) );
<a name="l00102"></a>00102 
<a name="l00103"></a>00103     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00104"></a>00104 }
<a name="l00105"></a>00105 
<a name="l00111"></a><a class="code" href="classCharacter.xhtml#a91193d9bb29423c2ec95fb56c27d6bb3">00111</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classCharacter.xhtml#a91193d9bb29423c2ec95fb56c27d6bb3" title="Unserialize the character data.">Character::Unserialize</a>()
<a name="l00112"></a>00112 {
<a name="l00113"></a>00113     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00114"></a>00114     <a class="code" href="macros_8h.xhtml#a6e32552c1b3df78e64aa5205ddf6dae9" title="Define a bitset variable (name) with UTILS_TYPE_INFO already enabled.">UFLAGS_I</a>( finfo );
<a name="l00115"></a>00115     ifstream ifs;
<a name="l00116"></a>00116     <span class="keywordtype">string</span> key, value, line;
<a name="l00117"></a>00117     <span class="keywordtype">bool</span> found = <span class="keyword">false</span>, maxb = <span class="keyword">false</span>;
<a name="l00118"></a>00118 
<a name="l00119"></a>00119     <a class="code" href="namespaceUtils.xhtml#a67fd451200ee8a3cc646aeba5cb9513b" title="Begins a write to a temporary file that is intended to replace a live file.">Utils::FileOpen</a>( ifs, <a class="code" href="namespaceUtils.xhtml#ad21617b756ef242fbc66e63dec3e4e4d" title="Returns a string consisting of directory/file.ext.">Utils::DirPath</a>( <a class="code" href="namespaceUtils.xhtml#ad21617b756ef242fbc66e63dec3e4e4d" title="Returns a string consisting of directory/file.ext.">Utils::DirPath</a>( <a class="code" href="config_8h.xhtml#a5820804ddbdd36a88754b698a1a28220" title="Directory for accounts to be loaded from.">CFG_DAT_DIR_ACCOUNT</a>, <a class="code" href="classCharacter.xhtml#a9dce3d7ce7ac17f02397d198e47707ef" title="Returns the Account associated with this Character, if any.">gAccount</a>()-&gt;<a class="code" href="classThing.xhtml#a3c3c40c996ff562baa335f2ded022578" title="Returns the name associated with this Thing.">gName</a>() ), <a class="code" href="classCharacter.xhtml#a32489f7db50dddbed3e8920e8c4d3418">m_file</a> ) );
<a name="l00120"></a>00120 
<a name="l00121"></a>00121     <span class="keywordflow">if</span> ( !ifs.good() )
<a name="l00122"></a>00122     {
<a name="l00123"></a>00123         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Character::Unserialize()-&gt; failed to open character file: %s&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( <a class="code" href="classCharacter.xhtml#a32489f7db50dddbed3e8920e8c4d3418">m_file</a> ) );
<a name="l00124"></a>00124         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00125"></a>00125     }
<a name="l00126"></a>00126 
<a name="l00127"></a>00127     <span class="keywordflow">while</span> ( getline( ifs, line ) )
<a name="l00128"></a>00128     {
<a name="l00129"></a>00129         <span class="keywordflow">if</span> ( !<a class="code" href="namespaceUtils.xhtml#a4a4d3dfd2ddb691bc5bcff82252c058b" title="Splits a string in the format of key=value. Retains any whitespace in the value.">Utils::KeyValue</a>( key, value, line) )
<a name="l00130"></a>00130         {
<a name="l00131"></a>00131             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Character::Unserialize()-&gt; error reading line: %s&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( line ) );
<a name="l00132"></a>00132             <span class="keywordflow">continue</span>;
<a name="l00133"></a>00133         }
<a name="l00134"></a>00134 
<a name="l00135"></a>00135         <span class="keywordflow">for</span> ( ;; )
<a name="l00136"></a>00136         {
<a name="l00137"></a>00137             found = <span class="keyword">false</span>;
<a name="l00138"></a>00138             maxb = <span class="keyword">false</span>;
<a name="l00139"></a>00139 
<a name="l00140"></a>00140             <span class="comment">// First to ensure id is loaded for logging later</span>
<a name="l00141"></a>00141             <span class="keywordflow">if</span> ( key == <span class="stringliteral">&quot;id&quot;</span> )
<a name="l00142"></a>00142             {
<a name="l00143"></a>00143                 found = <span class="keyword">true</span>;
<a name="l00144"></a>00144                 <a class="code" href="classThing.xhtml#a946fbf68bcd90ea5b26f4cce0b37132b" title="Sets the id of this Thing.">sId</a>( value );
<a name="l00145"></a>00145             }
<a name="l00146"></a>00146             <span class="keywordflow">if</span> ( key == <span class="stringliteral">&quot;name&quot;</span> )
<a name="l00147"></a>00147             {
<a name="l00148"></a>00148                 found = <span class="keyword">true</span>;
<a name="l00149"></a>00149                 <a class="code" href="classThing.xhtml#a69568f79edcdf1b0225f1b764a7ceb41" title="Sets the name of this Thing.">sName</a>( value );
<a name="l00150"></a>00150             }
<a name="l00151"></a>00151             <a class="code" href="namespaceUtils.xhtml#aba8fca9daa0f767d7f5af5e2b1d6b81d" title="If the contents of keyd == valu, assigns loc = item.">Utils::KeySet</a>( <span class="keyword">true</span>, found, key, <span class="stringliteral">&quot;sex&quot;</span>, value, <a class="code" href="classCharacter.xhtml#a752ec2cc1fb8e5535679a73c97b611a4">m_sex</a>, <a class="code" href="enum_8h.xhtml#a5a21b8ad48605bcc6bd9d5091c46dc1fa06107e14022a0ca1f5b2c92ecfc748d2">MAX_CHR_SEX</a>, maxb );
<a name="l00152"></a>00152 
<a name="l00153"></a>00153             <span class="keywordflow">if</span> ( !found )
<a name="l00154"></a>00154                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Character::Unserialize()-&gt;Utils::KeySet()-&gt; key not found: %s&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( key ) );
<a name="l00155"></a>00155 
<a name="l00156"></a>00156             <span class="keywordflow">if</span> ( maxb )
<a name="l00157"></a>00157                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( finfo, <span class="stringliteral">&quot;Character::Unserialize()-&gt;Utils::KeySet()-&gt; character id %s, key %s has illegal value %s&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( <a class="code" href="classThing.xhtml#aea5dad4f4241b325cdf64b232e84e602" title="Returns the id associated with this Thing.">gId</a>() ), <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( key ), <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( value ) );
<a name="l00158"></a>00158 
<a name="l00159"></a>00159             <span class="keywordflow">break</span>;
<a name="l00160"></a>00160         }
<a name="l00161"></a>00161     }
<a name="l00162"></a>00162 
<a name="l00163"></a>00163     <a class="code" href="namespaceUtils.xhtml#a7008f8effca71806721305d1834bde1e" title="Completes a read from a file.">Utils::FileClose</a>( ifs );
<a name="l00164"></a>00164 
<a name="l00165"></a>00165     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00166"></a>00166 }
<a name="l00167"></a>00167 
<a name="l00168"></a>00168 <span class="comment">/* Query */</span>
<a name="l00173"></a><a class="code" href="classCharacter.xhtml#a9dce3d7ce7ac17f02397d198e47707ef">00173</a> <a class="code" href="classAccount.xhtml" title="Security structure to maintain characters, roles, and permissions.">Account</a>* <a class="code" href="classCharacter.xhtml#a9dce3d7ce7ac17f02397d198e47707ef" title="Returns the Account associated with this Character, if any.">Character::gAccount</a>()<span class="keyword"> const</span>
<a name="l00174"></a>00174 <span class="keyword"></span>{
<a name="l00175"></a>00175     <span class="keywordflow">return</span> <a class="code" href="classCharacter.xhtml#ae7a8013b7af11a6b6dd0ea09534caf7d">m_account</a>;
<a name="l00176"></a>00176 }
<a name="l00177"></a>00177 
<a name="l00184"></a><a class="code" href="classCharacter.xhtml#ad3d3db7ed1d44cf53fb7ae4b991a1c18">00184</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classCharacter.xhtml#ad3d3db7ed1d44cf53fb7ae4b991a1c18" title="Gets the creation states of this character from CHR_CREATION.">Character::gCreation</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; pos )
<a name="l00185"></a>00185 {
<a name="l00186"></a>00186     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00187"></a>00187 
<a name="l00188"></a>00188     <span class="keywordflow">if</span> ( pos &lt; uintmin_t || pos &gt;= <a class="code" href="enum_8h.xhtml#a9f0bc0c7c0d28ca194ebb36d4a6d1c2faf58cf9eab72ac90c69b2030b99d6c8c1">MAX_CHR_CREATION</a> )
<a name="l00189"></a>00189     {
<a name="l00190"></a>00190         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Character::sCreation()-&gt; called with invalid pos %lu&quot;</span>, pos );
<a name="l00191"></a>00191         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00192"></a>00192     }
<a name="l00193"></a>00193 
<a name="l00194"></a>00194     <span class="keywordflow">return</span> <a class="code" href="classCharacter.xhtml#a1c2a00e9ddb021cc0258cf1504c1b0d7">m_creation</a>[pos];
<a name="l00195"></a>00195 }
<a name="l00196"></a>00196 
<a name="l00201"></a><a class="code" href="classCharacter.xhtml#accb16b9ee94717e08c9ae8dee4e87262">00201</a> <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> <a class="code" href="classCharacter.xhtml#accb16b9ee94717e08c9ae8dee4e87262" title="Returns the amount of time the character has been idle.">Character::gIdle</a>()<span class="keyword"> const</span>
<a name="l00202"></a>00202 <span class="keyword"></span>{
<a name="l00203"></a>00203     <span class="keywordflow">return</span> <a class="code" href="classCharacter.xhtml#a402d965af5015487afa0fa8865bc4dce">m_idle</a>;
<a name="l00204"></a>00204 }
<a name="l00205"></a>00205 
<a name="l00210"></a><a class="code" href="classCharacter.xhtml#a611f85cc5c7c7c6977fdfca257530f3a">00210</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="classCharacter.xhtml#a611f85cc5c7c7c6977fdfca257530f3a" title="Generates a status-bar prompt based on tokens.">Character::gPrompt</a>()<span class="keyword"> const</span>
<a name="l00211"></a>00211 <span class="keyword"></span>{
<a name="l00212"></a>00212     stringstream output;
<a name="l00213"></a>00213 
<a name="l00214"></a>00214     output &lt;&lt; <a class="code" href="macros_8h.xhtml#a6cb23a858b0a21bdaa644b9181dc415f" title="Output a carriage return \ line feed.">CRLF</a> &lt;&lt; <a class="code" href="classThing.xhtml#aea5dad4f4241b325cdf64b232e84e602" title="Returns the id associated with this Thing.">gId</a>() &lt;&lt; <span class="stringliteral">&quot;&gt; &quot;</span>;
<a name="l00215"></a>00215 
<a name="l00216"></a>00216     <span class="keywordflow">return</span> output.str();
<a name="l00217"></a>00217 }
<a name="l00218"></a>00218 
<a name="l00223"></a><a class="code" href="classCharacter.xhtml#a3687af665ff3b9fe94176ecde8a7beca">00223</a> <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> <a class="code" href="classCharacter.xhtml#a3687af665ff3b9fe94176ecde8a7beca" title="Returns the sex of this character from CHR_SEX.">Character::gSex</a>()<span class="keyword"> const</span>
<a name="l00224"></a>00224 <span class="keyword"></span>{
<a name="l00225"></a>00225     <span class="keywordflow">return</span> <a class="code" href="classCharacter.xhtml#a752ec2cc1fb8e5535679a73c97b611a4">m_sex</a>;
<a name="l00226"></a>00226 }
<a name="l00227"></a>00227 
<a name="l00228"></a>00228 <span class="comment">/* Manipulate */</span>
<a name="l00235"></a><a class="code" href="classCharacter.xhtml#a622c35f2465a934848d493cd2a596584">00235</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classCharacter.xhtml#a622c35f2465a934848d493cd2a596584" title="Sets the account of this character.">Character::sAccount</a>( <a class="code" href="classAccount.xhtml" title="Security structure to maintain characters, roles, and permissions.">Account</a>* account )
<a name="l00236"></a>00236 {
<a name="l00237"></a>00237     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00238"></a>00238 
<a name="l00239"></a>00239     <span class="keywordflow">if</span> ( <a class="code" href="classCharacter.xhtml#ae7a8013b7af11a6b6dd0ea09534caf7d">m_account</a> != NULL &amp;&amp; account != NULL )
<a name="l00240"></a>00240     {
<a name="l00241"></a>00241         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Character::sAccount()-&gt; called while m_account is not NULL&quot;</span> );
<a name="l00242"></a>00242         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00243"></a>00243     }
<a name="l00244"></a>00244 
<a name="l00245"></a>00245     <a class="code" href="classCharacter.xhtml#ae7a8013b7af11a6b6dd0ea09534caf7d">m_account</a> = account;
<a name="l00246"></a>00246 
<a name="l00247"></a>00247     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00248"></a>00248 }
<a name="l00249"></a>00249 
<a name="l00257"></a><a class="code" href="classCharacter.xhtml#a324f4ec56476961fd22781a1d4e381ed">00257</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classCharacter.xhtml#a324f4ec56476961fd22781a1d4e381ed" title="Sets the creation states of this character from CHR_CREATION.">Character::sCreation</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; pos, <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; val )
<a name="l00258"></a>00258 {
<a name="l00259"></a>00259     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00260"></a>00260 
<a name="l00261"></a>00261     <span class="keywordflow">if</span> ( pos &lt; uintmin_t || pos &gt;= <a class="code" href="enum_8h.xhtml#a9f0bc0c7c0d28ca194ebb36d4a6d1c2faf58cf9eab72ac90c69b2030b99d6c8c1">MAX_CHR_CREATION</a> )
<a name="l00262"></a>00262     {
<a name="l00263"></a>00263         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Character::sCreation()-&gt; called with invalid pos %lu&quot;</span>, pos );
<a name="l00264"></a>00264         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00265"></a>00265     }
<a name="l00266"></a>00266 
<a name="l00267"></a>00267     <a class="code" href="classCharacter.xhtml#a1c2a00e9ddb021cc0258cf1504c1b0d7">m_creation</a>[pos] = val;
<a name="l00268"></a>00268 
<a name="l00269"></a>00269     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00270"></a>00270 }
<a name="l00271"></a>00271 
<a name="l00278"></a><a class="code" href="classCharacter.xhtml#ace886cb5be13ee40545811660aa9f9db">00278</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classCharacter.xhtml#ace886cb5be13ee40545811660aa9f9db" title="Set the idle timer value of the character.">Character::sIdle</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; idle )
<a name="l00279"></a>00279 {
<a name="l00280"></a>00280     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00281"></a>00281 
<a name="l00282"></a>00282     <span class="keywordflow">if</span> ( idle &lt; uintmin_t || idle &gt; <a class="code" href="config_8h.xhtml#a2e5cf1b99e6fb32492aeee4eeb9590d3" title="(Minutes / tick rate) before disconnecting an idle Character detached from an Account. Approx 5 minutes.">CFG_CHR_MAX_IDLE</a> )
<a name="l00283"></a>00283     {
<a name="l00284"></a>00284         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Character::sIdle()-&gt; called with invalid idle: %lu&quot;</span>, idle );
<a name="l00285"></a>00285         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00286"></a>00286     }
<a name="l00287"></a>00287 
<a name="l00288"></a>00288     <a class="code" href="classCharacter.xhtml#a402d965af5015487afa0fa8865bc4dce">m_idle</a> = idle;
<a name="l00289"></a>00289 
<a name="l00290"></a>00290     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00291"></a>00291 }
<a name="l00292"></a>00292 
<a name="l00299"></a><a class="code" href="classCharacter.xhtml#add25d4f2e5c883884b6852f695e96851">00299</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classCharacter.xhtml#add25d4f2e5c883884b6852f695e96851" title="Sets the sex of this character from CHR_SEX.">Character::sSex</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; sex )
<a name="l00300"></a>00300 {
<a name="l00301"></a>00301     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00302"></a>00302 
<a name="l00303"></a>00303     <span class="keywordflow">if</span> ( sex &lt; uintmin_t || sex &gt;= <a class="code" href="enum_8h.xhtml#a5a21b8ad48605bcc6bd9d5091c46dc1fa06107e14022a0ca1f5b2c92ecfc748d2">MAX_CHR_SEX</a> )
<a name="l00304"></a>00304     {
<a name="l00305"></a>00305         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Character::sSex()-&gt; called with invalid sex %lu&quot;</span>, sex );
<a name="l00306"></a>00306         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00307"></a>00307     }
<a name="l00308"></a>00308 
<a name="l00309"></a>00309     <a class="code" href="classCharacter.xhtml#a752ec2cc1fb8e5535679a73c97b611a4">m_sex</a> = sex;
<a name="l00310"></a>00310 
<a name="l00311"></a>00311     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00312"></a>00312 }
<a name="l00313"></a>00313 
<a name="l00314"></a>00314 <span class="comment">/* Internal */</span>
<a name="l00318"></a><a class="code" href="classCharacter.xhtml#adc27bdd255876169bad2ed0bae0cffb5">00318</a> <a class="code" href="classCharacter.xhtml#adc27bdd255876169bad2ed0bae0cffb5" title="Constructor for the Character class.">Character::Character</a>()
<a name="l00319"></a>00319 {
<a name="l00320"></a>00320     <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> i = <a class="code" href="limits_8h.xhtml#ace307ffbe4c934f4565176f184b38d78" title="The minimum value of any uint_t variable.">uintmin_t</a>;
<a name="l00321"></a>00321 
<a name="l00322"></a>00322     <a class="code" href="classCharacter.xhtml#ae7a8013b7af11a6b6dd0ea09534caf7d">m_account</a> = NULL;
<a name="l00323"></a>00323     <span class="keywordflow">for</span> ( i = 0; i &lt; <a class="code" href="enum_8h.xhtml#a9f0bc0c7c0d28ca194ebb36d4a6d1c2faf58cf9eab72ac90c69b2030b99d6c8c1">MAX_CHR_CREATION</a>; i++ )
<a name="l00324"></a>00324         <a class="code" href="classCharacter.xhtml#a1c2a00e9ddb021cc0258cf1504c1b0d7">m_creation</a>[i] = <span class="keyword">false</span>;
<a name="l00325"></a>00325     <a class="code" href="classCharacter.xhtml#a32489f7db50dddbed3e8920e8c4d3418">m_file</a>.clear();
<a name="l00326"></a>00326     <a class="code" href="classCharacter.xhtml#a402d965af5015487afa0fa8865bc4dce">m_idle</a> = 0;
<a name="l00327"></a>00327     <a class="code" href="classCharacter.xhtml#a752ec2cc1fb8e5535679a73c97b611a4">m_sex</a> = 0;
<a name="l00328"></a>00328 
<a name="l00329"></a>00329     <span class="keywordflow">return</span>;
<a name="l00330"></a>00330 }
<a name="l00331"></a>00331 
<a name="l00335"></a><a class="code" href="classCharacter.xhtml#a9e9be564d05ded80962b2045aa70b3fc">00335</a> <a class="code" href="classCharacter.xhtml#a9e9be564d05ded80962b2045aa70b3fc" title="Destructor for the Character class.">Character::~Character</a>()
<a name="l00336"></a>00336 {
<a name="l00337"></a>00337     <span class="keywordflow">return</span>;
<a name="l00338"></a>00338 }
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Sun Apr 28 2013 21:23:22 for NAMS - Not Another MUD Server by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
