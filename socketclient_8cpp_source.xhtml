<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>NAMS - Not Another MUD Server: socketclient.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">NAMS - Not Another MUD Server
   
   </div>
   <div id="projectbrief">NAMS is a C++ MUD server with the primary goals of a safe, modular design and a server core that is substantially decouppled from game logic.</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="dynsections.js"></script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">socketclient.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="socketclient_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/***************************************************************************</span>
<a name="l00002"></a>00002 <span class="comment"> * NAMS - Not Another MUD Server                                           *</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2012 Matthew Goff (matt@goff.cc) &lt;http://www.ackmud.net/&gt; *</span>
<a name="l00004"></a>00004 <span class="comment"> *                                                                         *</span>
<a name="l00005"></a>00005 <span class="comment"> * This program is free software: you can redistribute it and/or modify    *</span>
<a name="l00006"></a>00006 <span class="comment"> * it under the terms of the GNU General Public License as published by    *</span>
<a name="l00007"></a>00007 <span class="comment"> * the Free Software Foundation, either version 3 of the License, or       *</span>
<a name="l00008"></a>00008 <span class="comment"> * (at your option) any later version.                                     *</span>
<a name="l00009"></a>00009 <span class="comment"> *                                                                         *</span>
<a name="l00010"></a>00010 <span class="comment"> * This program is distributed in the hope that it will be useful,         *</span>
<a name="l00011"></a>00011 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of          *</span>
<a name="l00012"></a>00012 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *</span>
<a name="l00013"></a>00013 <span class="comment"> * GNU General Public License for more details.                            *</span>
<a name="l00014"></a>00014 <span class="comment"> *                                                                         *</span>
<a name="l00015"></a>00015 <span class="comment"> * You should have received a copy of the GNU General Public License       *</span>
<a name="l00016"></a>00016 <span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.   *</span>
<a name="l00017"></a>00017 <span class="comment"> ***************************************************************************/</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="includes_8h.xhtml" title="All non-system includes that need to be within each .cpp file.">h/includes.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="class_8h.xhtml" title="All class declarations.">h/class.h</a>&quot;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="socketclient_8h.xhtml" title="The SocketClient class.">h/socketclient.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.xhtml" title="The Command class.">h/command.h</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="list_8h.xhtml" title="All globally referenced list / map / vector types.">h/list.h</a>&quot;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="comment">/* Core */</span>
<a name="l00038"></a><a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad">00038</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad" title="Unload a client&#39;s socket from memory that was previously loaded via SocketClient::New().">SocketClient::Delete</a>()
<a name="l00039"></a>00039 {
<a name="l00040"></a>00040     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00041"></a>00041 
<a name="l00042"></a>00042     <span class="keywordflow">if</span> ( !<a class="code" href="classSocket.xhtml#a508457b48e6296d1e86c7cc72af65948" title="Return if the Socket is valid for use.">Valid</a>() )
<a name="l00043"></a>00043         <span class="keywordflow">return</span>;
<a name="l00044"></a>00044 
<a name="l00045"></a>00045     <span class="comment">// Force anything out of the buffer</span>
<a name="l00046"></a>00046     <a class="code" href="classSocketClient.xhtml#a6268f3d184970ec0076da657c39d2e80" title="Process data from the client&#39;s send buffer and transmit it via the socket.">Send</a>();
<a name="l00047"></a>00047 
<a name="l00048"></a>00048     <span class="keywordflow">if</span> ( !<a class="code" href="classSocketClient.xhtml#a5806a405d435d6410740d663e113c03e">m_server</a>-&gt;<a class="code" href="classServer.xhtml#a1e68e32745cdfe194e0af388d9d5244a" title="Set the amount of subordinate SocketClient and SocketServer objects that have been closed on a NAMS S...">sSocketClose</a>( <a class="code" href="classSocketClient.xhtml#a5806a405d435d6410740d663e113c03e">m_server</a>-&gt;<a class="code" href="classServer.xhtml#a01c4cacfdade91bc99d6c8911ca33a54" title="Returns the combined number of SocketClient and SocketServer objects that have been destroyed...">gSocketClose</a>() + 1 ) )
<a name="l00049"></a>00049         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::Disconnect()-&gt;Server::sSocketClose()-&gt; value %lu returned false&quot;</span>, <a class="code" href="classSocketClient.xhtml#a5806a405d435d6410740d663e113c03e">m_server</a>-&gt;<a class="code" href="classServer.xhtml#a01c4cacfdade91bc99d6c8911ca33a54" title="Returns the combined number of SocketClient and SocketServer objects that have been destroyed...">gSocketClose</a>() + 1 );
<a name="l00050"></a>00050 
<a name="l00051"></a>00051     <a class="code" href="classSocketClient.xhtml#abb055f2dc275dd975ac9465a8e5b19e5" title="Returns the Server object associated to this SocketClient.">gServer</a>()-&gt;<a class="code" href="classServer.xhtml#ab25462e8370bd6f9270c2f0734b70354" title="Sets the Server&#39;s globally referenced next iterator for SocketClient objects.">sSocketClientNext</a>( <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.erase( find( <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.begin(), <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.end(), this ) ) );
<a name="l00052"></a>00052     <span class="keyword">delete</span> <span class="keyword">this</span>;
<a name="l00053"></a>00053 
<a name="l00054"></a>00054     <span class="keywordflow">return</span>;
<a name="l00055"></a>00055 }
<a name="l00056"></a>00056 
<a name="l00063"></a><a class="code" href="classSocketClient.xhtml#a553658a2c076ea71ddcd1758fc64a925">00063</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketClient.xhtml#a553658a2c076ea71ddcd1758fc64a925" title="Build a SocketClient for a new client connection and set all attributes.">SocketClient::New</a>( <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; reboot )
<a name="l00064"></a>00064 {
<a name="l00065"></a>00065     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00066"></a>00066     <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a> error = 0;
<a name="l00067"></a>00067     sockaddr_storage sin;
<a name="l00068"></a>00068     socklen_t size = <span class="keyword">static_cast&lt;</span>socklen_t<span class="keyword">&gt;</span>( <span class="keyword">sizeof</span>( sin ) );
<a name="l00069"></a>00069     <span class="keywordtype">char</span> hostname[<a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a>], service[<a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a>];
<a name="l00070"></a>00070 
<a name="l00071"></a>00071     <span class="keywordflow">if</span> ( !reboot )
<a name="l00072"></a>00072     {
<a name="l00073"></a>00073         <span class="keywordflow">if</span> ( ::fcntl( <a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82" title="Returns the file descriptor associated to the Socket.">gDescriptor</a>(), F_SETFL, O_NONBLOCK ) &lt; 0 )
<a name="l00074"></a>00074         {
<a name="l00075"></a>00075             <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;SocketClient::New()-&gt;fcntl()-&gt;&quot;</span> );
<a name="l00076"></a>00076             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00077"></a>00077         }
<a name="l00078"></a>00078 
<a name="l00079"></a>00079         <span class="keywordflow">if</span> ( ::getpeername( <a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82" title="Returns the file descriptor associated to the Socket.">gDescriptor</a>(), reinterpret_cast&lt;sockaddr*&gt;( &amp;sin ), &amp;size ) &lt; 0 )
<a name="l00080"></a>00080         {
<a name="l00081"></a>00081             <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;SocketClient::New()-&gt;getpeername()-&gt;&quot;</span> );
<a name="l00082"></a>00082 
<a name="l00083"></a>00083             <span class="keywordflow">if</span> ( !<a class="code" href="classSocket.xhtml#a14e5e2493abcae97043297dd170e7a39" title="Sets the hostname of the socket.">sHostname</a>( <span class="stringliteral">&quot;(unknown)&quot;</span> ) )
<a name="l00084"></a>00084             {
<a name="l00085"></a>00085                 <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;SocketClient::New()-&gt;SocketClient::sHostname()-&gt; hostname (unknown) returned false&quot;</span> );
<a name="l00086"></a>00086                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00087"></a>00087             }
<a name="l00088"></a>00088         }
<a name="l00089"></a>00089         <span class="keywordflow">else</span>
<a name="l00090"></a>00090         {
<a name="l00091"></a>00091             <span class="keywordflow">if</span> ( ( error = ::getnameinfo( reinterpret_cast&lt;sockaddr*&gt;( &amp;sin ), size, hostname, <span class="keyword">sizeof</span>( hostname ), service, <span class="keyword">sizeof</span>( service ), NI_NUMERICSERV) ) != 0 )
<a name="l00092"></a>00092             {
<a name="l00093"></a>00093                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::New()-&gt;getnameinfo()-&gt; returned errno %d:%s&quot;</span>, error, gai_strerror( error ) );
<a name="l00094"></a>00094                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00095"></a>00095             }
<a name="l00096"></a>00096 
<a name="l00097"></a>00097             <span class="keywordflow">if</span> ( !<a class="code" href="classSocket.xhtml#a14e5e2493abcae97043297dd170e7a39" title="Sets the hostname of the socket.">sHostname</a>( hostname ) )
<a name="l00098"></a>00098             {
<a name="l00099"></a>00099                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::New()-&gt;SocketClient::sHostname()-&gt; hostname %s returned false&quot;</span>, hostname );
<a name="l00100"></a>00100                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00101"></a>00101             }
<a name="l00102"></a>00102 
<a name="l00103"></a>00103             <span class="keywordflow">if</span> ( !<a class="code" href="classSocket.xhtml#a24c8132ced233add89f4fda68284e578" title="Sets the port that was opened for the socket.">sPort</a>( atol( service ) ) )
<a name="l00104"></a>00104             {
<a name="l00105"></a>00105                 <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::New()-&gt;SocketClient::sPort()-&gt; port %lu returned false&quot;</span>, atol( service ) );
<a name="l00106"></a>00106                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00107"></a>00107             }
<a name="l00108"></a>00108 
<a name="l00109"></a>00109             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( 0, <span class="stringliteral">&quot;SocketClient::New()-&gt; %s:%lu (%lu)&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( <a class="code" href="classSocket.xhtml#adc72a37934a4f2d10f6ae8fc94bb4ca7" title="Returns the hostname associated to the Socket.">gHostname</a>() ), <a class="code" href="classSocket.xhtml#accd94dbf518b30cdd878a9710d3c481c" title="Returns the port associated to the Socket.">gPort</a>(), <a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82" title="Returns the file descriptor associated to the Socket.">gDescriptor</a>() );
<a name="l00110"></a>00110         }
<a name="l00111"></a>00111 
<a name="l00112"></a>00112         <span class="comment">// negotiate telopts, send login message</span>
<a name="l00113"></a>00113         <span class="keywordflow">if</span> ( !<a class="code" href="namespaceTelopt.xhtml#aae5468ac9f53474dea225a4485905ac3" title="Send initial options to negotiate for, then the login string.">Telopt::InitialNegotiation</a>( <span class="keyword">this</span> ) )
<a name="l00114"></a>00114         {
<a name="l00115"></a>00115             <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;SocketClient::New()-&gt;Telopt::InitialNegotiation()-&gt; returned false&quot;</span> );
<a name="l00116"></a>00116             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00117"></a>00117         }
<a name="l00118"></a>00118 
<a name="l00119"></a>00119         <span class="keywordflow">if</span> ( !<a class="code" href="classSocketClient.xhtml#ab5e6737c8acd4aaa21268e10c1a050b4" title="Set the connection state value of the socket.">sState</a>( <a class="code" href="enum_8h.xhtml#a183c84f479d3dfb8ea89c5fa6db3c5c7aa97346118bd6336de5373254e8cbd15f">SOC_STATE_LOGIN_SCREEN</a> ) )
<a name="l00120"></a>00120         {
<a name="l00121"></a>00121             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::New()-&gt;SocketClient::sState()-&gt; state %lu returned false&quot;</span>, <a class="code" href="enum_8h.xhtml#a183c84f479d3dfb8ea89c5fa6db3c5c7aa97346118bd6336de5373254e8cbd15f">SOC_STATE_LOGIN_SCREEN</a> );
<a name="l00122"></a>00122             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00123"></a>00123         }
<a name="l00124"></a>00124 
<a name="l00125"></a>00125         <a class="code" href="namespaceHandler.xhtml#a142c6f0b9e36e54eba3d72f9db2dfe40" title="Redirect to the appropriate subsystem based on socket state.">Handler::Interpret</a>( <span class="keyword">this</span> );
<a name="l00126"></a>00126     }
<a name="l00127"></a>00127 
<a name="l00128"></a>00128     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00129"></a>00129 }
<a name="l00130"></a>00130 
<a name="l00136"></a><a class="code" href="classSocketClient.xhtml#aa46590f5ac09115d9888fdb7c600ef1d">00136</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketClient.xhtml#aa46590f5ac09115d9888fdb7c600ef1d" title="Tests if there are any commands in the queue to be processed.">SocketClient::PendingCommand</a>()<span class="keyword"> const</span>
<a name="l00137"></a>00137 <span class="keyword"></span>{
<a name="l00138"></a>00138     <span class="keywordflow">return</span> !<a class="code" href="classSocketClient.xhtml#a3c51b2f60fefcc90bfa5ed710e0eb96f">m_command_queue</a>.empty();
<a name="l00139"></a>00139 }
<a name="l00140"></a>00140 
<a name="l00146"></a><a class="code" href="classSocketClient.xhtml#ad887231d8188cf23b88b6dad24b9408a">00146</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketClient.xhtml#ad887231d8188cf23b88b6dad24b9408a" title="Tests if there is any output to be processed.">SocketClient::PendingOutput</a>()<span class="keyword"> const</span>
<a name="l00147"></a>00147 <span class="keyword"></span>{
<a name="l00148"></a>00148     <span class="keywordflow">return</span> !<a class="code" href="classSocketClient.xhtml#a2a54cf3d5a21ee7bd695213f3f200576">m_output</a>.empty();
<a name="l00149"></a>00149 }
<a name="l00150"></a>00150 
<a name="l00156"></a><a class="code" href="classSocketClient.xhtml#ad4f63c7d906310dc56a1217136047d7f">00156</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketClient.xhtml#ad4f63c7d906310dc56a1217136047d7f" title="Interpret the command at the front of the queue.">SocketClient::ProcessCommand</a>()
<a name="l00157"></a>00157 {
<a name="l00158"></a>00158     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00159"></a>00159     pair&lt;string,string&gt; cmd;
<a name="l00160"></a>00160     <a class="code" href="classCommand.xhtml" title="Functions that are built and loaded independently as Plugin objects.">Command</a>* command = NULL;
<a name="l00161"></a>00161     <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> security = <a class="code" href="enum_8h.xhtml#a1ac3d345b9be3a5c05bc8d91f23ebd7aa62268793e26686df00b9673b04dd649b">ACT_SECURITY_NONE</a>;
<a name="l00162"></a>00162 
<a name="l00163"></a>00163     <span class="keywordflow">if</span> ( !<a class="code" href="classSocket.xhtml#a508457b48e6296d1e86c7cc72af65948" title="Return if the Socket is valid for use.">Valid</a>() )
<a name="l00164"></a>00164     {
<a name="l00165"></a>00165         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::ProcessCommand()-&gt;SocketClient::Valid()-&gt; descriptor %ld returned false&quot;</span>, <a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82" title="Returns the file descriptor associated to the Socket.">gDescriptor</a>() );
<a name="l00166"></a>00166         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00167"></a>00167     }
<a name="l00168"></a>00168 
<a name="l00169"></a>00169     <span class="comment">// Nothing new to process; move along</span>
<a name="l00170"></a>00170     <span class="keywordflow">if</span> ( <a class="code" href="classSocketClient.xhtml#a3c51b2f60fefcc90bfa5ed710e0eb96f">m_command_queue</a>.empty() )
<a name="l00171"></a>00171         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00172"></a>00172 
<a name="l00173"></a>00173     <span class="keywordflow">if</span> ( <a class="code" href="classSocketClient.xhtml#aebf1dbfb77a447461d70452f23bfc1f4">m_account</a> )
<a name="l00174"></a>00174         security = <a class="code" href="classSocketClient.xhtml#aebf1dbfb77a447461d70452f23bfc1f4">m_account</a>-&gt;<a class="code" href="classAccount.xhtml#a9a9ee5a78d3353c688c6418c2a88ba54" title="Returns the authorized security level of the account.">gSecurity</a>();
<a name="l00175"></a>00175 
<a name="l00176"></a>00176     <span class="keywordflow">while</span> ( !<a class="code" href="classSocketClient.xhtml#a3c51b2f60fefcc90bfa5ed710e0eb96f">m_command_queue</a>.empty() )
<a name="l00177"></a>00177     {
<a name="l00178"></a>00178         cmd = <a class="code" href="classSocketClient.xhtml#a3c51b2f60fefcc90bfa5ed710e0eb96f">m_command_queue</a>.front();
<a name="l00179"></a>00179         <a class="code" href="classSocketClient.xhtml#a3c51b2f60fefcc90bfa5ed710e0eb96f">m_command_queue</a>.pop_front();
<a name="l00180"></a>00180 
<a name="l00181"></a>00181         <span class="comment">// Redirect if not fully logged in yet</span>
<a name="l00182"></a>00182         <span class="keywordflow">if</span> ( ( command = <a class="code" href="classSocketClient.xhtml#abb055f2dc275dd975ac9465a8e5b19e5" title="Returns the Server object associated to this SocketClient.">gServer</a>()-&gt;FindCommand( cmd.first ) ) != NULL )
<a name="l00183"></a>00183         {
<a name="l00184"></a>00184             <span class="keywordflow">if</span> ( command-&gt;<a class="code" href="classCommand.xhtml#a1ccef73405910cf3e44943a3244b645b" title="Check if sec is &gt;= m_security for permission to call Command::Run().">Authorized</a>( security ) )
<a name="l00185"></a>00185                 command-&gt;<a class="code" href="classCommand.xhtml#a6448d432978113719bfdfa3783da5106" title="Execute a Plugin object&#39;s primary function.">Run</a>( <span class="keyword">this</span>, cmd.first, cmd.second );
<a name="l00186"></a>00186             <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( <a class="code" href="classSocketClient.xhtml#aa02d9372cc719fd598b842ff2aa4866c">m_state</a> &lt; <a class="code" href="enum_8h.xhtml#a183c84f479d3dfb8ea89c5fa6db3c5c7a9461d3679b682710a261f18d7876a395">SOC_STATE_PLAYING</a> )
<a name="l00187"></a>00187                 <a class="code" href="namespaceHandler.xhtml#a142c6f0b9e36e54eba3d72f9db2dfe40" title="Redirect to the appropriate subsystem based on socket state.">Handler::Interpret</a>( <span class="keyword">this</span>, cmd.first, cmd.second );
<a name="l00188"></a>00188             <span class="keywordflow">else</span>
<a name="l00189"></a>00189                 <a class="code" href="classSocketClient.xhtml#a6268f3d184970ec0076da657c39d2e80" title="Process data from the client&#39;s send buffer and transmit it via the socket.">Send</a>( <a class="code" href="config_8h.xhtml#ac99cc23a3caa3959e24a3475ab43adbc" title="String sent when an invalid command is received.">CFG_STR_CMD_INVALID</a> );
<a name="l00190"></a>00190         }
<a name="l00191"></a>00191         <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( <a class="code" href="classSocketClient.xhtml#aa02d9372cc719fd598b842ff2aa4866c">m_state</a> &lt; <a class="code" href="enum_8h.xhtml#a183c84f479d3dfb8ea89c5fa6db3c5c7a9461d3679b682710a261f18d7876a395">SOC_STATE_PLAYING</a> )
<a name="l00192"></a>00192             <a class="code" href="namespaceHandler.xhtml#a142c6f0b9e36e54eba3d72f9db2dfe40" title="Redirect to the appropriate subsystem based on socket state.">Handler::Interpret</a>( <span class="keyword">this</span>, cmd.first, cmd.second );
<a name="l00193"></a>00193         <span class="keywordflow">else</span>
<a name="l00194"></a>00194             <a class="code" href="classSocketClient.xhtml#a6268f3d184970ec0076da657c39d2e80" title="Process data from the client&#39;s send buffer and transmit it via the socket.">Send</a>( <a class="code" href="config_8h.xhtml#ac99cc23a3caa3959e24a3475ab43adbc" title="String sent when an invalid command is received.">CFG_STR_CMD_INVALID</a> );
<a name="l00195"></a>00195     }
<a name="l00196"></a>00196 
<a name="l00197"></a>00197     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00198"></a>00198 }
<a name="l00199"></a>00199 
<a name="l00205"></a><a class="code" href="classSocketClient.xhtml#a92fea2bf7e0f20578404ce1abb835a0b">00205</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketClient.xhtml#a92fea2bf7e0f20578404ce1abb835a0b" title="Process data from the client&#39;s receive buffer and split it into commands to queue as necessary...">SocketClient::ProcessInput</a>()
<a name="l00206"></a>00206 {
<a name="l00207"></a>00207     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00208"></a>00208     vector&lt;string&gt; commands;
<a name="l00209"></a>00209     <span class="keywordtype">string</span> command;
<a name="l00210"></a>00210     <a class="code" href="macros_8h.xhtml#a05e235f398566bf49e21735cf00fc656" title="Define an iterator variable (name) of (type) using (container).">ITER</a>( vector, <span class="keywordtype">string</span>, vi );
<a name="l00211"></a>00211 
<a name="l00212"></a>00212     <span class="keywordflow">if</span> ( !<a class="code" href="classSocket.xhtml#a508457b48e6296d1e86c7cc72af65948" title="Return if the Socket is valid for use.">Valid</a>() )
<a name="l00213"></a>00213     {
<a name="l00214"></a>00214         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::ProcessInput()-&gt;SocketClient::Valid()-&gt; descriptor %ld returned false&quot;</span>, <a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82" title="Returns the file descriptor associated to the Socket.">gDescriptor</a>() );
<a name="l00215"></a>00215         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00216"></a>00216     }
<a name="l00217"></a>00217 
<a name="l00218"></a>00218     <span class="comment">// Nothing new to process; move along</span>
<a name="l00219"></a>00219     <span class="keywordflow">if</span> ( <a class="code" href="classSocketClient.xhtml#afb9f8fd3659c27bd154c1d1e0f39f09a">m_input</a>.empty() )
<a name="l00220"></a>00220         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00221"></a>00221 
<a name="l00222"></a>00222     commands = <a class="code" href="namespaceUtils.xhtml#a8c70e85acdb1549aa4cd3a16b8d8d9cf" title="Returns a vector of strings split at linebreaks based on input.">Utils::StrNewlines</a>( <a class="code" href="classSocketClient.xhtml#afb9f8fd3659c27bd154c1d1e0f39f09a">m_input</a> );
<a name="l00223"></a>00223     <span class="keywordflow">for</span> ( vi = commands.begin(); vi != commands.end(); vi++ )
<a name="l00224"></a>00224     {
<a name="l00225"></a>00225         command = *vi;
<a name="l00226"></a>00226         <span class="keywordflow">if</span> ( !<a class="code" href="classSocketClient.xhtml#aa3c0d7886b8fede981c73031cfaf17c6" title="Append a command to the back of the queue.">QueueCommand</a>( command ) )
<a name="l00227"></a>00227         {
<a name="l00228"></a>00228             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::ProcessInput()-&gt;SocketClient::QueueCommand()-&gt; command %s returned false&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( command ) );
<a name="l00229"></a>00229             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00230"></a>00230         }
<a name="l00231"></a>00231     }
<a name="l00232"></a>00232 
<a name="l00233"></a>00233     <a class="code" href="classSocketClient.xhtml#afb9f8fd3659c27bd154c1d1e0f39f09a">m_input</a>.clear();
<a name="l00234"></a>00234 
<a name="l00235"></a>00235     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00236"></a>00236 }
<a name="l00237"></a>00237 
<a name="l00243"></a><a class="code" href="classSocketClient.xhtml#aa3c0d7886b8fede981c73031cfaf17c6">00243</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketClient.xhtml#aa3c0d7886b8fede981c73031cfaf17c6" title="Append a command to the back of the queue.">SocketClient::QueueCommand</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; command )
<a name="l00244"></a>00244 {
<a name="l00245"></a>00245     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00246"></a>00246     <span class="keywordtype">string</span> args, cmd;
<a name="l00247"></a>00247     <a class="code" href="classCommand.xhtml" title="Functions that are built and loaded independently as Plugin objects.">Command</a>* search = NULL;
<a name="l00248"></a>00248 
<a name="l00249"></a>00249     <span class="keywordflow">if</span> ( !<a class="code" href="classSocket.xhtml#a508457b48e6296d1e86c7cc72af65948" title="Return if the Socket is valid for use.">Valid</a>() )
<a name="l00250"></a>00250     {
<a name="l00251"></a>00251         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::QueueCommand()-&gt;SocketClient::Valid()-&gt; descriptor %ld returned false&quot;</span>, <a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82" title="Returns the file descriptor associated to the Socket.">gDescriptor</a>() );
<a name="l00252"></a>00252         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00253"></a>00253     }
<a name="l00254"></a>00254 
<a name="l00255"></a>00255     args = command;
<a name="l00256"></a>00256     cmd = <a class="code" href="namespaceUtils.xhtml#af8586b5c4d77ae0617279186b2bfdb66" title="Returns the first delimeter separated argument from input and then erases it from input...">Utils::Argument</a>( args );
<a name="l00257"></a>00257 
<a name="l00258"></a>00258     <span class="comment">// Check to see if the command can preempt and go to the front of the queue</span>
<a name="l00259"></a>00259     <span class="keywordflow">if</span> ( ( search = <a class="code" href="classSocketClient.xhtml#abb055f2dc275dd975ac9465a8e5b19e5" title="Returns the Server object associated to this SocketClient.">gServer</a>()-&gt;FindCommand( cmd ) ) != NULL )
<a name="l00260"></a>00260     {
<a name="l00261"></a>00261         <span class="keywordflow">if</span> ( search-&gt;<a class="code" href="classCommand.xhtml#a24702b444e22d28a7566b539a0d15b90" title="Return the preempt status of the associated Plugin object.">gPreempt</a>() )
<a name="l00262"></a>00262             <a class="code" href="classSocketClient.xhtml#a3c51b2f60fefcc90bfa5ed710e0eb96f">m_command_queue</a>.push_front( pair&lt;string,string&gt;( cmd, args ) );
<a name="l00263"></a>00263         <span class="keywordflow">else</span>
<a name="l00264"></a>00264             <a class="code" href="classSocketClient.xhtml#a3c51b2f60fefcc90bfa5ed710e0eb96f">m_command_queue</a>.push_back( pair&lt;string,string&gt;( cmd, args ) );
<a name="l00265"></a>00265     }
<a name="l00266"></a>00266     <span class="keywordflow">else</span>
<a name="l00267"></a>00267         <a class="code" href="classSocketClient.xhtml#a3c51b2f60fefcc90bfa5ed710e0eb96f">m_command_queue</a>.push_back( pair&lt;string,string&gt;( cmd, args ) );
<a name="l00268"></a>00268 
<a name="l00269"></a>00269     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00270"></a>00270 }
<a name="l00271"></a>00271 
<a name="l00276"></a><a class="code" href="classSocketClient.xhtml#ad8ab017dd47d5e8b20ad30f72773a759">00276</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="classSocketClient.xhtml#ad8ab017dd47d5e8b20ad30f72773a759" title="Flags a client as quitting to break out of nested loops.">SocketClient::Quit</a>()
<a name="l00277"></a>00277 {
<a name="l00278"></a>00278     <a class="code" href="classSocketClient.xhtml#a6268f3d184970ec0076da657c39d2e80" title="Process data from the client&#39;s send buffer and transmit it via the socket.">Send</a>( <a class="code" href="config_8h.xhtml#a86385c70f9df717bcbe95fa445ba34c4" title="String sent to the client when they quit.">CFG_STR_QUIT</a> );
<a name="l00279"></a>00279     <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( 0, <span class="stringliteral">&quot;SocketClient::Quit()-&gt; %s:%lu (%lu)&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( <a class="code" href="classSocket.xhtml#adc72a37934a4f2d10f6ae8fc94bb4ca7" title="Returns the hostname associated to the Socket.">gHostname</a>() ), <a class="code" href="classSocket.xhtml#accd94dbf518b30cdd878a9710d3c481c" title="Returns the port associated to the Socket.">gPort</a>(), <a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82" title="Returns the file descriptor associated to the Socket.">gDescriptor</a>() );
<a name="l00280"></a>00280 
<a name="l00281"></a>00281     <a class="code" href="classSocketClient.xhtml#a84ede1902642e34c0389adaa0e718f96">m_quitting</a> = <span class="keyword">true</span>;
<a name="l00282"></a>00282 
<a name="l00283"></a>00283     <span class="keywordflow">return</span>;
<a name="l00284"></a>00284 }
<a name="l00285"></a>00285 
<a name="l00290"></a><a class="code" href="classSocketClient.xhtml#a92a268dc450fb7f42df61de1105a0416">00290</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketClient.xhtml#a92a268dc450fb7f42df61de1105a0416" title="Checks if a client is marked as quitting.">SocketClient::Quitting</a>()<span class="keyword"> const</span>
<a name="l00291"></a>00291 <span class="keyword"></span>{
<a name="l00292"></a>00292     <span class="keywordflow">return</span> <a class="code" href="classSocketClient.xhtml#a84ede1902642e34c0389adaa0e718f96">m_quitting</a>;
<a name="l00293"></a>00293 }
<a name="l00294"></a>00294 
<a name="l00300"></a><a class="code" href="classSocketClient.xhtml#a9ee09f452d900e288b2aa187561ef05d">00300</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketClient.xhtml#a9ee09f452d900e288b2aa187561ef05d" title="Receive data from the client and append it to a receive buffer.">SocketClient::Recv</a>()
<a name="l00301"></a>00301 {
<a name="l00302"></a>00302     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00303"></a>00303     ssize_t amount = 0;
<a name="l00304"></a>00304     <span class="keywordtype">char</span> buf[<a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a>] = {<span class="charliteral">&#39;\0&#39;</span>};
<a name="l00305"></a>00305 
<a name="l00306"></a>00306     <span class="keywordflow">if</span> ( !<a class="code" href="classSocket.xhtml#a508457b48e6296d1e86c7cc72af65948" title="Return if the Socket is valid for use.">Valid</a>() )
<a name="l00307"></a>00307     {
<a name="l00308"></a>00308         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::Recv()-&gt;SocketClient::Valid()-&gt; descriptor %ld returned false&quot;</span>, <a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82" title="Returns the file descriptor associated to the Socket.">gDescriptor</a>() );
<a name="l00309"></a>00309         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00310"></a>00310     }
<a name="l00311"></a>00311 
<a name="l00312"></a>00312     <span class="keywordflow">if</span> ( ( <a class="code" href="classSocketClient.xhtml#afb9f8fd3659c27bd154c1d1e0f39f09a">m_input</a>.length() + <a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a> ) &gt;= <a class="code" href="classSocketClient.xhtml#afb9f8fd3659c27bd154c1d1e0f39f09a">m_input</a>.max_size() )
<a name="l00313"></a>00313     {
<a name="l00314"></a>00314         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::Recv()-&gt; called with m_input overflow: %lu + %lu&quot;</span>, <a class="code" href="classSocketClient.xhtml#afb9f8fd3659c27bd154c1d1e0f39f09a">m_input</a>.length(), <a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a> );
<a name="l00315"></a>00315         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00316"></a>00316     }
<a name="l00317"></a>00317 
<a name="l00318"></a>00318     <span class="keywordflow">if</span> ( ( amount = ::recv( <a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82" title="Returns the file descriptor associated to the Socket.">gDescriptor</a>(), buf, <a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a> - 1, 0 ) ) &lt; 1 )
<a name="l00319"></a>00319     {
<a name="l00320"></a>00320         <span class="keywordflow">if</span> ( amount == 0 )
<a name="l00321"></a>00321         {
<a name="l00322"></a>00322             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::Recv()-&gt;recv()-&gt; broken pipe encountered on recv from: %s&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( <a class="code" href="classSocket.xhtml#adc72a37934a4f2d10f6ae8fc94bb4ca7" title="Returns the hostname associated to the Socket.">gHostname</a>() ) );
<a name="l00323"></a>00323             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00324"></a>00324         }
<a name="l00325"></a>00325         <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( errno != EAGAIN &amp;&amp; errno != EWOULDBLOCK )
<a name="l00326"></a>00326         {
<a name="l00327"></a>00327             <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;SocketClient::Recv()-&gt;recv()-&gt;&quot;</span> );
<a name="l00328"></a>00328             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00329"></a>00329         }
<a name="l00330"></a>00330     }
<a name="l00331"></a>00331 
<a name="l00332"></a>00332     <span class="keywordflow">if</span> ( !<a class="code" href="classSocketClient.xhtml#a5806a405d435d6410740d663e113c03e">m_server</a>-&gt;<a class="code" href="classServer.xhtml#a686505fb3a2ee84bdac3f42710341b71" title="Returns the SocketServer associated with the current Server instance.">gSocket</a>()-&gt;<a class="code" href="classSocket.xhtml#aec278bc5096a3087a7bb6a1ed06d7ddd" title="Increment the total count of bytes received by the socket.">aBytesRecvd</a>( amount ) )
<a name="l00333"></a>00333     {
<a name="l00334"></a>00334         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::Recv()-&gt;Server::gSocket()-&gt;Server::aBytesRecvd()-&gt; value %lu returned false&quot;</span>, <a class="code" href="classSocketClient.xhtml#a5806a405d435d6410740d663e113c03e">m_server</a>-&gt;<a class="code" href="classServer.xhtml#a686505fb3a2ee84bdac3f42710341b71" title="Returns the SocketServer associated with the current Server instance.">gSocket</a>()-&gt;<a class="code" href="classSocket.xhtml#ad7ac03a288e6ef47a45e6837f7fef002" title="Returns the number of bytes received by the Socket.">gBytesRecvd</a>() + amount );
<a name="l00335"></a>00335         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00336"></a>00336     }
<a name="l00337"></a>00337 
<a name="l00338"></a>00338     <span class="keywordflow">if</span> ( !<a class="code" href="classSocket.xhtml#aec278bc5096a3087a7bb6a1ed06d7ddd" title="Increment the total count of bytes received by the socket.">aBytesRecvd</a>( amount ) )
<a name="l00339"></a>00339     {
<a name="l00340"></a>00340         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::Recv()-&gt;SocketClient::aBytesRecvd()-&gt; value %lu returned false&quot;</span>, <a class="code" href="classSocket.xhtml#ad7ac03a288e6ef47a45e6837f7fef002" title="Returns the number of bytes received by the Socket.">gBytesRecvd</a>() + amount );
<a name="l00341"></a>00341         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00342"></a>00342     }
<a name="l00343"></a>00343 
<a name="l00344"></a>00344     <span class="keywordflow">if</span> ( !<a class="code" href="classSocketClient.xhtml#a686aea73a8e9c9dbaac6438ec1b24293" title="Set the idle timer value of the socket.">sIdle</a>( 0 ) )
<a name="l00345"></a>00345     {
<a name="l00346"></a>00346         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;SocketClient::Recv()-&gt;SocketClient::sIdle()-&gt; value 0 returned false&quot;</span> );
<a name="l00347"></a>00347         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00348"></a>00348     }
<a name="l00349"></a>00349 
<a name="l00350"></a>00350     <a class="code" href="classSocketClient.xhtml#afb9f8fd3659c27bd154c1d1e0f39f09a">m_input</a>.append( <a class="code" href="namespaceTelopt.xhtml#abdb8913fd8eb65e47c6035240d9a291f" title="Processes data received from a SocketClient for telnet sequences.">Telopt::ProcessInput</a>( <span class="keyword">this</span>, buf ) );
<a name="l00351"></a>00351 
<a name="l00352"></a>00352     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00353"></a>00353 }
<a name="l00354"></a>00354 
<a name="l00359"></a><a class="code" href="classSocketClient.xhtml#afd723bd898217b3c41e29a02f43ec9e1">00359</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="classSocketClient.xhtml#afd723bd898217b3c41e29a02f43ec9e1" title="A wrapper to SocketClient::tResolveHostname(). Necessary for threading a member function.">SocketClient::ResolveHostname</a>()
<a name="l00360"></a>00360 {
<a name="l00361"></a>00361     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00362"></a>00362     pthread_t res_thread;
<a name="l00363"></a>00363     pthread_attr_t res_attr;
<a name="l00364"></a>00364 
<a name="l00365"></a>00365     <span class="keywordflow">if</span> ( !<a class="code" href="classSocket.xhtml#a508457b48e6296d1e86c7cc72af65948" title="Return if the Socket is valid for use.">Valid</a>() )
<a name="l00366"></a>00366     {
<a name="l00367"></a>00367         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::ResolveHostname()-&gt;SocketClient::Valid()-&gt; descriptor %ld returned false&quot;</span>, <a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82" title="Returns the file descriptor associated to the Socket.">gDescriptor</a>() );
<a name="l00368"></a>00368         <span class="keywordflow">return</span>;
<a name="l00369"></a>00369     }
<a name="l00370"></a>00370 
<a name="l00371"></a>00371     <span class="keywordflow">if</span> ( ::pthread_attr_init( &amp;res_attr ) != 0 )
<a name="l00372"></a>00372     {
<a name="l00373"></a>00373         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;SocketClient::ResolveHostname()-&gt;pthread_attr_init()-&gt;&quot;</span> );
<a name="l00374"></a>00374         <span class="keywordflow">return</span>;
<a name="l00375"></a>00375     }
<a name="l00376"></a>00376 
<a name="l00377"></a>00377     <span class="keywordflow">if</span> ( ::pthread_attr_setdetachstate( &amp;res_attr, PTHREAD_CREATE_DETACHED ) != 0 )
<a name="l00378"></a>00378     {
<a name="l00379"></a>00379         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;SocketClient::ResolveHostname()-&gt;pthread_attr_setdetachstate()-&gt;&quot;</span> );
<a name="l00380"></a>00380         <span class="keywordflow">return</span>;
<a name="l00381"></a>00381     }
<a name="l00382"></a>00382 
<a name="l00383"></a>00383     <span class="keywordflow">if</span> ( ::pthread_create( &amp;res_thread, &amp;res_attr, &amp;<a class="code" href="classSocketClient.xhtml#a3cfd5a085d8df5b4fed5166afe7578b2" title="Resolve the hostname of the client. Threaded to avoid locking on long resolutions.">SocketClient::tResolveHostname</a>, <span class="keyword">this</span> ) != 0 )
<a name="l00384"></a>00384     {
<a name="l00385"></a>00385         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;SocketClient::ResolveHostname()-&gt;pthread_create()-&gt;&quot;</span> );
<a name="l00386"></a>00386         <span class="keywordflow">return</span>;
<a name="l00387"></a>00387     }
<a name="l00388"></a>00388 
<a name="l00389"></a>00389     <span class="keywordflow">if</span> ( ::pthread_attr_destroy( &amp;res_attr ) != 0 )
<a name="l00390"></a>00390     {
<a name="l00391"></a>00391         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;SocketClient::ResolveHostname()-&gt;pthread_attr_destroy()-&gt;&quot;</span> );
<a name="l00392"></a>00392         <span class="keywordflow">return</span>;
<a name="l00393"></a>00393     }
<a name="l00394"></a>00394 
<a name="l00395"></a>00395     <span class="keywordflow">return</span>;
<a name="l00396"></a>00396 }
<a name="l00397"></a>00397 
<a name="l00403"></a><a class="code" href="classSocketClient.xhtml#a6268f3d184970ec0076da657c39d2e80">00403</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketClient.xhtml#a6268f3d184970ec0076da657c39d2e80" title="Process data from the client&#39;s send buffer and transmit it via the socket.">SocketClient::Send</a>()
<a name="l00404"></a>00404 {
<a name="l00405"></a>00405     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00406"></a>00406     ssize_t amount = 0;
<a name="l00407"></a>00407 
<a name="l00408"></a>00408     <span class="keywordflow">if</span> ( !<a class="code" href="classSocket.xhtml#a508457b48e6296d1e86c7cc72af65948" title="Return if the Socket is valid for use.">Valid</a>() )
<a name="l00409"></a>00409     {
<a name="l00410"></a>00410         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::Send()-&gt;SocketClient::Valid()-&gt; descriptor %ld returned false&quot;</span>, <a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82" title="Returns the file descriptor associated to the Socket.">gDescriptor</a>() );
<a name="l00411"></a>00411         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00412"></a>00412     }
<a name="l00413"></a>00413 
<a name="l00414"></a>00414     <span class="comment">// Nothing new to process; move along</span>
<a name="l00415"></a>00415     <span class="keywordflow">if</span> ( <a class="code" href="classSocketClient.xhtml#a2a54cf3d5a21ee7bd695213f3f200576">m_output</a>.empty() )
<a name="l00416"></a>00416         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00417"></a>00417 
<a name="l00418"></a>00418     <span class="keywordflow">if</span> ( ( amount = ::send( <a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82" title="Returns the file descriptor associated to the Socket.">gDescriptor</a>(), <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( <a class="code" href="classSocketClient.xhtml#a2a54cf3d5a21ee7bd695213f3f200576">m_output</a> ), <a class="code" href="classSocketClient.xhtml#a2a54cf3d5a21ee7bd695213f3f200576">m_output</a>.length(), 0 ) ) &lt; 1 )
<a name="l00419"></a>00419     {
<a name="l00420"></a>00420         <span class="keywordflow">if</span> ( amount == 0 )
<a name="l00421"></a>00421         {
<a name="l00422"></a>00422             <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::Send()-&gt;send()-&gt; broken pipe encountered on send to: %s&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( <a class="code" href="classSocket.xhtml#adc72a37934a4f2d10f6ae8fc94bb4ca7" title="Returns the hostname associated to the Socket.">gHostname</a>() ) );
<a name="l00423"></a>00423             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00424"></a>00424         }
<a name="l00425"></a>00425         <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( errno != EAGAIN &amp;&amp; errno != EWOULDBLOCK )
<a name="l00426"></a>00426         {
<a name="l00427"></a>00427             <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;SocketClient::Send()-&gt;send()-&gt;&quot;</span> );
<a name="l00428"></a>00428             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00429"></a>00429         }
<a name="l00430"></a>00430     }
<a name="l00431"></a>00431 
<a name="l00432"></a>00432     <span class="keywordflow">if</span> ( !<a class="code" href="classSocketClient.xhtml#a5806a405d435d6410740d663e113c03e">m_server</a>-&gt;<a class="code" href="classServer.xhtml#a686505fb3a2ee84bdac3f42710341b71" title="Returns the SocketServer associated with the current Server instance.">gSocket</a>()-&gt;<a class="code" href="classSocket.xhtml#a688f0d2182f7ca098de3f76156efad0a" title="Increment the total count of bytes sent by the socket.">aBytesSent</a>( amount ) )
<a name="l00433"></a>00433     {
<a name="l00434"></a>00434         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::Send()-&gt;Server::gSocket()-&gt;Server::aBytesSent()-&gt; value %lu returned false&quot;</span>, <a class="code" href="classSocketClient.xhtml#a5806a405d435d6410740d663e113c03e">m_server</a>-&gt;<a class="code" href="classServer.xhtml#a686505fb3a2ee84bdac3f42710341b71" title="Returns the SocketServer associated with the current Server instance.">gSocket</a>()-&gt;<a class="code" href="classSocket.xhtml#a3bb9f40d6e5f32cfa960a86323322c0c" title="Returns the number of bytes sent by the Socket.">gBytesSent</a>() + amount );
<a name="l00435"></a>00435         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00436"></a>00436     }
<a name="l00437"></a>00437 
<a name="l00438"></a>00438     <span class="keywordflow">if</span> ( !<a class="code" href="classSocket.xhtml#a688f0d2182f7ca098de3f76156efad0a" title="Increment the total count of bytes sent by the socket.">aBytesSent</a>( amount ) )
<a name="l00439"></a>00439     {
<a name="l00440"></a>00440         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::Send()-&gt;SocketClient::aBytesSent()-&gt; value %lu returned false&quot;</span>, <a class="code" href="classSocket.xhtml#a3bb9f40d6e5f32cfa960a86323322c0c" title="Returns the number of bytes sent by the Socket.">gBytesSent</a>() + amount );
<a name="l00441"></a>00441         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00442"></a>00442     }
<a name="l00443"></a>00443 
<a name="l00444"></a>00444     <a class="code" href="classSocketClient.xhtml#a2a54cf3d5a21ee7bd695213f3f200576">m_output</a>.clear();
<a name="l00445"></a>00445 
<a name="l00446"></a>00446     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00447"></a>00447 }
<a name="l00448"></a>00448 
<a name="l00455"></a><a class="code" href="classSocketClient.xhtml#a472a64c9b811361791c107498eebf57a">00455</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketClient.xhtml#a6268f3d184970ec0076da657c39d2e80" title="Process data from the client&#39;s send buffer and transmit it via the socket.">SocketClient::Send</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; msg )
<a name="l00456"></a>00456 {
<a name="l00457"></a>00457     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00458"></a>00458 
<a name="l00459"></a>00459     <span class="keywordflow">if</span> ( !<a class="code" href="classSocket.xhtml#a508457b48e6296d1e86c7cc72af65948" title="Return if the Socket is valid for use.">Valid</a>() )
<a name="l00460"></a>00460     {
<a name="l00461"></a>00461         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::Send()-&gt;SocketClient::Valid()-&gt; descriptor %ld returned false&quot;</span>, <a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82" title="Returns the file descriptor associated to the Socket.">gDescriptor</a>() );
<a name="l00462"></a>00462         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00463"></a>00463     }
<a name="l00464"></a>00464 
<a name="l00465"></a>00465     <span class="comment">// Prepend a CRLF to ensure output lands on a newline.</span>
<a name="l00466"></a>00466     <span class="comment">// Make this client configurable in the future.</span>
<a name="l00467"></a>00467     <span class="keywordflow">if</span> ( <a class="code" href="classSocketClient.xhtml#a2a54cf3d5a21ee7bd695213f3f200576">m_output</a>.empty() &amp;&amp; <a class="code" href="classSocketClient.xhtml#aa02d9372cc719fd598b842ff2aa4866c">m_state</a> == <a class="code" href="enum_8h.xhtml#a183c84f479d3dfb8ea89c5fa6db3c5c7a9461d3679b682710a261f18d7876a395">SOC_STATE_PLAYING</a> )
<a name="l00468"></a>00468     {
<a name="l00469"></a>00469         <a class="code" href="classSocketClient.xhtml#a2a54cf3d5a21ee7bd695213f3f200576">m_output</a>.append( <a class="code" href="macros_8h.xhtml#a6cb23a858b0a21bdaa644b9181dc415f" title="Output a carriage return \ line feed.">CRLF</a> );
<a name="l00470"></a>00470         <a class="code" href="classSocketClient.xhtml#a2a54cf3d5a21ee7bd695213f3f200576">m_output</a>.append( <a class="code" href="namespaceTelopt.xhtml#abb99f54e5e0a1ab69795aea0408c0fc2" title="Processes data to be sent to a SocketClient for telnet sequences.">Telopt::ProcessOutput</a>( <span class="keyword">this</span>, msg ) );
<a name="l00471"></a>00471     }
<a name="l00472"></a>00472     <span class="keywordflow">else</span>
<a name="l00473"></a>00473         <a class="code" href="classSocketClient.xhtml#a2a54cf3d5a21ee7bd695213f3f200576">m_output</a>.append( <a class="code" href="namespaceTelopt.xhtml#abb99f54e5e0a1ab69795aea0408c0fc2" title="Processes data to be sent to a SocketClient for telnet sequences.">Telopt::ProcessOutput</a>( <span class="keyword">this</span>, msg ) );
<a name="l00474"></a>00474 
<a name="l00475"></a>00475     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00476"></a>00476 }
<a name="l00477"></a>00477 
<a name="l00483"></a><a class="code" href="classSocketClient.xhtml#ae1cc85ca3320df2f78727f76e40fc5a3">00483</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="classSocketClient.xhtml#ae1cc85ca3320df2f78727f76e40fc5a3" title="Serializes the object for writing to disk to be later reloaded.">SocketClient::Serialize</a>()<span class="keyword"> const</span>
<a name="l00484"></a>00484 <span class="keyword"></span>{
<a name="l00485"></a>00485     <span class="keywordflow">return</span> string();
<a name="l00486"></a>00486 }
<a name="l00487"></a>00487 
<a name="l00488"></a>00488 <span class="comment">/* Query */</span>
<a name="l00495"></a><a class="code" href="classSocketClient_1_1TermInfo.xhtml#a58debeabe9fe825bc7abbac06df5b216">00495</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketClient_1_1TermInfo.xhtml#a58debeabe9fe825bc7abbac06df5b216" title="Returns if a telopt has been previously negotiated.">SocketClient::TermInfo::gNegotiated</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; opt )<span class="keyword"> const</span>
<a name="l00496"></a>00496 <span class="keyword"></span>{
<a name="l00497"></a>00497     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00498"></a>00498 
<a name="l00499"></a>00499     <span class="keywordflow">if</span> ( opt &lt; uintmin_t || opt &gt;= <a class="code" href="enum_8h.xhtml#a8133e93c6dc811b9b216c65d6836dbe4a597c66d7807ce83daecb77a1ca11c7bf">MAX_SOC_TELOPT</a> )
<a name="l00500"></a>00500     {
<a name="l00501"></a>00501         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::TermInfo::gNegotiated()-&gt; called with invalid opt: %lu&quot;</span>, opt );
<a name="l00502"></a>00502         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00503"></a>00503     }
<a name="l00504"></a>00504 
<a name="l00505"></a>00505     <span class="keywordflow">return</span> <a class="code" href="classSocketClient_1_1TermInfo.xhtml#a2284e4ecaeac7bb59a66c4201c38fdc7">m_negotiated</a>[opt];
<a name="l00506"></a>00506 }
<a name="l00507"></a>00507 
<a name="l00514"></a><a class="code" href="classSocketClient_1_1TermInfo.xhtml#a53781b89d3e22a7ceaa68c96b2b14463">00514</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketClient_1_1TermInfo.xhtml#a53781b89d3e22a7ceaa68c96b2b14463" title="Returns the value of a telnet option.">SocketClient::TermInfo::gTelopt</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; opt )<span class="keyword"> const</span>
<a name="l00515"></a>00515 <span class="keyword"></span>{
<a name="l00516"></a>00516     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00517"></a>00517 
<a name="l00518"></a>00518     <span class="keywordflow">if</span> ( opt &lt; uintmin_t || opt &gt;= <a class="code" href="enum_8h.xhtml#a8133e93c6dc811b9b216c65d6836dbe4a597c66d7807ce83daecb77a1ca11c7bf">MAX_SOC_TELOPT</a> )
<a name="l00519"></a>00519     {
<a name="l00520"></a>00520         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::TermInfo::gTelopt()-&gt; called with invalid opt: %lu&quot;</span>, opt );
<a name="l00521"></a>00521         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00522"></a>00522     }
<a name="l00523"></a>00523 
<a name="l00524"></a>00524     <span class="keywordflow">return</span> m_telopt[opt];
<a name="l00525"></a>00525 }
<a name="l00526"></a>00526 
<a name="l00531"></a><a class="code" href="classSocketClient.xhtml#a56e10cbe469179d7d7bc18eae6ca351c">00531</a> <a class="code" href="classAccount.xhtml" title="Security structure to maintain characters, roles, and permissions.">Account</a>* <a class="code" href="classSocketClient.xhtml#a56e10cbe469179d7d7bc18eae6ca351c" title="Returns the Account object associated to this SocketClient.">SocketClient::gAccount</a>()<span class="keyword"> const</span>
<a name="l00532"></a>00532 <span class="keyword"></span>{
<a name="l00533"></a>00533     <span class="keywordflow">return</span> <a class="code" href="classSocketClient.xhtml#aebf1dbfb77a447461d70452f23bfc1f4">m_account</a>;
<a name="l00534"></a>00534 }
<a name="l00535"></a>00535 
<a name="l00540"></a><a class="code" href="classSocketClient.xhtml#a9c982fdda7a3daa5b153eada40a3b6fb">00540</a> <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> <a class="code" href="classSocketClient.xhtml#a9c982fdda7a3daa5b153eada40a3b6fb" title="Returns the amount of time the client has been idle.">SocketClient::gIdle</a>()<span class="keyword"> const</span>
<a name="l00541"></a>00541 <span class="keyword"></span>{
<a name="l00542"></a>00542     <span class="keywordflow">return</span> <a class="code" href="classSocketClient.xhtml#aa3da4ed0f9760c3dd0c39c048f9e99ac">m_idle</a>;
<a name="l00543"></a>00543 }
<a name="l00544"></a>00544 
<a name="l00550"></a><a class="code" href="classSocketClient.xhtml#acdff38db903da34b2a9fcc3e12d6a796">00550</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="classSocketClient.xhtml#acdff38db903da34b2a9fcc3e12d6a796" title="Returns the value of a SOC_LOGIN key.">SocketClient::gLogin</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; key )<span class="keyword"> const</span>
<a name="l00551"></a>00551 <span class="keyword"></span>{
<a name="l00552"></a>00552     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00553"></a>00553 
<a name="l00554"></a>00554     <span class="keywordflow">if</span> ( key &lt; uintmin_t || key &gt;= <a class="code" href="enum_8h.xhtml#a24c6d1cb52c9ac856a707a99c2308b2aaeafa7e90eb336c4b3533bef63ec3a445">MAX_SOC_LOGIN</a> )
<a name="l00555"></a>00555     {
<a name="l00556"></a>00556         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::gLogin()-&gt; called with invalid key: %lu&quot;</span>, key );
<a name="l00557"></a>00557         <span class="keywordflow">return</span> string();
<a name="l00558"></a>00558     }
<a name="l00559"></a>00559 
<a name="l00560"></a>00560     <span class="keywordflow">return</span> <a class="code" href="classSocketClient.xhtml#ad99b556e3fbc75145cd4a26f8cb2521b">m_login</a>[key];
<a name="l00561"></a>00561 }
<a name="l00562"></a>00562 
<a name="l00567"></a><a class="code" href="classSocketClient.xhtml#abb055f2dc275dd975ac9465a8e5b19e5">00567</a> <a class="code" href="classServer.xhtml" title="The core of the game server.">Server</a>* <a class="code" href="classSocketClient.xhtml#abb055f2dc275dd975ac9465a8e5b19e5" title="Returns the Server object associated to this SocketClient.">SocketClient::gServer</a>()<span class="keyword"> const</span>
<a name="l00568"></a>00568 <span class="keyword"></span>{
<a name="l00569"></a>00569     <span class="keywordflow">return</span> <a class="code" href="classSocketClient.xhtml#a5806a405d435d6410740d663e113c03e">m_server</a>;
<a name="l00570"></a>00570 }
<a name="l00571"></a>00571 
<a name="l00576"></a><a class="code" href="classSocketClient.xhtml#aa0badca8f614127e98281995c02cb385">00576</a> <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> <a class="code" href="classSocketClient.xhtml#aa0badca8f614127e98281995c02cb385" title="Returns the connection state of the client from SOC_STATE.">SocketClient::gState</a>()<span class="keyword"> const</span>
<a name="l00577"></a>00577 <span class="keyword"></span>{
<a name="l00578"></a>00578     <span class="keywordflow">return</span> <a class="code" href="classSocketClient.xhtml#aa02d9372cc719fd598b842ff2aa4866c">m_state</a>;
<a name="l00579"></a>00579 }
<a name="l00580"></a>00580 
<a name="l00585"></a><a class="code" href="classSocketClient.xhtml#aaad671b55573cb36a5d0bcc1e4a518fb">00585</a> <a class="code" href="classSocketClient_1_1TermInfo.xhtml" title="Remote terminal information and configuration.">SocketClient::TermInfo</a>* <a class="code" href="classSocketClient.xhtml#aaad671b55573cb36a5d0bcc1e4a518fb" title="Returns a pointer to the terminal information of the SocketClient.">SocketClient::gTermInfo</a>()<span class="keyword"> const</span>
<a name="l00586"></a>00586 <span class="keyword"></span>{
<a name="l00587"></a>00587     <span class="keywordflow">return</span> <a class="code" href="classSocketClient.xhtml#a52a31f4112c24bd7e75858d4021fcf95">m_terminfo</a>;
<a name="l00588"></a>00588 }
<a name="l00589"></a>00589 
<a name="l00590"></a>00590 <span class="comment">/* Manipulate */</span>
<a name="l00598"></a><a class="code" href="classSocketClient_1_1TermInfo.xhtml#aa576f2ec6f9de8d4160ccee6cbd1dc34">00598</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketClient_1_1TermInfo.xhtml#aa576f2ec6f9de8d4160ccee6cbd1dc34" title="Sets if a telopt has been previously negotiated.">SocketClient::TermInfo::sNegotiated</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; opt, <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; val )
<a name="l00599"></a>00599 {
<a name="l00600"></a>00600     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00601"></a>00601 
<a name="l00602"></a>00602     <span class="keywordflow">if</span> ( opt &lt; uintmin_t || opt &gt;= <a class="code" href="enum_8h.xhtml#a8133e93c6dc811b9b216c65d6836dbe4a597c66d7807ce83daecb77a1ca11c7bf">MAX_SOC_TELOPT</a> )
<a name="l00603"></a>00603     {
<a name="l00604"></a>00604         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::TermInfo::sNegotiated()-&gt; called with invalid opt: %lu&quot;</span>, opt );
<a name="l00605"></a>00605         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00606"></a>00606     }
<a name="l00607"></a>00607 
<a name="l00608"></a>00608     m_negotiated[opt] = val;
<a name="l00609"></a>00609 
<a name="l00610"></a>00610     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00611"></a>00611 }
<a name="l00612"></a>00612 
<a name="l00620"></a><a class="code" href="classSocketClient_1_1TermInfo.xhtml#a05765d3e9e5c8f4d8c94bcea42b74dbe">00620</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketClient_1_1TermInfo.xhtml#a05765d3e9e5c8f4d8c94bcea42b74dbe" title="Sets the value of a telnet option.">SocketClient::TermInfo::sTelopt</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; opt, <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; val )
<a name="l00621"></a>00621 {
<a name="l00622"></a>00622     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00623"></a>00623 
<a name="l00624"></a>00624     <span class="keywordflow">if</span> ( opt &lt; uintmin_t || opt &gt;= <a class="code" href="enum_8h.xhtml#a8133e93c6dc811b9b216c65d6836dbe4a597c66d7807ce83daecb77a1ca11c7bf">MAX_SOC_TELOPT</a> )
<a name="l00625"></a>00625     {
<a name="l00626"></a>00626         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::TermInfo::sTelopt()-&gt; called with invalid opt: %lu&quot;</span>, opt );
<a name="l00627"></a>00627         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00628"></a>00628     }
<a name="l00629"></a>00629 
<a name="l00630"></a>00630     m_telopt[opt] = val;
<a name="l00631"></a>00631 
<a name="l00632"></a>00632     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00633"></a>00633 }
<a name="l00634"></a>00634 
<a name="l00641"></a><a class="code" href="classSocketClient.xhtml#aaa13ed7d0aa65770b617cbf72a5c28d9">00641</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketClient.xhtml#aaa13ed7d0aa65770b617cbf72a5c28d9" title="Associates an Account object to the SocketClient.">SocketClient::sAccount</a>( <a class="code" href="classAccount.xhtml" title="Security structure to maintain characters, roles, and permissions.">Account</a>* account )
<a name="l00642"></a>00642 {
<a name="l00643"></a>00643     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00644"></a>00644 
<a name="l00645"></a>00645     <span class="keywordflow">if</span> ( account == NULL )
<a name="l00646"></a>00646     {
<a name="l00647"></a>00647         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;SocketClient::sAccount()-&gt; called with NULL account&quot;</span> );
<a name="l00648"></a>00648         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00649"></a>00649     }
<a name="l00650"></a>00650 
<a name="l00651"></a>00651     <a class="code" href="classSocketClient.xhtml#aebf1dbfb77a447461d70452f23bfc1f4">m_account</a> = account;
<a name="l00652"></a>00652 
<a name="l00653"></a>00653     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00654"></a>00654 }
<a name="l00655"></a>00655 
<a name="l00662"></a><a class="code" href="classSocketClient.xhtml#a686aea73a8e9c9dbaac6438ec1b24293">00662</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketClient.xhtml#a686aea73a8e9c9dbaac6438ec1b24293" title="Set the idle timer value of the socket.">SocketClient::sIdle</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; idle )
<a name="l00663"></a>00663 {
<a name="l00664"></a>00664     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00665"></a>00665 
<a name="l00666"></a>00666     <span class="keywordflow">if</span> ( idle &lt; uintmin_t || idle &gt; <a class="code" href="config_8h.xhtml#a9e1bbc3ba39f67dbf7398220cdca6441" title="(Minutes / tick rate) before disconneting an idle socket. Approx 30 minutes.">CFG_SOC_MAX_IDLE</a> )
<a name="l00667"></a>00667     {
<a name="l00668"></a>00668         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::sIdle()-&gt; called with invalid idle: %lu&quot;</span>, idle );
<a name="l00669"></a>00669         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00670"></a>00670     }
<a name="l00671"></a>00671 
<a name="l00672"></a>00672     <a class="code" href="classSocketClient.xhtml#aa3da4ed0f9760c3dd0c39c048f9e99ac">m_idle</a> = idle;
<a name="l00673"></a>00673 
<a name="l00674"></a>00674     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00675"></a>00675 }
<a name="l00676"></a>00676 
<a name="l00684"></a><a class="code" href="classSocketClient.xhtml#ad6d652d220b5b6820e0d15a328ad9484">00684</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketClient.xhtml#ad6d652d220b5b6820e0d15a328ad9484" title="Set the login command or arguments to be passed between handler functions.">SocketClient::sLogin</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; key, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; val )
<a name="l00685"></a>00685 {
<a name="l00686"></a>00686     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00687"></a>00687 
<a name="l00688"></a>00688     <span class="keywordflow">if</span> ( key &lt; uintmin_t || key &gt;= <a class="code" href="enum_8h.xhtml#a24c6d1cb52c9ac856a707a99c2308b2aaeafa7e90eb336c4b3533bef63ec3a445">MAX_SOC_LOGIN</a> )
<a name="l00689"></a>00689     {
<a name="l00690"></a>00690         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::sLogin()-&gt; called with invalid key: %lu&quot;</span>, key );
<a name="l00691"></a>00691         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00692"></a>00692     }
<a name="l00693"></a>00693 
<a name="l00694"></a>00694     <a class="code" href="classSocketClient.xhtml#ad99b556e3fbc75145cd4a26f8cb2521b">m_login</a>[key] = val;
<a name="l00695"></a>00695 
<a name="l00696"></a>00696     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00697"></a>00697 }
<a name="l00698"></a>00698 
<a name="l00704"></a><a class="code" href="classSocketClient.xhtml#a3cfd5a085d8df5b4fed5166afe7578b2">00704</a> <span class="keywordtype">void</span>* <a class="code" href="classSocketClient.xhtml#a3cfd5a085d8df5b4fed5166afe7578b2" title="Resolve the hostname of the client. Threaded to avoid locking on long resolutions.">SocketClient::tResolveHostname</a>( <span class="keywordtype">void</span>* data )
<a name="l00705"></a>00705 {
<a name="l00706"></a>00706     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00707"></a>00707     <a class="code" href="classSocketClient.xhtml" title="Client / remote host specific functions that extend the Socket class.">SocketClient</a>* socket_client = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="classSocketClient.xhtml" title="Client / remote host specific functions that extend the Socket class.">SocketClient</a>*<span class="keyword">&gt;</span>( data );
<a name="l00708"></a>00708     <span class="keyword">static</span> sockaddr_in6 sa_zero;
<a name="l00709"></a>00709     sockaddr_in6 sa = sa_zero;
<a name="l00710"></a>00710     <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a> error = 0;
<a name="l00711"></a>00711     <span class="keywordtype">char</span> hostname[<a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a>];
<a name="l00712"></a>00712 
<a name="l00713"></a>00713     sa.sin6_family = AF_INET;
<a name="l00714"></a>00714 
<a name="l00715"></a>00715     <span class="keywordflow">if</span> ( ( error = ::inet_pton( AF_INET6, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( socket_client-&gt;<a class="code" href="classSocket.xhtml#adc72a37934a4f2d10f6ae8fc94bb4ca7" title="Returns the hostname associated to the Socket.">gHostname</a>() ), &amp;sa.sin6_addr ) ) != 1 )
<a name="l00716"></a>00716     {
<a name="l00717"></a>00717         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::tResolveHostname()-&gt;inet_pton()-&gt; returned errno %d: %s&quot;</span>, error, gai_strerror( error ) );
<a name="l00718"></a>00718         ::pthread_exit( reinterpret_cast&lt;void*&gt;( EXIT_FAILURE ) );
<a name="l00719"></a>00719     }
<a name="l00720"></a>00720 
<a name="l00721"></a>00721     <span class="keywordflow">if</span> ( ( error = ::getnameinfo( reinterpret_cast&lt;sockaddr*&gt;( &amp;sa ), <span class="keyword">sizeof</span>( sa ), hostname, <span class="keyword">sizeof</span>( hostname ), NULL, 0, 0 ) ) != 0 )
<a name="l00722"></a>00722     {
<a name="l00723"></a>00723         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::tResolveHostname()-&gt;getnameinfo()-&gt; returned errno %d: %s&quot;</span>, error, gai_strerror( error ) );
<a name="l00724"></a>00724         ::pthread_exit( reinterpret_cast&lt;void*&gt;( EXIT_FAILURE ) );
<a name="l00725"></a>00725     }
<a name="l00726"></a>00726 
<a name="l00727"></a>00727     <span class="keywordflow">if</span> ( !socket_client-&gt;<a class="code" href="classSocket.xhtml#a14e5e2493abcae97043297dd170e7a39" title="Sets the hostname of the socket.">sHostname</a>( hostname ) )
<a name="l00728"></a>00728     {
<a name="l00729"></a>00729         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::tResolveHostname()-&gt;SocketClient::sHostname()-&gt; hostname %s returned false&quot;</span>, hostname );
<a name="l00730"></a>00730         ::pthread_exit( reinterpret_cast&lt;void*&gt;( EXIT_FAILURE ) );
<a name="l00731"></a>00731     }
<a name="l00732"></a>00732 
<a name="l00733"></a>00733     <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( 0, <span class="stringliteral">&quot;SocketClient::ResolveHostname()-&gt; %s&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( socket_client-&gt;<a class="code" href="classSocket.xhtml#adc72a37934a4f2d10f6ae8fc94bb4ca7" title="Returns the hostname associated to the Socket.">gHostname</a>() ) );
<a name="l00734"></a>00734 
<a name="l00735"></a>00735     ::pthread_exit( reinterpret_cast&lt;void*&gt;( EXIT_SUCCESS ) );
<a name="l00736"></a>00736 }
<a name="l00737"></a>00737 
<a name="l00744"></a><a class="code" href="classSocketClient.xhtml#aa3e0896a5e763ae0a7b250396d722084">00744</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketClient.xhtml#aa3e0896a5e763ae0a7b250396d722084" title="Set the owning server object that the socket is actually connected to.">SocketClient::sServer</a>( <a class="code" href="classServer.xhtml" title="The core of the game server.">Server</a>* server )
<a name="l00745"></a>00745 {
<a name="l00746"></a>00746     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00747"></a>00747 
<a name="l00748"></a>00748     <span class="keywordflow">if</span> ( !server )
<a name="l00749"></a>00749     {
<a name="l00750"></a>00750         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;SocketClient::sServer()-&gt; called with NULL server&quot;</span> );
<a name="l00751"></a>00751         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00752"></a>00752     }
<a name="l00753"></a>00753 
<a name="l00754"></a>00754     <span class="keywordflow">if</span> ( !server-&gt;<a class="code" href="classServer.xhtml#ae3d4d866381050c00f383248872877ea" title="Returns if the Server is shutdown or not.">Running</a>() )
<a name="l00755"></a>00755     {
<a name="l00756"></a>00756         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;SocketClient::sServer()-&gt; called with offline server&quot;</span> );
<a name="l00757"></a>00757         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00758"></a>00758     }
<a name="l00759"></a>00759 
<a name="l00760"></a>00760     <a class="code" href="classSocketClient.xhtml#a5806a405d435d6410740d663e113c03e">m_server</a> = server;
<a name="l00761"></a>00761 
<a name="l00762"></a>00762     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00763"></a>00763 }
<a name="l00764"></a>00764 
<a name="l00771"></a><a class="code" href="classSocketClient.xhtml#ab5e6737c8acd4aaa21268e10c1a050b4">00771</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketClient.xhtml#ab5e6737c8acd4aaa21268e10c1a050b4" title="Set the connection state value of the socket.">SocketClient::sState</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; state )
<a name="l00772"></a>00772 {
<a name="l00773"></a>00773     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00774"></a>00774 
<a name="l00775"></a>00775     <span class="keywordflow">if</span> ( state &lt; SOC_STATE_DISCONNECTED || state &gt;= <a class="code" href="enum_8h.xhtml#a183c84f479d3dfb8ea89c5fa6db3c5c7a840d70589e2217ed8aa208ba921e5e88">MAX_SOC_STATE</a> )
<a name="l00776"></a>00776     {
<a name="l00777"></a>00777         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketClient::sState()-&gt; called with invalid state: %lu&quot;</span>, state );
<a name="l00778"></a>00778         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00779"></a>00779     }
<a name="l00780"></a>00780 
<a name="l00781"></a>00781     <a class="code" href="classSocketClient.xhtml#aa02d9372cc719fd598b842ff2aa4866c">m_state</a> = state;
<a name="l00782"></a>00782 
<a name="l00783"></a>00783     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00784"></a>00784 }
<a name="l00785"></a>00785 
<a name="l00786"></a>00786 <span class="comment">/* Internal */</span>
<a name="l00790"></a><a class="code" href="classSocketClient_1_1TermInfo.xhtml#ac779e6a7c78ea57a6dd8975e87563a26">00790</a> <a class="code" href="classSocketClient_1_1TermInfo.xhtml#ac779e6a7c78ea57a6dd8975e87563a26" title="Constructor for the SocketClient::TermInfo class.">SocketClient::TermInfo::TermInfo</a>()
<a name="l00791"></a>00791 {
<a name="l00792"></a>00792     <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> i = <a class="code" href="limits_8h.xhtml#ace307ffbe4c934f4565176f184b38d78" title="The minimum value of any uint_t variable.">uintmin_t</a>;
<a name="l00793"></a>00793 
<a name="l00794"></a>00794     <span class="keywordflow">for</span> ( i = 0; i &lt; <a class="code" href="enum_8h.xhtml#a8133e93c6dc811b9b216c65d6836dbe4a597c66d7807ce83daecb77a1ca11c7bf">MAX_SOC_TELOPT</a>; i++ )
<a name="l00795"></a>00795     {
<a name="l00796"></a>00796         m_negotiated[i] = <span class="keyword">false</span>;
<a name="l00797"></a>00797         m_telopt[i] = <span class="keyword">false</span>;
<a name="l00798"></a>00798     }
<a name="l00799"></a>00799 
<a name="l00800"></a>00800     <span class="keywordflow">return</span>;
<a name="l00801"></a>00801 }
<a name="l00802"></a>00802 
<a name="l00806"></a><a class="code" href="classSocketClient_1_1TermInfo.xhtml#a5db8acd12d305138e7037d78c8f50c4d">00806</a> <a class="code" href="classSocketClient_1_1TermInfo.xhtml#a5db8acd12d305138e7037d78c8f50c4d" title="Destructor for the SocketClient::TermInfo class.">SocketClient::TermInfo::~TermInfo</a>()
<a name="l00807"></a>00807 {
<a name="l00808"></a>00808     <span class="keywordflow">return</span>;
<a name="l00809"></a>00809 }
<a name="l00810"></a>00810 
<a name="l00816"></a><a class="code" href="classSocketClient.xhtml#a72bb9c02dbe7894b91feb4b94e2eea55">00816</a> <a class="code" href="classSocketClient.xhtml#a72bb9c02dbe7894b91feb4b94e2eea55" title="Constructor for the SocketClient class.">SocketClient::SocketClient</a>( <a class="code" href="classServer.xhtml" title="The core of the game server.">Server</a>* server, <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a>&amp; descriptor ) : <a class="code" href="classSocket.xhtml" title="Functions and interfaces that are common to both SocketClient and SocketServer.">Socket</a>( server, descriptor )
<a name="l00817"></a>00817 {
<a name="l00818"></a>00818     <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> i = <a class="code" href="limits_8h.xhtml#ace307ffbe4c934f4565176f184b38d78" title="The minimum value of any uint_t variable.">uintmin_t</a>;
<a name="l00819"></a>00819 
<a name="l00820"></a>00820     <a class="code" href="classSocketClient.xhtml#aebf1dbfb77a447461d70452f23bfc1f4">m_account</a> = NULL;
<a name="l00821"></a>00821     <a class="code" href="classSocketClient.xhtml#a3c51b2f60fefcc90bfa5ed710e0eb96f">m_command_queue</a>.clear();
<a name="l00822"></a>00822     <a class="code" href="classSocketClient.xhtml#aa3da4ed0f9760c3dd0c39c048f9e99ac">m_idle</a> = 0;
<a name="l00823"></a>00823     <a class="code" href="classSocketClient.xhtml#afb9f8fd3659c27bd154c1d1e0f39f09a">m_input</a>.clear();
<a name="l00824"></a>00824     <span class="keywordflow">for</span> ( i = 0; i &lt; <a class="code" href="enum_8h.xhtml#a24c6d1cb52c9ac856a707a99c2308b2aaeafa7e90eb336c4b3533bef63ec3a445">MAX_SOC_LOGIN</a>; i++ )
<a name="l00825"></a>00825         <a class="code" href="classSocketClient.xhtml#ad99b556e3fbc75145cd4a26f8cb2521b">m_login</a>[i].clear();
<a name="l00826"></a>00826     <a class="code" href="classSocketClient.xhtml#a2a54cf3d5a21ee7bd695213f3f200576">m_output</a>.clear();
<a name="l00827"></a>00827     <a class="code" href="classSocketClient.xhtml#a84ede1902642e34c0389adaa0e718f96">m_quitting</a> = <span class="keyword">false</span>;
<a name="l00828"></a>00828     <a class="code" href="classSocketClient.xhtml#aa3e0896a5e763ae0a7b250396d722084" title="Set the owning server object that the socket is actually connected to.">sServer</a>( server );
<a name="l00829"></a>00829     <a class="code" href="classSocketClient.xhtml#aa02d9372cc719fd598b842ff2aa4866c">m_state</a> = <a class="code" href="enum_8h.xhtml#a183c84f479d3dfb8ea89c5fa6db3c5c7ad79e38eb5b7df99065c5222ab9bb1583">SOC_STATE_DISCONNECTED</a>;
<a name="l00830"></a>00830     <a class="code" href="classSocketClient.xhtml#a52a31f4112c24bd7e75858d4021fcf95">m_terminfo</a> = <span class="keyword">new</span> <a class="code" href="classSocketClient_1_1TermInfo.xhtml" title="Remote terminal information and configuration.">SocketClient::TermInfo</a>();
<a name="l00831"></a>00831 
<a name="l00832"></a>00832     <a class="code" href="classSocketClient.xhtml#a5806a405d435d6410740d663e113c03e">m_server</a>-&gt;<a class="code" href="classServer.xhtml#a2b261b9b308edee58ec6191966bd019a" title="Set the amount of subordinate SocketClient and SocketServer objects that have been opened on a NAMS S...">sSocketOpen</a>( <a class="code" href="classSocketClient.xhtml#a5806a405d435d6410740d663e113c03e">m_server</a>-&gt;<a class="code" href="classServer.xhtml#a0c8164b5ed4b2c6efd0ecbd2a8c8a503" title="Returns the combined number of SocketClient and SocketServer objects that have been created...">gSocketOpen</a>() + 1 );
<a name="l00833"></a>00833     <a class="code" href="list_8cpp.xhtml#a5c8453510b62fb7a9d2a31b599ae26fb" title="All SocketClient objects connected to the server.">socket_client_list</a>.push_back( <span class="keyword">this</span> );
<a name="l00834"></a>00834 
<a name="l00835"></a>00835     <span class="keywordflow">return</span>;
<a name="l00836"></a>00836 }
<a name="l00837"></a>00837 
<a name="l00841"></a><a class="code" href="classSocketClient.xhtml#af4ecba63b08737b5be4fef324cef1df6">00841</a> <a class="code" href="classSocketClient.xhtml#af4ecba63b08737b5be4fef324cef1df6" title="Destructor for the SocketClient class.">SocketClient::~SocketClient</a>()
<a name="l00842"></a>00842 {
<a name="l00843"></a>00843     <span class="keywordflow">if</span> ( <a class="code" href="classSocketClient.xhtml#aebf1dbfb77a447461d70452f23bfc1f4">m_account</a> != NULL )
<a name="l00844"></a>00844         <a class="code" href="classSocketClient.xhtml#aebf1dbfb77a447461d70452f23bfc1f4">m_account</a>-&gt;<a class="code" href="classAccount.xhtml#aa82e62e930fb3a8ac58a4592f323db75" title="Unload an account from memory that was previously loaded via Account::New().">Delete</a>();
<a name="l00845"></a>00845     <span class="keyword">delete</span> <a class="code" href="classSocketClient.xhtml#a52a31f4112c24bd7e75858d4021fcf95">m_terminfo</a>;
<a name="l00846"></a>00846 
<a name="l00847"></a>00847     <span class="keywordflow">return</span>;
<a name="l00848"></a>00848 }
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Sun Mar 17 2013 16:00:35 for NAMS - Not Another MUD Server by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
