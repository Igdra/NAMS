<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>NAMS - Not Another MUD Server: Utils Namespace Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">NAMS - Not Another MUD Server
   
   </div>
   <div id="projectbrief">NAMS is a C++ MUD server with the primary goals of a safe, modular design and a server core that is substantially decouppled from game logic.</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="dynsections.js"></script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li class="current"><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="namespaces.xhtml"><span>Namespace&#160;List</span></a></li>
      <li><a href="namespacemembers.xhtml"><span>Namespace&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a>  </div>
  <div class="headertitle">
<div class="title">Utils Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>The <a class="el" href="namespaceUtils.xhtml" title="The Utils namespace contains all general purpose, multi-use, and non-class functions.">Utils</a> namespace contains all general purpose, multi-use, and non-class functions.  
</p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classUtils_1_1DeleteObject.xhtml">DeleteObject</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The <a class="el" href="classUtils_1_1DeleteObject.xhtml" title="The DeleteObject class implements only operator() to be used in easily deleteing lists of pointers or...">DeleteObject</a> class implements only operator() to be used in easily deleteing lists of pointers or other objects.  <a href="classUtils_1_1DeleteObject.xhtml#details">More...</a><br/></td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Core</div></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">const string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a35029e6e20697c4fef5121040892e144">DelSpaces</a> (const T &amp;t)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string with all whitespace characters removed.  <a href="#a35029e6e20697c4fef5121040892e144"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">const string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a9b70f9dd0af906c806695b35488e778f">Lower</a> (const T &amp;t)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string converted to all lowercase letters.  <a href="#a9b70f9dd0af906c806695b35488e778f"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">const string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a817d26eb6a3427ad3742fb3cb788d30e">Upper</a> (const T &amp;t)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string converted to all uppercase letters.  <a href="#a817d26eb6a3427ad3742fb3cb788d30e"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">const string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a594756861a60d256d31db7bb34ea70de">String</a> (const T &amp;t)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string object from any data type: bool, int, char, etc.  <a href="#a594756861a60d256d31db7bb34ea70de"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const timeval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#adbb91eecf7e80e6e97b3ebe38123cc12">CurrentTime</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the current system time.  <a href="#adbb91eecf7e80e6e97b3ebe38123cc12"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a405af6e04f92e289f5be1f8ae24a78ee">DiffTime</a> (const timeval &amp;prev, const timeval &amp;current, const <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a> &amp;granularity)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the different between two timeval variables.  <a href="#a405af6e04f92e289f5be1f8ae24a78ee"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#addb4a550d4405e6351e52a275fae8107">DirPath</a> (const string &amp;directory, const string &amp;file, const string &amp;ext=&quot;&quot;)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string consisting of directory/file.ext.  <a href="#addb4a550d4405e6351e52a275fae8107"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a33e08ea185b71aab494d83322ad3cd53">_FormatString</a> (const <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a> &amp;narg, const bitset&lt; <a class="el" href="config_8h.xhtml#a67bd2c66766c9c7f481025398b42dadb">CFG_MEM_MAX_BITSET</a> &gt; &amp;flags, const string &amp;caller, const string &amp;fmt,...)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a nested wrapper for <a class="el" href="namespaceUtils.xhtml#a070c642e01b4b1d2ded94e234d32f65e" title="This is the printf-style string formatter. It should not be invoked directly, but rather by using Uti...">Utils::__FormatString</a> and should not be called directly.  <a href="#a33e08ea185b71aab494d83322ad3cd53"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a070c642e01b4b1d2ded94e234d32f65e">__FormatString</a> (const <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a> &amp;narg, const bitset&lt; <a class="el" href="config_8h.xhtml#a67bd2c66766c9c7f481025398b42dadb">CFG_MEM_MAX_BITSET</a> &gt; &amp;flags, const string &amp;caller, const string &amp;fmt, va_list &amp;val)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the printf-style string formatter. It should not be invoked directly, but rather by using Utils::FormatString() to ensure proper argument count and caller passing.  <a href="#a070c642e01b4b1d2ded94e234d32f65e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#aa2ac8bf1bb304bab8f29829ec30af243">_Logger</a> (const <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a> &amp;narg, const bitset&lt; <a class="el" href="config_8h.xhtml#a67bd2c66766c9c7f481025398b42dadb">CFG_MEM_MAX_BITSET</a> &gt; &amp;flags, const string &amp;caller, const string &amp;fmt,...)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the logging output engine. It should not be invoked directly, but rather by calling Utils::Logger() to ensure proper argument count and caller passing.  <a href="#aa2ac8bf1bb304bab8f29829ec30af243"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#afaf029667f299587a52ba9c8de11edfa">NumChar</a> (const string &amp;input, const string &amp;item)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of a specific character in a given string.  <a href="#afaf029667f299587a52ba9c8de11edfa"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const vector&lt; string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a8c70e85acdb1549aa4cd3a16b8d8d9cf">StrNewlines</a> (const string &amp;input)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a vector of strings split at linebreaks based on input.  <a href="#a8c70e85acdb1549aa4cd3a16b8d8d9cf"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#aa3855eafe3e4898c743bc47cdc962a4a">StrTime</a> (const timeval &amp;now)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a given time as a string.  <a href="#aa3855eafe3e4898c743bc47cdc962a4a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const vector&lt; string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a498e31ec51c129ae9b68a20aa4e05c57">StrTokens</a> (const string &amp;input)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a vector of strings split at spaces based on input.  <a href="#a498e31ec51c129ae9b68a20aa4e05c57"></a><br/></td></tr>
<tr><td colspan="2"><div class="groupHeader">Query</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a303e8afc983db3b483fb450a1c499c1e">iDirectory</a> (const string &amp;dir)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Determines if a file path is a directory or file on disk.  <a href="#a303e8afc983db3b483fb450a1c499c1e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a7d40818a602fb21db4b4f0917705f85b">iFile</a> (const string &amp;file)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Determines if a file path is a file or directory on disk.  <a href="#a7d40818a602fb21db4b4f0917705f85b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a47aae40aead5b696e927fb0cdd336442">iNumber</a> (const string &amp;input)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Determines if a string is only a string of numerical values.  <a href="#a47aae40aead5b696e927fb0cdd336442"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a158e1deb611937a6313e8683fe7db3fc">iReadable</a> (const string &amp;file)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Determines if a file is readable.  <a href="#a158e1deb611937a6313e8683fe7db3fc"></a><br/></td></tr>
<tr><td colspan="2"><div class="groupHeader">Manipulate</div></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;class K , class V , class I &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">const bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a4a4d3dfd2ddb691bc5bcff82252c058b">KeyValue</a> (K &amp;key, V &amp;val, const I &amp;item)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Splits a string in the format of key=value. Retains any whitespace in the value.  <a href="#a4a4d3dfd2ddb691bc5bcff82252c058b"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;class K , class V &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">const void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#aba8fca9daa0f767d7f5af5e2b1d6b81d">KeySet</a> (const bool &amp;igncase, bool &amp;found, const K &amp;keyd, const V &amp;valu, const string &amp;item, string &amp;loc)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">If the contents of keyd == valu, assigns loc = item.  <a href="#aba8fca9daa0f767d7f5af5e2b1d6b81d"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;class K , class V , class I , class L &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">const void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a0aff3514e06faae8ed026c673efe002b">KeySet</a> (const bool &amp;igncase, bool &amp;found, const K &amp;keyd, const V &amp;valu, const I &amp;item, L &amp;loc)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">If the contents of keyd == valu, assigns loc = item.  <a href="#a0aff3514e06faae8ed026c673efe002b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const multimap&lt; bool, string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a014607a95c6d01ee99564479b3620ee7">ListDirectory</a> (const string &amp;dir, const bool &amp;recursive, multimap&lt; bool, string &gt; &amp;output, <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a> &amp;dir_close, <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a> &amp;dir_open)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a multimap of a specified directory tree on disk.  <a href="#a014607a95c6d01ee99564479b3620ee7"></a><br/></td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a070c642e01b4b1d2ded94e234d32f65e"></a><!-- doxytag: member="Utils::__FormatString" ref="a070c642e01b4b1d2ded94e234d32f65e" args="(const uint_t &amp;narg, const bitset&lt; CFG_MEM_MAX_BITSET &gt; &amp;flags, const string &amp;caller, const string &amp;fmt, va_list &amp;val)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const string <a class="el" href="namespaceUtils.xhtml#a070c642e01b4b1d2ded94e234d32f65e">Utils::__FormatString</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a> &amp;&#160;</td>
          <td class="paramname"><em>narg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bitset&lt; <a class="el" href="config_8h.xhtml#a67bd2c66766c9c7f481025398b42dadb">CFG_MEM_MAX_BITSET</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>caller</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>fmt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">va_list &amp;&#160;</td>
          <td class="paramname"><em>val</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">narg</td><td>A <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> variable of the total number of arguments passed. Handled automatically. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">flags</td><td>Any number of flags from <a class="el" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88">UTILS_OPTS</a> to control output formatting and options. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">caller</td><td>A string value containing the calling function. Handled automatically. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fmt</td><td>A string value containing a printf-style format string. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>A variable arguments list to populate fmt with. </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt><b>Return values:</b></dt><dd>
  <table class="retval">
    <tr><td class="paramname">string</td><td>A printf-style formatted string. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utils_8cpp_source.xhtml#l00130">130</a> of file <a class="el" href="utils_8cpp_source.xhtml">utils.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( uflags );
    va_list args;
    vector&lt;string&gt; arguments;
    vector&lt;string&gt;::iterator si;
    vector&lt;char&gt; buf;
    <span class="keywordtype">string</span> output, token;
    <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a> size = 0;

    <span class="keywordflow">if</span> ( fmt.empty() )
    {
        <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( uflags, <span class="stringliteral">&quot;Utils::__FormatString()-&gt; called with empty fmt&quot;</span> );
        <span class="keywordflow">return</span> output;
    }

    arguments = <a class="code" href="namespaceUtils.xhtml#a498e31ec51c129ae9b68a20aa4e05c57" title="Returns a vector of strings split at spaces based on input.">StrTokens</a>( fmt );
    <span class="keywordflow">for</span> ( si = arguments.begin(); si != arguments.end(); si++ )
    {
        token = *si;
        <span class="keywordflow">if</span> ( token.find( <span class="stringliteral">&quot;%&quot;</span> ) != string::npos ) <span class="comment">// not foolproof, but it should catch some worst cases by attempting</span>
            size++;                              <span class="comment">// to ensure a matching narg : format specifier count</span>
    }

    <span class="keywordflow">if</span> ( narg != 1 &amp;&amp; narg != static_cast&lt;uint_t&gt;( size ) &amp;&amp; narg != <a class="code" href="namespaceUtils.xhtml#afaf029667f299587a52ba9c8de11edfa" title="Returns the number of a specific character in a given string.">NumChar</a>( fmt, <span class="stringliteral">&quot;%&quot;</span> ) ) <span class="comment">// if narg == 1 invocation was func( flags, string )</span>
    {
        bitset&lt;CFG_MEM_MAX_BITSET&gt; eflags;

        eflags.set( <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88a3953ba936b7fd0b7cbc726e534c63197">UTILS_TYPE_ERROR</a> );
        <a class="code" href="utils_8h.xhtml#acf49e3634b60414304a9adfc79e02adb">Logger</a>( eflags, <span class="stringliteral">&quot;Number of arguments (%lu) did not match number of format specifiers (%lu) at: %s&quot;</span>, narg, size, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( caller ) );
        <span class="keywordflow">return</span> output = <span class="stringliteral">&quot;&quot;</span>;
    }

    va_copy( args, val );
    size = vsnprintf( NULL, 0, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( fmt ), args );
    va_end( args );

    va_copy( args, val );
    buf.resize( size + 1 );
    vsnprintf( &amp;buf[0], ( size + 1 ), <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( fmt ), args );
    va_end( args );

    <span class="keywordflow">return</span> output = &amp;buf[0];
}
</pre></div>
<p><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceUtils_a070c642e01b4b1d2ded94e234d32f65e_cgraph.svg" width="336" height="94"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

<p><div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceUtils_a070c642e01b4b1d2ded94e234d32f65e_icgraph.svg" width="366" height="94"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a33e08ea185b71aab494d83322ad3cd53"></a><!-- doxytag: member="Utils::_FormatString" ref="a33e08ea185b71aab494d83322ad3cd53" args="(const uint_t &amp;narg, const bitset&lt; CFG_MEM_MAX_BITSET &gt; &amp;flags, const string &amp;caller, const string &amp;fmt,...)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const string <a class="el" href="namespaceUtils.xhtml#a33e08ea185b71aab494d83322ad3cd53">Utils::_FormatString</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a> &amp;&#160;</td>
          <td class="paramname"><em>narg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bitset&lt; <a class="el" href="config_8h.xhtml#a67bd2c66766c9c7f481025398b42dadb">CFG_MEM_MAX_BITSET</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>caller</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>fmt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>...</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">narg</td><td>A <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> variable of the total number of arguments passed. Handled automatically. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">flags</td><td>Any number of flags from <a class="el" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88">UTILS_OPTS</a> to control output formatting and options. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">caller</td><td>A string value containing the calling function. Handled automatically. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fmt</td><td>A string value containing a printf-style format string. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">...</td><td>A variable arguments list to populate fmt with. </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt><b>Return values:</b></dt><dd>
  <table class="retval">
    <tr><td class="paramname">string</td><td>A printf-style formatted string. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utils_8cpp_source.xhtml#l00102">102</a> of file <a class="el" href="utils_8cpp_source.xhtml">utils.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( uflags );
    va_list args;
    <span class="keywordtype">string</span> output;

    <span class="keywordflow">if</span> ( fmt.empty() )
    {
        <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( uflags, <span class="stringliteral">&quot;Utils::_FormatString()-&gt; called with empty fmt&quot;</span> );
        <span class="keywordflow">return</span> output;
    }

    va_start( args, fmt );
    output = <a class="code" href="namespaceUtils.xhtml#a070c642e01b4b1d2ded94e234d32f65e" title="This is the printf-style string formatter. It should not be invoked directly, but rather by using Uti...">__FormatString</a>( narg, flags, caller, fmt, args );
    va_end( args );

    <span class="keywordflow">return</span> output;
}
</pre></div>
<p><div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceUtils_a33e08ea185b71aab494d83322ad3cd53_cgraph.svg" width="534" height="94"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="aa2ac8bf1bb304bab8f29829ec30af243"></a><!-- doxytag: member="Utils::_Logger" ref="aa2ac8bf1bb304bab8f29829ec30af243" args="(const uint_t &amp;narg, const bitset&lt; CFG_MEM_MAX_BITSET &gt; &amp;flags, const string &amp;caller, const string &amp;fmt,...)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const void <a class="el" href="namespaceUtils.xhtml#aa2ac8bf1bb304bab8f29829ec30af243">Utils::_Logger</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a> &amp;&#160;</td>
          <td class="paramname"><em>narg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bitset&lt; <a class="el" href="config_8h.xhtml#a67bd2c66766c9c7f481025398b42dadb">CFG_MEM_MAX_BITSET</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>caller</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>fmt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>...</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">narg</td><td>A <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> variable of the total number of arguments passed. Handled automatically. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">flags</td><td>Any number of flags from <a class="el" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88">UTILS_OPTS</a> to control output formatting and options. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">caller</td><td>A string value containing the calling function. Handled automatically. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fmt</td><td>A string value containing a printf-style format string. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">...</td><td>A variable arguments list to populate fmt with. </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt><b>Return values:</b></dt><dd>
  <table class="retval">
    <tr><td class="paramname">string</td><td>A printf-style formatted string. </td></tr>
  </table>
  </dd>
</dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000003">Todo:</a></b></dt><dd>Add monitor channel support </dd></dl>

<p>Definition at line <a class="el" href="utils_8cpp_source.xhtml#l00184">184</a> of file <a class="el" href="utils_8cpp_source.xhtml">utils.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( uflags );
    va_list args;
    <span class="keywordtype">string</span> pre, post, output;
    <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> i = 0;

    <span class="keywordflow">if</span> ( fmt.empty() )
    {
        <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( uflags, <span class="stringliteral">&quot;Utils::_Logger()-&gt; called with empty fmt&quot;</span> );
        <span class="keywordflow">return</span>;
    }

    va_start( args, fmt );
    output = <a class="code" href="namespaceUtils.xhtml#a070c642e01b4b1d2ded94e234d32f65e" title="This is the printf-style string formatter. It should not be invoked directly, but rather by using Uti...">__FormatString</a>( narg, flags, caller, fmt, args );
    va_end( args );

    <span class="keywordflow">if</span> ( output.empty() )
        <span class="keywordflow">return</span>;

    <span class="comment">// prepend timestamp</span>
    pre = <a class="code" href="namespaceUtils.xhtml#aa3855eafe3e4898c743bc47cdc962a4a" title="Returns a given time as a string.">StrTime</a>( <a class="code" href="namespaceUtils.xhtml#adbb91eecf7e80e6e97b3ebe38123cc12" title="Returns the current system time.">CurrentTime</a>() );
    pre.append( <span class="stringliteral">&quot; :: &quot;</span> );

    <span class="keywordflow">for</span> ( i = 0; i &lt; <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88aa435dc1cf64950a334aba3ae322dc7e3">MAX_UTILS</a>; i++ )
    {
        <span class="keywordflow">if</span> ( flags.test( i ) )
        {
            <span class="keywordflow">switch</span>( i )
            {
                <span class="keywordflow">case</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88a285bb6b32d7a114b3103822c8ba11914">UTILS_DEBUG</a>: <span class="comment">//output caller</span>
                    post.append( <span class="stringliteral">&quot; [&quot;</span> );
                    post.append( caller );
                    post.append( <span class="stringliteral">&quot;]&quot;</span> );
                <span class="keywordflow">break</span>;
                <span class="keywordflow">case</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88a7d4a5f7891869a8964c9f3be6ad4fb03">UTILS_RAW</a>: <span class="comment">//no extraneous data applied</span>
                    pre.clear();
                    post.clear();
                    i = <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88aa435dc1cf64950a334aba3ae322dc7e3">MAX_UTILS</a>;
                <span class="keywordflow">break</span>;
                <span class="keywordflow">case</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88a3953ba936b7fd0b7cbc726e534c63197">UTILS_TYPE_ERROR</a>: <span class="comment">//so fancy!</span>
                    pre.append( <a class="code" href="config_8h.xhtml#ab1422261ac78a78462c06713ccb88155" title="String to prepend to logs flagged UTILS_TYPE_ERROR.">CFG_STR_UTILS_ERROR</a> );
                <span class="keywordflow">break</span>;
                <span class="keywordflow">case</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88af08cecf6f2c8ca5d3c5e4202a8450a92">UTILS_TYPE_INFO</a>: <span class="comment">//so fancy!</span>
                    pre.append( <a class="code" href="config_8h.xhtml#aa5d991baf2e5165be5c3f1a1a53eacd6" title="String to prepend to logs flagged UTILS_TYPE_INFO.">CFG_STR_UTILS_INFO</a> );
                <span class="keywordflow">break</span>;
                <span class="keywordflow">case</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88ad9f4e83dec6fdf793451e709fb5d9509">UTILS_TYPE_SOCKET</a>: <span class="comment">//so fancy!</span>
                    pre.append( <a class="code" href="config_8h.xhtml#ac38f0f1beed2da9e2c6e0210da5ba57f" title="String to prepend to logs flagged UTILS_TYPE_SOCKET.">CFG_STR_UTILS_SOCKET</a> );
                <span class="keywordflow">break</span>;
                <span class="keywordflow">default</span>: <span class="keywordflow">break</span>;
            }
        }
    }

    clog &lt;&lt; pre &lt;&lt; output &lt;&lt; post &lt;&lt; endl;
    <span class="keywordflow">return</span>;
}
</pre></div>
<p><div id="dynsection-3" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceUtils_aa2ac8bf1bb304bab8f29829ec30af243_cgraph.svg" width="494" height="174"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="adbb91eecf7e80e6e97b3ebe38123cc12"></a><!-- doxytag: member="Utils::CurrentTime" ref="adbb91eecf7e80e6e97b3ebe38123cc12" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const timeval <a class="el" href="namespaceUtils.xhtml#adbb91eecf7e80e6e97b3ebe38123cc12">Utils::CurrentTime</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="retval"><dt><b>Return values:</b></dt><dd>
  <table class="retval">
    <tr><td class="paramname">timeval</td><td>A timeval struct filled with the current system time. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utils_8cpp_source.xhtml#l00037">37</a> of file <a class="el" href="utils_8cpp_source.xhtml">utils.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
    timeval now;

    <span class="keywordflow">if</span> ( ::gettimeofday( &amp;now, NULL ) &lt; 0 )
    {
        <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Utils::CurrentTime()-&gt;&quot;</span> );
        <span class="keywordflow">return</span> timeval();
    }

    <span class="keywordflow">return</span> now;
}
</pre></div>
<p><div id="dynsection-4" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceUtils_adbb91eecf7e80e6e97b3ebe38123cc12_icgraph.svg" width="648" height="195"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a35029e6e20697c4fef5121040892e144"></a><!-- doxytag: member="Utils::DelSpaces" ref="a35029e6e20697c4fef5121040892e144" args="(const T &amp;t)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const string <a class="el" href="namespaceUtils.xhtml#a35029e6e20697c4fef5121040892e144">Utils::DelSpaces</a> </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">t</td><td>Any type of string to remove whitespace from. </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt><b>Return values:</b></dt><dd>
  <table class="retval">
    <tr><td class="paramname">string</td><td>A string with all whitespace characters removed. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utils_8h_source.xhtml#l00049">49</a> of file <a class="el" href="utils_8h_source.xhtml">utils.h</a>.</p>
<div class="fragment"><pre class="fragment">    {
        <span class="keywordtype">string</span> output( t );

        output.erase( remove_if( output.begin(), output.end(), ::isspace ), output.end() );

        <span class="keywordflow">return</span> output;
    }
</pre></div>
</div>
</div>
<a class="anchor" id="a405af6e04f92e289f5be1f8ae24a78ee"></a><!-- doxytag: member="Utils::DiffTime" ref="a405af6e04f92e289f5be1f8ae24a78ee" args="(const timeval &amp;prev, const timeval &amp;current, const uint_t &amp;granularity)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a> <a class="el" href="namespaceUtils.xhtml#a405af6e04f92e289f5be1f8ae24a78ee">Utils::DiffTime</a> </td>
          <td>(</td>
          <td class="paramtype">const timeval &amp;&#160;</td>
          <td class="paramname"><em>prev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const timeval &amp;&#160;</td>
          <td class="paramname"><em>current</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a> &amp;&#160;</td>
          <td class="paramname"><em>granularity</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">prev</td><td>A timeval of the beginning time. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">current</td><td>A timeval of the current, or end time. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">granularity</td><td>A <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> variable specified as a UTILS_TIME value from <a class="el" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88">UTILS_OPTS</a>. </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt><b>Return values:</b></dt><dd>
  <table class="retval">
    <tr><td class="paramname">uint_t</td><td>The difference between prev and current in units granularity. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utils_8cpp_source.xhtml#l00058">58</a> of file <a class="el" href="utils_8cpp_source.xhtml">utils.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">switch</span> ( granularity )
    {
        <span class="keywordflow">case</span>  <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88ae8ea1ef3caec7348d521d686adcfbfff">UTILS_TIME_S</a>: <span class="keywordflow">return</span> ( current.tv_sec - prev.tv_sec );
        <span class="keywordflow">case</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88ab80ef2c700675085764563f89553686d">UTILS_TIME_MS</a>: <span class="keywordflow">return</span> ( current.tv_usec - prev.tv_usec ) / 1000;
        <span class="keywordflow">case</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88aee1cb989b30c560f341cf31b44f1f64d">UTILS_TIME_US</a>:
                   <span class="keywordflow">default</span>: <span class="keywordflow">return</span> ( current.tv_usec - prev.tv_usec );
    }
}
</pre></div>
<p><div id="dynsection-5" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-5-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-5-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-5-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceUtils_a405af6e04f92e289f5be1f8ae24a78ee_icgraph.svg" width="622" height="40"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="addb4a550d4405e6351e52a275fae8107"></a><!-- doxytag: member="Utils::DirPath" ref="addb4a550d4405e6351e52a275fae8107" args="(const string &amp;directory, const string &amp;file, const string &amp;ext=&quot;&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const string <a class="el" href="namespaceUtils.xhtml#addb4a550d4405e6351e52a275fae8107">Utils::DirPath</a> </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>directory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>ext</em> = <code>&quot;&quot;</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">directory</td><td>The top level directory build the path from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>The file to build the path from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ext</td><td>Optionally replaces the file extension with this. </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt><b>Return values:</b></dt><dd>
  <table class="retval">
    <tr><td class="paramname">string</td><td>A string consisting of directory/file.ext. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utils_8cpp_source.xhtml#l00076">76</a> of file <a class="el" href="utils_8cpp_source.xhtml">utils.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">string</span> path( directory );

    path.append( <span class="stringliteral">&quot;/&quot;</span> );

    <span class="keywordflow">if</span> ( !ext.empty() )
    {
        path.append( file.substr( 0, file.find_last_of( <span class="stringliteral">&quot;.&quot;</span> ) + 1 ) );
        path.append( ext );
    }
    <span class="keywordflow">else</span>
        path.append( file );

    <span class="keywordflow">return</span> path;
}
</pre></div>
<p><div id="dynsection-6" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-6-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-6-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-6-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceUtils_addb4a550d4405e6351e52a275fae8107_icgraph.svg" width="100%" height="110"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a303e8afc983db3b483fb450a1c499c1e"></a><!-- doxytag: member="Utils::iDirectory" ref="a303e8afc983db3b483fb450a1c499c1e" args="(const string &amp;dir)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const bool <a class="el" href="namespaceUtils.xhtml#a303e8afc983db3b483fb450a1c499c1e">Utils::iDirectory</a> </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>dir</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dir</td><td>A string containing the file path to be checked. </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt><b>Return values:</b></dt><dd>
  <table class="retval">
    <tr><td class="paramname">false</td><td>Returned if the file path received in dir is not of type directory or an error occurs during stat. </td></tr>
    <tr><td class="paramname">true</td><td>Returned if the file path received in dir is of type directory. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utils_8cpp_source.xhtml#l00350">350</a> of file <a class="el" href="utils_8cpp_source.xhtml">utils.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
    <span class="keyword">struct </span>stat dir_info;

    <span class="keywordflow">if</span> ( ::stat( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( dir ), &amp;dir_info ) &lt; 0 )
    {
        <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Utils::iDirectory()-&gt;stat()-&gt;&quot;</span> );
        <span class="keywordflow">return</span> <span class="keyword">false</span>;
    }

    <span class="keywordflow">if</span> ( !S_ISDIR( dir_info.st_mode ) )
        <span class="keywordflow">return</span> <span class="keyword">false</span>;

    <span class="keywordflow">return</span> <span class="keyword">true</span>;
}
</pre></div>
<p><div id="dynsection-7" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-7-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-7-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-7-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceUtils_a303e8afc983db3b483fb450a1c499c1e_icgraph.svg" width="100%" height="60"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a7d40818a602fb21db4b4f0917705f85b"></a><!-- doxytag: member="Utils::iFile" ref="a7d40818a602fb21db4b4f0917705f85b" args="(const string &amp;file)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const bool <a class="el" href="namespaceUtils.xhtml#a7d40818a602fb21db4b4f0917705f85b">Utils::iFile</a> </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>file</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>A string containing the file path to be checked. </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt><b>Return values:</b></dt><dd>
  <table class="retval">
    <tr><td class="paramname">false</td><td>Returned if the file path received in file is not of type file or an error occurs during stat. </td></tr>
    <tr><td class="paramname">true</td><td>Returned if the file path receievd in file is of type file. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utils_8cpp_source.xhtml#l00373">373</a> of file <a class="el" href="utils_8cpp_source.xhtml">utils.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
    <span class="keyword">struct </span>stat dir_info;

    <span class="keywordflow">if</span> ( ::stat( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( file ), &amp;dir_info ) &lt; 0 )
    {
        <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Utils::iFile()-&gt;stat()-&gt;&quot;</span> );
        <span class="keywordflow">return</span> <span class="keyword">false</span>;
    }

    <span class="keywordflow">if</span> ( !S_ISREG( dir_info.st_mode ) )
        <span class="keywordflow">return</span> <span class="keyword">false</span>;

    <span class="keywordflow">return</span> <span class="keyword">true</span>;
}
</pre></div>
<p><div id="dynsection-8" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-8-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-8-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-8-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceUtils_a7d40818a602fb21db4b4f0917705f85b_icgraph.svg" width="100%" height="60"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a47aae40aead5b696e927fb0cdd336442"></a><!-- doxytag: member="Utils::iNumber" ref="a47aae40aead5b696e927fb0cdd336442" args="(const string &amp;input)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const bool <a class="el" href="namespaceUtils.xhtml#a47aae40aead5b696e927fb0cdd336442">Utils::iNumber</a> </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>input</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>A string to check for numerical values. </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt><b>Return values:</b></dt><dd>
  <table class="retval">
    <tr><td class="paramname">false</td><td>Returned if input is empty or the input contains non-numerical values. </td></tr>
    <tr><td class="paramname">true</td><td>Returned if input contains only numerical values. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utils_8cpp_source.xhtml#l00396">396</a> of file <a class="el" href="utils_8cpp_source.xhtml">utils.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
    <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> i = 0;

    <span class="keywordflow">if</span> ( input.empty() )
    {
        <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::iNumber()-&gt; called with empty input&quot;</span> );
        <span class="keywordflow">return</span> <span class="keyword">false</span>;
    }

    <span class="keywordflow">for</span> ( i = 0; i &lt; input.length(); i++ )
        <span class="keywordflow">if</span> ( !isdigit( input[i] ) )
            <span class="keywordflow">return</span> <span class="keyword">false</span>;

    <span class="keywordflow">return</span> <span class="keyword">true</span>;
}
</pre></div>
<p><div id="dynsection-9" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-9-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-9-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-9-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceUtils_a47aae40aead5b696e927fb0cdd336442_icgraph.svg" width="230" height="40"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a158e1deb611937a6313e8683fe7db3fc"></a><!-- doxytag: member="Utils::iReadable" ref="a158e1deb611937a6313e8683fe7db3fc" args="(const string &amp;file)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const bool <a class="el" href="namespaceUtils.xhtml#a158e1deb611937a6313e8683fe7db3fc">Utils::iReadable</a> </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>file</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">file</td><td>A string containing the file path to be checked. </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt><b>Return values:</b></dt><dd>
  <table class="retval">
    <tr><td class="paramname">false</td><td>Returned if file does not exist or is not readable. </td></tr>
    <tr><td class="paramname">true</td><td>Returned if file exists and is readable. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utils_8cpp_source.xhtml#l00420">420</a> of file <a class="el" href="utils_8cpp_source.xhtml">utils.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
    ifstream ifile;
    <span class="keywordtype">bool</span> ret = <span class="keyword">false</span>;

    ifile.open( file, ifstream::in );

    <span class="keywordflow">if</span> ( ifile.fail() )
        ret = <span class="keyword">false</span>;
    <span class="keywordflow">else</span>
        ret = <span class="keyword">true</span>;

    ifile.close();

    <span class="keywordflow">return</span> ret;
}
</pre></div>
<p><div id="dynsection-10" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-10-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-10-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-10-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceUtils_a158e1deb611937a6313e8683fe7db3fc_icgraph.svg" width="100%" height="60"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="aba8fca9daa0f767d7f5af5e2b1d6b81d"></a><!-- doxytag: member="Utils::KeySet" ref="aba8fca9daa0f767d7f5af5e2b1d6b81d" args="(const bool &amp;igncase, bool &amp;found, const K &amp;keyd, const V &amp;valu, const string &amp;item, string &amp;loc)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class K , class V &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const void <a class="el" href="namespaceUtils.xhtml#aba8fca9daa0f767d7f5af5e2b1d6b81d">Utils::KeySet</a> </td>
          <td>(</td>
          <td class="paramtype">const bool &amp;&#160;</td>
          <td class="paramname"><em>igncase</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool &amp;&#160;</td>
          <td class="paramname"><em>found</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const K &amp;&#160;</td>
          <td class="paramname"><em>keyd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const V &amp;&#160;</td>
          <td class="paramname"><em>valu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>item</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string &amp;&#160;</td>
          <td class="paramname"><em>loc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">igncase</td><td>If true, performs case-insensitive matching. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">found</td><td>For loop control. If keyd == valu, set to true, otherwise false. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">keyd</td><td>A string or number that valu must match. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">valu</td><td>A string or number that is checked for a match against keyd. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">item</td><td>A string to be copied to to loc if keyd == valu. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">loc</td><td>A string to be assigned the value of item if keyd == valu. </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt><b>Return values:</b></dt><dd>
  <table class="retval">
    <tr><td class="paramname">void</td><td></td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utils_8h_source.xhtml#l00166">166</a> of file <a class="el" href="utils_8h_source.xhtml">utils.h</a>.</p>
<div class="fragment"><pre class="fragment">    {
        <span class="keywordtype">string</span> key( keyd );
        <span class="keywordtype">string</span> val( valu );

        <span class="keywordflow">if</span> ( igncase )
        {
            transform( key.begin(), key.end(), key.begin(), ::tolower );
            transform( val.begin(), val.end(), val.begin(), ::tolower );
        }

        <span class="keywordflow">if</span> ( key.compare( val ) == 0 )
        {
            loc = item;
            found = <span class="keyword">true</span>;

            <span class="keywordflow">return</span>;
        }

        <span class="keywordflow">return</span>;
    }
</pre></div>
</div>
</div>
<a class="anchor" id="a0aff3514e06faae8ed026c673efe002b"></a><!-- doxytag: member="Utils::KeySet" ref="a0aff3514e06faae8ed026c673efe002b" args="(const bool &amp;igncase, bool &amp;found, const K &amp;keyd, const V &amp;valu, const I &amp;item, L &amp;loc)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class K , class V , class I , class L &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const void <a class="el" href="namespaceUtils.xhtml#aba8fca9daa0f767d7f5af5e2b1d6b81d">Utils::KeySet</a> </td>
          <td>(</td>
          <td class="paramtype">const bool &amp;&#160;</td>
          <td class="paramname"><em>igncase</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool &amp;&#160;</td>
          <td class="paramname"><em>found</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const K &amp;&#160;</td>
          <td class="paramname"><em>keyd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const V &amp;&#160;</td>
          <td class="paramname"><em>valu</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const I &amp;&#160;</td>
          <td class="paramname"><em>item</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">L &amp;&#160;</td>
          <td class="paramname"><em>loc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">igncase</td><td>If true, performs case-insensitive matching. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">found</td><td>For loop control. If keyd == valu, set to true, otherwise false. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">keyd</td><td>A string or number that valu must match. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">valu</td><td>A string or number that is checked for a match against keyd. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">item</td><td>Any string, digit, etc to be copied to to loc if keyd == valu. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">loc</td><td>Any string, digit, etc to be assigned the value of item if keyd == valu. </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt><b>Return values:</b></dt><dd>
  <table class="retval">
    <tr><td class="paramname">void</td><td></td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utils_8h_source.xhtml#l00197">197</a> of file <a class="el" href="utils_8h_source.xhtml">utils.h</a>.</p>
<div class="fragment"><pre class="fragment">    {
        <span class="keywordtype">string</span> key( keyd );
        <span class="keywordtype">string</span> val( valu );

        <span class="keywordflow">if</span> ( igncase )
        {
            transform( key.begin(), key.end(), key.begin(), ::tolower );
            transform( val.begin(), val.end(), val.begin(), ::tolower );
        }

        <span class="keywordflow">if</span> ( key.compare( val ) == 0 )
        {
            <span class="keywordtype">string</span> tf( item );

            <span class="comment">// Allow bools be any of: true / 1 or false / 0</span>
            transform( tf.begin(), tf.end(), tf.begin(), ::tolower );

            <span class="keywordflow">if</span> ( tf.compare( <span class="stringliteral">&quot;true&quot;</span> ) == 0 )
                loc = <span class="keyword">true</span>;
            <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( tf.compare( <span class="stringliteral">&quot;false&quot;</span> ) == 0 )
                loc = <span class="keyword">false</span>;
            <span class="keywordflow">else</span>
                stringstream( item ) &gt;&gt; loc;
            found = <span class="keyword">true</span>;

            <span class="keywordflow">return</span>;
        }

        <span class="keywordflow">return</span>;
    }
</pre></div>
</div>
</div>
<a class="anchor" id="a4a4d3dfd2ddb691bc5bcff82252c058b"></a><!-- doxytag: member="Utils::KeyValue" ref="a4a4d3dfd2ddb691bc5bcff82252c058b" args="(K &amp;key, V &amp;val, const I &amp;item)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class K , class V , class I &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const bool <a class="el" href="namespaceUtils.xhtml#a4a4d3dfd2ddb691bc5bcff82252c058b">Utils::KeyValue</a> </td>
          <td>(</td>
          <td class="paramtype">K &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">V &amp;&#160;</td>
          <td class="paramname"><em>val</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const I &amp;&#160;</td>
          <td class="paramname"><em>item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>The object to be populated with the key extracted from item. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>The object to be populated with the value extracted from item. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">item</td><td>A char or string in the form of key=value to extract data from. </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt><b>Return values:</b></dt><dd>
  <table class="retval">
    <tr><td class="paramname">false</td><td>Returned if item does not contain an equal sign. </td></tr>
    <tr><td class="paramname">true</td><td>Returned if data was successfully extracted from item. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utils_8h_source.xhtml#l00140">140</a> of file <a class="el" href="utils_8h_source.xhtml">utils.h</a>.</p>
<div class="fragment"><pre class="fragment">    {
        <span class="keywordtype">size_t</span> loc = 0;

        <span class="keywordflow">if</span> ( ( loc = item.find( <span class="stringliteral">&quot;=&quot;</span> ) ) == string::npos )
            <span class="keywordflow">return</span> <span class="keyword">false</span>;

        key = item.substr( 0, loc - 1 );
        val = item.substr( loc + 1, item.length() );
        loc = key.find_last_not_of( <span class="stringliteral">&quot; &quot;</span> );
        key.erase( loc + 1 );
        loc = val.find_first_not_of( <span class="stringliteral">&quot; &quot;</span> );
        val.erase( 0, loc );

        <span class="keywordflow">return</span> <span class="keyword">true</span>;
    }
</pre></div>
</div>
</div>
<a class="anchor" id="a014607a95c6d01ee99564479b3620ee7"></a><!-- doxytag: member="Utils::ListDirectory" ref="a014607a95c6d01ee99564479b3620ee7" args="(const string &amp;dir, const bool &amp;recursive, multimap&lt; bool, string &gt; &amp;output, uint_t &amp;dir_close, uint_t &amp;dir_open)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const multimap&lt; bool, string &gt; <a class="el" href="namespaceUtils.xhtml#a014607a95c6d01ee99564479b3620ee7">Utils::ListDirectory</a> </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>dir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool &amp;&#160;</td>
          <td class="paramname"><em>recursive</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">multimap&lt; bool, string &gt; &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a> &amp;&#160;</td>
          <td class="paramname"><em>dir_close</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a> &amp;&#160;</td>
          <td class="paramname"><em>dir_open</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dir</td><td>The filesystem path to search. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">recursive</td><td>If tue, the function will continue to recursively list folders multi-layers deep rather than top level only. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">output</td><td>A multimap&lt;bool,string&gt; consisting of a boolean value denoting either <a class="el" href="enum_8h.xhtml#aa51282a877957eaf36ac9e8416145a53">UTILS_IS_DIRECTORY</a> or <a class="el" href="enum_8h.xhtml#a9325070b1daf70dbe43f7fb9a341aaf2">UTILS_IS_FILE</a>. If recursive, this will be updated on each pass. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">dir_close</td><td>A <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> pointing to the total directory opened count on a <a class="el" href="classServer.xhtml" title="The core of the game server.">Server</a> object. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">dir_open</td><td>A <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> pointing to the total directory closed count on a <a class="el" href="classServer.xhtml" title="The core of the game server.">Server</a> object. </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt><b>Return values:</b></dt><dd>
  <table class="retval">
    <tr><td class="paramname">multimap&lt;bool,string&gt;</td><td>A multimap&lt;bool,string&gt; consisting of a boolean value denoting either <a class="el" href="enum_8h.xhtml#aa51282a877957eaf36ac9e8416145a53">UTILS_IS_DIRECTORY</a> or <a class="el" href="enum_8h.xhtml#a9325070b1daf70dbe43f7fb9a341aaf2">UTILS_IS_FILE</a>. If recursive, this will be updated on each pass. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utils_8cpp_source.xhtml#l00448">448</a> of file <a class="el" href="utils_8cpp_source.xhtml">utils.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
    DIR* directory = NULL;
    dirent* entry = NULL;
    <span class="keywordtype">string</span> ifile, idir;

    <span class="keywordflow">if</span> ( ( directory = ::opendir( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( dir ) ) ) == NULL )
    {
        <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Utils::OpenDirectory()-&gt;opendir()-&gt; returned NULL for dir: %s&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( dir ) );
        <span class="keywordflow">return</span> output;
    }

    dir_open++;
    idir = dir;

    <span class="comment">// Ensure a trailing slash is present to properly recurse</span>
    <span class="keywordflow">if</span> ( idir.compare( dir.length() - 1, 1, <span class="stringliteral">&quot;/&quot;</span> ) != 0 )
        idir.append( <span class="stringliteral">&quot;/&quot;</span> );

    <span class="keywordflow">while</span> ( ( entry = ::readdir( directory ) ) != NULL )
    {
        ifile = entry-&gt;d_name;

        <span class="comment">// Skip over the unwanteds</span>
        <span class="keywordflow">if</span> ( ifile.compare( <span class="stringliteral">&quot;.&quot;</span> ) == 0 || ifile.compare( <span class="stringliteral">&quot;..&quot;</span> ) == 0 )
            <span class="keywordflow">continue</span>;

        <span class="keywordflow">if</span> ( <a class="code" href="namespaceUtils.xhtml#a303e8afc983db3b483fb450a1c499c1e" title="Determines if a file path is a directory or file on disk.">iDirectory</a>( idir + ifile ) )
            output.insert( pair&lt;bool,string&gt;( <a class="code" href="enum_8h.xhtml#aa51282a877957eaf36ac9e8416145a53">UTILS_IS_DIRECTORY</a>, ifile ) );
        <span class="keywordflow">else</span>
            output.insert( pair&lt;bool,string&gt;( <a class="code" href="enum_8h.xhtml#a9325070b1daf70dbe43f7fb9a341aaf2">UTILS_IS_FILE</a>, ifile ) );

        <span class="comment">// Only recurse if another directory is found, otherwise a file was found, so skip it</span>
        <span class="keywordflow">if</span> ( <a class="code" href="namespaceUtils.xhtml#a303e8afc983db3b483fb450a1c499c1e" title="Determines if a file path is a directory or file on disk.">iDirectory</a>( idir + ifile ) &amp;&amp; recursive )
            <a class="code" href="namespaceUtils.xhtml#a014607a95c6d01ee99564479b3620ee7" title="Return a multimap of a specified directory tree on disk.">ListDirectory</a>( idir + ifile, recursive, output, dir_close, dir_open );
    }

    <span class="keywordflow">if</span> ( ::closedir( directory ) &lt; 0 )
        <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Utils::OpenDir()-&gt;closedir()-&gt;&quot;</span> );
    <span class="keywordflow">else</span>
        dir_close++;

    <span class="keywordflow">return</span> output;
}
</pre></div>
<p><div id="dynsection-11" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-11-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-11-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-11-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceUtils_a014607a95c6d01ee99564479b3620ee7_cgraph.svg" width="318" height="40"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

<p><div id="dynsection-12" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-12-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-12-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-12-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceUtils_a014607a95c6d01ee99564479b3620ee7_icgraph.svg" width="648" height="40"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a9b70f9dd0af906c806695b35488e778f"></a><!-- doxytag: member="Utils::Lower" ref="a9b70f9dd0af906c806695b35488e778f" args="(const T &amp;t)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const string <a class="el" href="namespaceUtils.xhtml#a9b70f9dd0af906c806695b35488e778f">Utils::Lower</a> </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">t</td><td>Any type of string to convert to lowercase. </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt><b>Return values:</b></dt><dd>
  <table class="retval">
    <tr><td class="paramname">string</td><td>A string converted to all lowercase letters. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utils_8h_source.xhtml#l00062">62</a> of file <a class="el" href="utils_8h_source.xhtml">utils.h</a>.</p>
<div class="fragment"><pre class="fragment">    {
        <span class="keywordtype">string</span> output( t );

        transform( output.begin(), output.end(), output.begin(), ::tolower );

        <span class="keywordflow">return</span> output;
    }
</pre></div>
<p><div id="dynsection-13" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-13-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-13-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-13-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceUtils_a9b70f9dd0af906c806695b35488e778f_icgraph.svg" width="100%" height="110"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="afaf029667f299587a52ba9c8de11edfa"></a><!-- doxytag: member="Utils::NumChar" ref="afaf029667f299587a52ba9c8de11edfa" args="(const string &amp;input, const string &amp;item)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a> <a class="el" href="namespaceUtils.xhtml#afaf029667f299587a52ba9c8de11edfa">Utils::NumChar</a> </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>A string value to search. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">item</td><td>The character to search for within input. </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt><b>Return values:</b></dt><dd>
  <table class="retval">
    <tr><td class="paramname">uint_t</td><td>The total count of item within input. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utils_8cpp_source.xhtml#l00250">250</a> of file <a class="el" href="utils_8cpp_source.xhtml">utils.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
    <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> amount = 0, i = 0;

    <span class="keywordflow">if</span> ( input.empty() )
    {
        <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::NumChar()-&gt; called with empty input&quot;</span> );
        <span class="keywordflow">return</span> amount;
    }

    <span class="keywordflow">for</span> ( i = 0; i &lt; input.length(); i++ )
        <span class="keywordflow">if</span> ( input[i] == item[0] )
            amount++;

    <span class="keywordflow">return</span> amount;
}
</pre></div>
<p><div id="dynsection-14" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-14-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-14-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-14-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceUtils_afaf029667f299587a52ba9c8de11edfa_icgraph.svg" width="534" height="94"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a594756861a60d256d31db7bb34ea70de"></a><!-- doxytag: member="Utils::String" ref="a594756861a60d256d31db7bb34ea70de" args="(const T &amp;t)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const string <a class="el" href="namespaceUtils.xhtml#a594756861a60d256d31db7bb34ea70de">Utils::String</a> </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">t</td><td>Any type of data that can be represented as an alphanumeric string. </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt><b>Return values:</b></dt><dd>
  <table class="retval">
    <tr><td class="paramname">string</td><td>A string containing the converted data. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utils_8h_source.xhtml#l00088">88</a> of file <a class="el" href="utils_8h_source.xhtml">utils.h</a>.</p>
<div class="fragment"><pre class="fragment">    {
        stringstream ss( t );

        <span class="keywordflow">return</span> ss.str();
    }
</pre></div>
</div>
</div>
<a class="anchor" id="a8c70e85acdb1549aa4cd3a16b8d8d9cf"></a><!-- doxytag: member="Utils::StrNewlines" ref="a8c70e85acdb1549aa4cd3a16b8d8d9cf" args="(const string &amp;input)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const vector&lt; string &gt; <a class="el" href="namespaceUtils.xhtml#a8c70e85acdb1549aa4cd3a16b8d8d9cf">Utils::StrNewlines</a> </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>input</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>A string to split on newline characters. </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt><b>Return values:</b></dt><dd>
  <table class="retval">
    <tr><td class="paramname">vector&lt;string&gt;</td><td>A vector of strings that were split on the linebreaks detected from input. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utils_8cpp_source.xhtml#l00273">273</a> of file <a class="el" href="utils_8cpp_source.xhtml">utils.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );

    <span class="keywordflow">if</span> ( input.empty() )
    {
        <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::StrNewlines()-&gt; called with empty input&quot;</span> );
        <span class="keywordflow">return</span> vector&lt;string&gt;();
    }

    stringstream ss( input );
    <span class="keywordtype">string</span> line;
    vector&lt;string&gt; output;

    <span class="keywordflow">while</span> ( getline( ss, line ) )
    {
        <span class="comment">// Strip the newline off the end</span>
        line.resize( line.length() - 1 );
        <span class="keywordflow">if</span> ( !line.empty() )
            output.push_back( line );
    }

    <span class="keywordflow">return</span> output;
}
</pre></div>
<p><div id="dynsection-15" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-15-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-15-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-15-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceUtils_a8c70e85acdb1549aa4cd3a16b8d8d9cf_icgraph.svg" width="100%" height="60"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="aa3855eafe3e4898c743bc47cdc962a4a"></a><!-- doxytag: member="Utils::StrTime" ref="aa3855eafe3e4898c743bc47cdc962a4a" args="(const timeval &amp;now)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const string <a class="el" href="namespaceUtils.xhtml#aa3855eafe3e4898c743bc47cdc962a4a">Utils::StrTime</a> </td>
          <td>(</td>
          <td class="paramtype">const timeval &amp;&#160;</td>
          <td class="paramname"><em>now</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">now</td><td>A timeval to be formatted into a string. </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt><b>Return values:</b></dt><dd>
  <table class="retval">
    <tr><td class="paramname">string</td><td>A string value containing the human readable form of the contents of now. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utils_8cpp_source.xhtml#l00303">303</a> of file <a class="el" href="utils_8cpp_source.xhtml">utils.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
    <span class="keywordtype">string</span> output;

    <span class="keywordflow">if</span> ( ( output = ::ctime( &amp;now.tv_sec ) ).empty() )
    {
        <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::CurrentTime()-&gt;ctime()-&gt; returned NULL&quot;</span> );
        <span class="keywordflow">return</span> output;
    }

    <span class="comment">// Strip the newline off the end</span>
    output.resize( output.length() - 1 );

    <span class="keywordflow">return</span> output;
}
</pre></div>
<p><div id="dynsection-16" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-16-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-16-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-16-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceUtils_aa3855eafe3e4898c743bc47cdc962a4a_icgraph.svg" width="278" height="40"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a498e31ec51c129ae9b68a20aa4e05c57"></a><!-- doxytag: member="Utils::StrTokens" ref="a498e31ec51c129ae9b68a20aa4e05c57" args="(const string &amp;input)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const vector&lt; string &gt; <a class="el" href="namespaceUtils.xhtml#a498e31ec51c129ae9b68a20aa4e05c57">Utils::StrTokens</a> </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>input</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>A string to split on space characters. </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt><b>Return values:</b></dt><dd>
  <table class="retval">
    <tr><td class="paramname">vector&lt;string&gt;</td><td>A vector of strings that were split on the spaces detected from input. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utils_8cpp_source.xhtml#l00325">325</a> of file <a class="el" href="utils_8cpp_source.xhtml">utils.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );

    <span class="keywordflow">if</span> ( input.empty() )
    {
        <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::StrTokens()-&gt; called with empty input&quot;</span> );
        <span class="keywordflow">return</span> vector&lt;string&gt;();
    }

    stringstream ss( input );
    istream_iterator&lt;string&gt; si( ss );
    istream_iterator&lt;string&gt; end;
    vector&lt;string&gt; output( si, end );

    <span class="keywordflow">return</span> output;
}
</pre></div>
<p><div id="dynsection-17" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-17-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-17-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-17-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceUtils_a498e31ec51c129ae9b68a20aa4e05c57_icgraph.svg" width="534" height="94"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a817d26eb6a3427ad3742fb3cb788d30e"></a><!-- doxytag: member="Utils::Upper" ref="a817d26eb6a3427ad3742fb3cb788d30e" args="(const T &amp;t)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const string <a class="el" href="namespaceUtils.xhtml#a817d26eb6a3427ad3742fb3cb788d30e">Utils::Upper</a> </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">t</td><td>Any type of string to convert to uppercase. </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt><b>Return values:</b></dt><dd>
  <table class="retval">
    <tr><td class="paramname">string</td><td>A string converted to all uppercase letters. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utils_8h_source.xhtml#l00075">75</a> of file <a class="el" href="utils_8h_source.xhtml">utils.h</a>.</p>
<div class="fragment"><pre class="fragment">    {
        <span class="keywordtype">string</span> output( t );

        transform( output.begin(), output.end(), output.begin(), ::toupper );

        <span class="keywordflow">return</span> output;
    }
</pre></div>
</div>
</div>
</div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Mon Nov 26 2012 18:07:13 for NAMS - Not Another MUD Server by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
