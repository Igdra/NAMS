<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>NAMS - Not Another MUD Server: h/utils.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.7.1 -->
<script type="text/javascript">
function hasClass(ele,cls) {
  return ele.className.match(new RegExp('(\\s|^)'+cls+'(\\s|$)'));
}

function addClass(ele,cls) {
  if (!this.hasClass(ele,cls)) ele.className += " "+cls;
}

function removeClass(ele,cls) {
  if (hasClass(ele,cls)) {
    var reg = new RegExp('(\\s|^)'+cls+'(\\s|$)');
    ele.className=ele.className.replace(reg,' ');
  }
}

function toggleVisibility(linkObj) {
 var base = linkObj.getAttribute('id');
 var summary = document.getElementById(base + '-summary');
 var content = document.getElementById(base + '-content');
 var trigger = document.getElementById(base + '-trigger');
 if ( hasClass(linkObj,'closed') ) {
   summary.style.display = 'none';
   content.style.display = 'block';
   trigger.src = 'open.png';
   removeClass(linkObj,'closed');
   addClass(linkObj,'opened');
 } else if ( hasClass(linkObj,'opened') ) {
   summary.style.display = 'block';
   content.style.display = 'none';
   trigger.src = 'closed.png';
   removeClass(linkObj,'opened');
   addClass(linkObj,'closed');
 }
 return false;
}
</script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<h1>h/utils.h</h1>  </div>
</div>
<div class="contents">
<a href="utils_8h.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/***************************************************************************</span>
<a name="l00002"></a>00002 <span class="comment"> * NAMS - Not Another MUD Server                                           *</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2012 Matthew Goff (matt@goff.cc) &lt;http://www.ackmud.net/&gt; *</span>
<a name="l00004"></a>00004 <span class="comment"> *                                                                         *</span>
<a name="l00005"></a>00005 <span class="comment"> * This program is free software: you can redistribute it and/or modify    *</span>
<a name="l00006"></a>00006 <span class="comment"> * it under the terms of the GNU General Public License as published by    *</span>
<a name="l00007"></a>00007 <span class="comment"> * the Free Software Foundation, either version 3 of the License, or       *</span>
<a name="l00008"></a>00008 <span class="comment"> * (at your option) any later version.                                     *</span>
<a name="l00009"></a>00009 <span class="comment"> *                                                                         *</span>
<a name="l00010"></a>00010 <span class="comment"> * This program is distributed in the hope that it will be useful,         *</span>
<a name="l00011"></a>00011 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of          *</span>
<a name="l00012"></a>00012 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *</span>
<a name="l00013"></a>00013 <span class="comment"> * GNU General Public License for more details.                            *</span>
<a name="l00014"></a>00014 <span class="comment"> *                                                                         *</span>
<a name="l00015"></a>00015 <span class="comment"> * You should have received a copy of the GNU General Public License       *</span>
<a name="l00016"></a>00016 <span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.   *</span>
<a name="l00017"></a>00017 <span class="comment"> ***************************************************************************/</span>
<a name="l00018"></a>00018 <span class="preprocessor">#ifndef DEC_UTILS_H</span>
<a name="l00019"></a>00019 <span class="preprocessor"></span><span class="preprocessor">#define DEC_UTILS_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;bitset&gt;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;cstdarg&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;cstdio&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;iterator&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;dirent.h&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;sys/stat.h&gt;</span>
<a name="l00029"></a>00029 
<a name="l00030"></a><a class="code" href="namespaceUtils.htm">00030</a> <span class="keyword">namespace </span>Utils {
<a name="l00031"></a>00031     <span class="comment">// Core</span>
<a name="l00032"></a><a class="code" href="namespaceUtils.htm#a13fa7041ab6558f7b99ae365953199de">00032</a>     <span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> U&gt; <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.htm#a13fa7041ab6558f7b99ae365953199de">DirPath</a>( <span class="keyword">const</span> T&amp; path, <span class="keyword">const</span> U&amp; file )
<a name="l00033"></a>00033     {
<a name="l00034"></a>00034         <span class="keywordtype">string</span> output = path;
<a name="l00035"></a>00035 
<a name="l00036"></a>00036         <span class="comment">// Ensure a trailing slash is present to properly recurse</span>
<a name="l00037"></a>00037         <span class="keywordflow">if</span> ( output.compare( output.length() - 1, 1, <span class="stringliteral">&quot;/&quot;</span> ) != 0 )
<a name="l00038"></a>00038             output += <span class="stringliteral">&quot;/&quot;</span>;
<a name="l00039"></a>00039 
<a name="l00040"></a>00040         <span class="comment">// Now append the first letter of the file recieved as a subdir</span>
<a name="l00041"></a>00041         output += file[0]; output += <span class="stringliteral">&quot;/&quot;</span>;
<a name="l00042"></a>00042 
<a name="l00043"></a>00043         <span class="comment">// Finally add the filename</span>
<a name="l00044"></a>00044         output += file;
<a name="l00045"></a>00045 
<a name="l00046"></a>00046         <span class="keywordflow">return</span> output;
<a name="l00047"></a>00047     }
<a name="l00048"></a><a class="code" href="namespaceUtils.htm#adb1d41147364faa1eb10d1d26a517d93">00048</a>     <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.htm#adb1d41147364faa1eb10d1d26a517d93">DelSpaces</a>( <span class="keyword">const</span> T&amp; t ) { <span class="keywordtype">string</span> output( t ); output.erase( remove_if( output.begin(), output.end(), ::isspace ), output.end() ); <span class="keywordflow">return</span> output; }
<a name="l00049"></a><a class="code" href="namespaceUtils.htm#abc7bb687b1fccdf6574b7dede970890a">00049</a>     <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.htm#abc7bb687b1fccdf6574b7dede970890a">Lower</a>( <span class="keyword">const</span> T&amp; t ) { stringstream ss; ss &lt;&lt; nouppercase &lt;&lt; t; <span class="keywordflow">return</span> ss.str(); }
<a name="l00050"></a><a class="code" href="namespaceUtils.htm#aac94062a40496c2a9a5a37f48db0587b">00050</a>     <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.htm#aac94062a40496c2a9a5a37f48db0587b">Upper</a>( <span class="keyword">const</span> T&amp; t ) { stringstream ss; ss &lt;&lt; uppercase &lt;&lt; t; <span class="keywordflow">return</span> ss.str(); }
<a name="l00051"></a><a class="code" href="namespaceUtils.htm#afdb65effd01a3f6032d9d78ebb295c9e">00051</a>     <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.htm#afdb65effd01a3f6032d9d78ebb295c9e">String</a>( <span class="keyword">const</span> T&amp; t ) { stringstream ss( t ); <span class="keywordflow">return</span> ss.str(); }
<a name="l00052"></a>00052     <span class="keyword">const</span> timeval <a class="code" href="namespaceUtils.htm#adbb91eecf7e80e6e97b3ebe38123cc12">CurrentTime</a>();
<a name="l00053"></a>00053     <span class="keyword">const</span> <a class="code" href="limits_8h.htm#a12a1e9b3ce141648783a82445d02b58d">uint_t</a> <a class="code" href="namespaceUtils.htm#a405af6e04f92e289f5be1f8ae24a78ee">DiffTime</a>( <span class="keyword">const</span> timeval&amp; prev, <span class="keyword">const</span> timeval&amp; current, <span class="keyword">const</span> <a class="code" href="limits_8h.htm#a12a1e9b3ce141648783a82445d02b58d">uint_t</a>&amp; granularity );
<a name="l00054"></a>00054     <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.htm#a33e08ea185b71aab494d83322ad3cd53">_FormatString</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.htm#a12a1e9b3ce141648783a82445d02b58d">uint_t</a>&amp; narg, <span class="keyword">const</span> bitset&lt;CFG_MEM_MAX_BITSET&gt;&amp; flags, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; caller, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; fmt, ... );
<a name="l00055"></a>00055     <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.htm#a070c642e01b4b1d2ded94e234d32f65e">__FormatString</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.htm#a12a1e9b3ce141648783a82445d02b58d">uint_t</a>&amp; narg, <span class="keyword">const</span> bitset&lt;CFG_MEM_MAX_BITSET&gt;&amp; flags, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; caller, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; fmt, va_list&amp; val );
<a name="l00056"></a><a class="code" href="utils_8h.htm#a1e42e9736fc6dc3c7450d100f4267a29">00056</a> <span class="preprocessor">    #define FormatString( flags, fmt, ... ) _FormatString( PP_NARG( __VA_ARGS__ ), flags, _caller_, fmt, ##__VA_ARGS__ )</span>
<a name="l00057"></a>00057 <span class="preprocessor"></span>    <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="namespaceUtils.htm#aa2ac8bf1bb304bab8f29829ec30af243">_Logger</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.htm#a12a1e9b3ce141648783a82445d02b58d">uint_t</a>&amp; narg, <span class="keyword">const</span> bitset&lt;CFG_MEM_MAX_BITSET&gt;&amp; flags, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; caller, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; fmt, ... );
<a name="l00058"></a><a class="code" href="utils_8h.htm#acf49e3634b60414304a9adfc79e02adb">00058</a> <span class="preprocessor">    #define Logger( flags, fmt, ... ) _Logger( PP_NARG( __VA_ARGS__ ), flags, _caller_, fmt, ##__VA_ARGS__ )</span>
<a name="l00059"></a>00059 <span class="preprocessor"></span>    <span class="keyword">const</span> <a class="code" href="limits_8h.htm#a12a1e9b3ce141648783a82445d02b58d">uint_t</a> <a class="code" href="namespaceUtils.htm#afaf029667f299587a52ba9c8de11edfa">NumChar</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; input, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; item );
<a name="l00060"></a>00060     <span class="keyword">const</span> vector&lt;string&gt; <a class="code" href="namespaceUtils.htm#a8c70e85acdb1549aa4cd3a16b8d8d9cf">StrNewlines</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; input );
<a name="l00061"></a>00061     <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.htm#aa3855eafe3e4898c743bc47cdc962a4a">StrTime</a>( <span class="keyword">const</span> timeval&amp; now );
<a name="l00062"></a>00062     <span class="keyword">const</span> vector&lt;string&gt; <a class="code" href="namespaceUtils.htm#a498e31ec51c129ae9b68a20aa4e05c57">StrTokens</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; input );
<a name="l00063"></a>00063 
<a name="l00064"></a>00064     <span class="comment">// Query</span>
<a name="l00065"></a>00065     <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.htm#a303e8afc983db3b483fb450a1c499c1e">iDirectory</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; dir );
<a name="l00066"></a>00066     <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.htm#a7d40818a602fb21db4b4f0917705f85b">iFile</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file );
<a name="l00067"></a>00067     <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.htm#a47aae40aead5b696e927fb0cdd336442">iNumber</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; input );
<a name="l00068"></a>00068 
<a name="l00069"></a>00069     <span class="comment">// Manipulate</span>
<a name="l00070"></a><a class="code" href="classUtils_1_1DeleteObject.htm">00070</a>     <span class="keyword">class </span><a class="code" href="classUtils_1_1DeleteObject.htm">DeleteObject</a>
<a name="l00071"></a>00071     {
<a name="l00072"></a>00072         <span class="keyword">public</span>:
<a name="l00073"></a><a class="code" href="classUtils_1_1DeleteObject.htm#ad6e4ae458d6a81b67c0e18d6d64c0985">00073</a>             <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="classUtils_1_1DeleteObject.htm#ad6e4ae458d6a81b67c0e18d6d64c0985">operator() </a>( <span class="keyword">const</span> T* ptr )<span class="keyword"> const </span>{ <span class="keyword">delete</span> ptr; }
<a name="l00074"></a>00074     };
<a name="l00075"></a><a class="code" href="namespaceUtils.htm#af108db174617d66d6635103994b77895">00075</a>     <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">class</span> V, <span class="keyword">class</span> I&gt; <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.htm#af108db174617d66d6635103994b77895">KeyValue</a>( K&amp; key, V&amp; val, <span class="keyword">const</span> I&amp; item )
<a name="l00076"></a>00076     {
<a name="l00077"></a>00077         <span class="keywordtype">size_t</span> loc = 0;
<a name="l00078"></a>00078 
<a name="l00079"></a>00079         <span class="keywordflow">if</span> ( ( loc = item.find( <span class="stringliteral">&quot;=&quot;</span> ) ) == string::npos )
<a name="l00080"></a>00080             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00081"></a>00081 
<a name="l00082"></a>00082         key = item.substr( 0, loc - 1 );
<a name="l00083"></a>00083         val = item.substr( loc + 1, item.length() );
<a name="l00084"></a>00084         loc = key.find_last_not_of( <span class="stringliteral">&quot; &quot;</span> );
<a name="l00085"></a>00085         key.erase( loc + 1 );
<a name="l00086"></a>00086         loc = val.find_first_not_of( <span class="stringliteral">&quot; &quot;</span> );
<a name="l00087"></a>00087         val.erase( 0, loc );
<a name="l00088"></a>00088 
<a name="l00089"></a>00089         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00090"></a>00090     }
<a name="l00091"></a><a class="code" href="namespaceUtils.htm#a4fec8844bf786b38a8eaebd822bafa05">00091</a>     <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">class</span> V&gt; <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="namespaceUtils.htm#a4fec8844bf786b38a8eaebd822bafa05">KeySet</a>( <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; igncase, <span class="keywordtype">bool</span>&amp; found, <span class="keyword">const</span> K&amp; keyd, <span class="keyword">const</span> V&amp; valu, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; item, <span class="keywordtype">string</span>&amp; loc )
<a name="l00092"></a>00092     {
<a name="l00093"></a>00093         <span class="keywordtype">string</span> key( keyd );
<a name="l00094"></a>00094         <span class="keywordtype">string</span> val( valu );
<a name="l00095"></a>00095 
<a name="l00096"></a>00096         <span class="keywordflow">if</span> ( igncase )
<a name="l00097"></a>00097         {
<a name="l00098"></a>00098             transform( key.begin(), key.end(), key.begin(), ::tolower );
<a name="l00099"></a>00099             transform( val.begin(), val.end(), val.begin(), ::tolower );
<a name="l00100"></a>00100         }
<a name="l00101"></a>00101 
<a name="l00102"></a>00102         <span class="keywordflow">if</span>( key.compare( val ) == 0 )
<a name="l00103"></a>00103         {
<a name="l00104"></a>00104             loc = item;
<a name="l00105"></a>00105             found = <span class="keyword">true</span>;
<a name="l00106"></a>00106 
<a name="l00107"></a>00107             <span class="keywordflow">return</span>;
<a name="l00108"></a>00108         }
<a name="l00109"></a>00109 
<a name="l00110"></a>00110         <span class="keywordflow">return</span>;
<a name="l00111"></a>00111     }
<a name="l00112"></a><a class="code" href="namespaceUtils.htm#a95fa8cf18dffa79951549128d9855d1f">00112</a>     <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">class</span> V, <span class="keyword">class</span> I, <span class="keyword">class</span> L&gt; <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="namespaceUtils.htm#a4fec8844bf786b38a8eaebd822bafa05">KeySet</a>( <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; igncase, <span class="keywordtype">bool</span>&amp; found, <span class="keyword">const</span> K&amp; keyd, <span class="keyword">const</span> V&amp; valu, <span class="keyword">const</span> I&amp; item, L&amp; loc )
<a name="l00113"></a>00113     {
<a name="l00114"></a>00114         <span class="keywordtype">string</span> key( keyd );
<a name="l00115"></a>00115         <span class="keywordtype">string</span> val( valu );
<a name="l00116"></a>00116 
<a name="l00117"></a>00117         <span class="keywordflow">if</span> ( igncase )
<a name="l00118"></a>00118         {
<a name="l00119"></a>00119             transform( key.begin(), key.end(), key.begin(), ::tolower );
<a name="l00120"></a>00120             transform( val.begin(), val.end(), val.begin(), ::tolower );
<a name="l00121"></a>00121         }
<a name="l00122"></a>00122 
<a name="l00123"></a>00123         <span class="keywordflow">if</span>( key.compare( val ) == 0 )
<a name="l00124"></a>00124         {
<a name="l00125"></a>00125             <span class="keywordtype">string</span> tf( item );
<a name="l00126"></a>00126 
<a name="l00127"></a>00127             <span class="comment">// Allow bools be any of: true / 1 or false / 0</span>
<a name="l00128"></a>00128             transform( tf.begin(), tf.end(), tf.begin(), ::tolower );
<a name="l00129"></a>00129 
<a name="l00130"></a>00130             <span class="keywordflow">if</span> ( tf.compare( <span class="stringliteral">&quot;true&quot;</span> ) == 0 )
<a name="l00131"></a>00131                 loc = <span class="keyword">true</span>;
<a name="l00132"></a>00132             <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( tf.compare( <span class="stringliteral">&quot;false&quot;</span> ) == 0 )
<a name="l00133"></a>00133                 loc = <span class="keyword">false</span>;
<a name="l00134"></a>00134             <span class="keywordflow">else</span>
<a name="l00135"></a>00135                 stringstream( item ) &gt;&gt; loc;
<a name="l00136"></a>00136             found = <span class="keyword">true</span>;
<a name="l00137"></a>00137 
<a name="l00138"></a>00138             <span class="keywordflow">return</span>;
<a name="l00139"></a>00139         }
<a name="l00140"></a>00140 
<a name="l00141"></a>00141         <span class="keywordflow">return</span>;
<a name="l00142"></a>00142     }
<a name="l00143"></a>00143     <span class="keyword">const</span> multimap&lt;bool,string&gt; <a class="code" href="namespaceUtils.htm#a014607a95c6d01ee99564479b3620ee7">ListDirectory</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; dir, <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; recursive, multimap&lt;bool,string&gt;&amp; output, <a class="code" href="limits_8h.htm#a12a1e9b3ce141648783a82445d02b58d">uint_t</a>&amp; dir_close, <a class="code" href="limits_8h.htm#a12a1e9b3ce141648783a82445d02b58d">uint_t</a>&amp; dir_open );
<a name="l00144"></a>00144 };
<a name="l00145"></a>00145 
<a name="l00146"></a>00146 <span class="preprocessor">#endif</span>
</pre></div></div>
</div>
<hr class="footer"/><address class="footer"><small>Generated on Sat Apr 14 2012 23:46:15 for NAMS - Not Another MUD Server by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.1 </small></address>
</body>
</html>
