<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>NAMS - Not Another MUD Server: h/macros.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.7.1 -->
<script type="text/javascript">
function hasClass(ele,cls) {
  return ele.className.match(new RegExp('(\\s|^)'+cls+'(\\s|$)'));
}

function addClass(ele,cls) {
  if (!this.hasClass(ele,cls)) ele.className += " "+cls;
}

function removeClass(ele,cls) {
  if (hasClass(ele,cls)) {
    var reg = new RegExp('(\\s|^)'+cls+'(\\s|$)');
    ele.className=ele.className.replace(reg,' ');
  }
}

function toggleVisibility(linkObj) {
 var base = linkObj.getAttribute('id');
 var summary = document.getElementById(base + '-summary');
 var content = document.getElementById(base + '-content');
 var trigger = document.getElementById(base + '-trigger');
 if ( hasClass(linkObj,'closed') ) {
   summary.style.display = 'none';
   content.style.display = 'block';
   trigger.src = 'open.png';
   removeClass(linkObj,'closed');
   addClass(linkObj,'opened');
 } else if ( hasClass(linkObj,'opened') ) {
   summary.style.display = 'block';
   content.style.display = 'none';
   trigger.src = 'closed.png';
   removeClass(linkObj,'opened');
   addClass(linkObj,'closed');
 }
 return false;
}
</script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<h1>h/macros.h</h1>  </div>
</div>
<div class="contents">
<a href="macros_8h.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/***************************************************************************</span>
<a name="l00002"></a>00002 <span class="comment"> * NAMS - Not Another MUD Server                                           *</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2012 Matthew Goff (matt@goff.cc) &lt;http://www.ackmud.net/&gt; *</span>
<a name="l00004"></a>00004 <span class="comment"> *                                                                         *</span>
<a name="l00005"></a>00005 <span class="comment"> * This program is free software: you can redistribute it and/or modify    *</span>
<a name="l00006"></a>00006 <span class="comment"> * it under the terms of the GNU General Public License as published by    *</span>
<a name="l00007"></a>00007 <span class="comment"> * the Free Software Foundation, either version 3 of the License, or       *</span>
<a name="l00008"></a>00008 <span class="comment"> * (at your option) any later version.                                     *</span>
<a name="l00009"></a>00009 <span class="comment"> *                                                                         *</span>
<a name="l00010"></a>00010 <span class="comment"> * This program is distributed in the hope that it will be useful,         *</span>
<a name="l00011"></a>00011 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of          *</span>
<a name="l00012"></a>00012 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *</span>
<a name="l00013"></a>00013 <span class="comment"> * GNU General Public License for more details.                            *</span>
<a name="l00014"></a>00014 <span class="comment"> *                                                                         *</span>
<a name="l00015"></a>00015 <span class="comment"> * You should have received a copy of the GNU General Public License       *</span>
<a name="l00016"></a>00016 <span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.   *</span>
<a name="l00017"></a>00017 <span class="comment"> ***************************************************************************/</span>
<a name="l00018"></a>00018 <span class="preprocessor">#ifndef DEC_MACROS_H</span>
<a name="l00019"></a>00019 <span class="preprocessor"></span><span class="preprocessor">#define DEC_MACROS_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span>
<a name="l00021"></a>00021 <span class="comment">// Thanks to Laurent Deniau @ https://groups.google.com/d/msg/comp.std.c/d-6Mj5Lko_s/5R6bMWTEbzQJ</span>
<a name="l00022"></a>00022 <span class="comment">// Determine of the number of arguments passed to a function from a __VA_ARGS__ list</span>
<a name="l00023"></a><a class="code" href="macros_8h.htm#a31b9bcd0e7f30adb8ed947d86d4ae11b">00023</a> <span class="preprocessor">#define PP_NARG(...) \</span>
<a name="l00024"></a>00024 <span class="preprocessor">         PP_NARG_(__VA_ARGS__,PP_RSEQ_N())</span>
<a name="l00025"></a><a class="code" href="macros_8h.htm#a1b4b6dfcca38ee665c4c88c07d58c4f0">00025</a> <span class="preprocessor"></span><span class="preprocessor">#define PP_NARG_(...) \</span>
<a name="l00026"></a>00026 <span class="preprocessor">         PP_ARG_N(__VA_ARGS__)</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#define PP_ARG_N( \</span>
<a name="l00028"></a>00028 <span class="preprocessor">         _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, \</span>
<a name="l00029"></a>00029 <span class="preprocessor">         _11,_12,_13,_14,_15,_16,_17,_18,_19,_20, \</span>
<a name="l00030"></a>00030 <span class="preprocessor">         _21,_22,_23,_24,_25,_26,_27,_28,_29,_30, \</span>
<a name="l00031"></a>00031 <span class="preprocessor">         _31,_32,_33,_34,_35,_36,_37,_38,_39,_40, \</span>
<a name="l00032"></a>00032 <span class="preprocessor">         _41,_42,_43,_44,_45,_46,_47,_48,_49,_50, \</span>
<a name="l00033"></a>00033 <span class="preprocessor">         _51,_52,_53,_54,_55,_56,_57,_58,_59,_60, \</span>
<a name="l00034"></a><a class="code" href="macros_8h.htm#a31e17247ef3f8e15d6014770586b1201">00034</a> <span class="preprocessor">         _61,_62,_63,N,...) N</span>
<a name="l00035"></a><a class="code" href="macros_8h.htm#a15967218850ac6ac5ffd777368fec7fd">00035</a> <span class="preprocessor"></span><span class="preprocessor">#define PP_RSEQ_N() \</span>
<a name="l00036"></a>00036 <span class="preprocessor">         63,62,61,60,                   \</span>
<a name="l00037"></a>00037 <span class="preprocessor">         59,58,57,56,55,54,53,52,51,50, \</span>
<a name="l00038"></a>00038 <span class="preprocessor">         49,48,47,46,45,44,43,42,41,40, \</span>
<a name="l00039"></a>00039 <span class="preprocessor">         39,38,37,36,35,34,33,32,31,30, \</span>
<a name="l00040"></a>00040 <span class="preprocessor">         29,28,27,26,25,24,23,22,21,20, \</span>
<a name="l00041"></a>00041 <span class="preprocessor">         19,18,17,16,15,14,13,12,11,10, \</span>
<a name="l00042"></a>00042 <span class="preprocessor">         9,8,7,6,5,4,3,2,1,0</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span>
<a name="l00044"></a>00044 <span class="comment">// Stringify the calling function&#39;s file and line number for debugging</span>
<a name="l00045"></a><a class="code" href="macros_8h.htm#a18d295a837ac71add5578860b55e5502">00045</a> <span class="preprocessor">#define STR(x) #x</span>
<a name="l00046"></a><a class="code" href="macros_8h.htm#a7a8f554f6ea8ea5af44d22d1b6e58650">00046</a> <span class="preprocessor"></span><span class="preprocessor">#define SX(x) STR(x)</span>
<a name="l00047"></a><a class="code" href="macros_8h.htm#a88894f3ccb47c646ae7d86a6d6f80121">00047</a> <span class="preprocessor"></span><span class="preprocessor">#define _caller_ __FILE__ &quot;:&quot; SX(__LINE__)</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span>
<a name="l00049"></a>00049 <span class="comment">// Get function&#39;s name; wrapped in a nice string</span>
<a name="l00050"></a><a class="code" href="macros_8h.htm#afd7feb39acd312085566c208e35c2362">00050</a> <span class="preprocessor">#define FNAME string( __PRETTY_FUNCTION__ )</span>
<a name="l00051"></a>00051 <span class="preprocessor"></span>
<a name="l00052"></a>00052 <span class="comment">// Output a carriage return \ line feed</span>
<a name="l00053"></a><a class="code" href="macros_8h.htm#a6cb23a858b0a21bdaa644b9181dc415f">00053</a> <span class="preprocessor">#define CRLF &quot;\r\n&quot;</span>
<a name="l00054"></a>00054 <span class="preprocessor"></span>
<a name="l00055"></a>00055 <span class="comment">// Output std::string to const char*</span>
<a name="l00056"></a><a class="code" href="macros_8h.htm#a9e05c5960bb1d108f6621513f708bad4">00056</a> <span class="preprocessor">#define CSTR( func ) ( func ).c_str()</span>
<a name="l00057"></a>00057 <span class="preprocessor"></span>
<a name="l00058"></a>00058 <span class="comment">// Define a bitset variable (name) with values (value) already set</span>
<a name="l00059"></a><a class="code" href="macros_8h.htm#aa1be0ce59bc9d78fa526b8f2157c444b">00059</a> <span class="preprocessor">#define BSET( name, value ) \</span>
<a name="l00060"></a>00060 <span class="preprocessor">        bitset&lt;CFG_MEM_MAX_BITSET&gt; name; \</span>
<a name="l00061"></a>00061 <span class="preprocessor">        name.set( value )</span>
<a name="l00062"></a>00062 <span class="preprocessor"></span>
<a name="l00063"></a>00063 <span class="comment">// Define an iterator variable (name) of class (type) using (container)</span>
<a name="l00064"></a><a class="code" href="macros_8h.htm#a05e235f398566bf49e21735cf00fc656">00064</a> <span class="preprocessor">#define ITER( container, type, name ) container&lt;type&gt;::iterator name</span>
<a name="l00065"></a>00065 <span class="preprocessor"></span>
<a name="l00066"></a>00066 <span class="comment">// Support for multimap/pair iterators, too</span>
<a name="l00067"></a><a class="code" href="macros_8h.htm#ac49d0f3d55253bd7403da9e5fcab7504">00067</a> <span class="preprocessor">#define MITER( container, type1, type2, name ) container&lt;type1,type2&gt;::iterator name</span>
<a name="l00068"></a>00068 <span class="preprocessor"></span>
<a name="l00069"></a>00069 <span class="comment">// Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already set</span>
<a name="l00070"></a><a class="code" href="macros_8h.htm#a56f9e62010649bf59e47724b826e3502">00070</a> <span class="preprocessor">#define UFLAGS_DE( name ) BSET( name, UTILS_DEBUG &amp; UTILS_TYPE_ERROR )</span>
<a name="l00071"></a>00071 <span class="preprocessor"></span>
<a name="l00072"></a>00072 <span class="comment">// Wrap Utils::Logger()</span>
<a name="l00073"></a><a class="code" href="macros_8h.htm#acd5f0d05a4501b560a2fbc0799039598">00073</a> <span class="preprocessor">#define LOGSTR( flags, message ) Utils::Logger( flags, message )</span>
<a name="l00074"></a>00074 <span class="preprocessor"></span>
<a name="l00075"></a>00075 <span class="comment">// Wrap Utils::FormatString() within Utils::Logger()</span>
<a name="l00076"></a><a class="code" href="macros_8h.htm#ac116c157aff5572959fd33c0ecd913da">00076</a> <span class="preprocessor">#define LOGFMT( flags, message, ... ) LOGSTR( flags, Utils::FormatString( flags, message, __VA_ARGS__ ) )</span>
<a name="l00077"></a>00077 <span class="preprocessor"></span>
<a name="l00078"></a>00078 <span class="comment">// Wrap logging a pre-formatted errno output</span>
<a name="l00079"></a><a class="code" href="macros_8h.htm#a39c64b6565bddaca7e2af8518ee764e3">00079</a> <span class="preprocessor">#define LOGERRNO( flags, message ) LOGFMT( flags, message &quot; returned errno %d: %s&quot;, errno, strerror( errno ) )</span>
<a name="l00080"></a>00080 <span class="preprocessor"></span>
<a name="l00081"></a>00081 <span class="comment">// This is the maximum value usleep will take per man (3) usleep -- 1 second.</span>
<a name="l00082"></a>00082 <span class="comment">// Changing this will affect game speed; reference CFG_GAM_PULSE_RATE</span>
<a name="l00083"></a><a class="code" href="macros_8h.htm#a5fc45be6b0bb71dc5d4c6390d98bf3ee">00083</a> <span class="preprocessor">#define USLEEP_MAX 1000000</span>
<a name="l00084"></a>00084 <span class="preprocessor"></span>
<a name="l00085"></a>00085 <span class="preprocessor">#endif</span>
</pre></div></div>
</div>
<hr class="footer"/><address class="footer"><small>Generated on Sat Apr 14 2012 23:46:15 for NAMS - Not Another MUD Server by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.1 </small></address>
</body>
</html>
