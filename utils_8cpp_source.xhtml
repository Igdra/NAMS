<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>NAMS - Not Another MUD Server: utils.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">NAMS - Not Another MUD Server
   
   </div>
   <div id="projectbrief">NAMS is a C++ MUD server with the primary goals of a safe, modular design and a server core that is substantially decouppled from game logic.</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="dynsections.js"></script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">utils.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="utils_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/***************************************************************************</span>
<a name="l00002"></a>00002 <span class="comment"> * NAMS - Not Another MUD Server                                           *</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2012 Matthew Goff (matt@goff.cc) &lt;http://www.ackmud.net/&gt; *</span>
<a name="l00004"></a>00004 <span class="comment"> *                                                                         *</span>
<a name="l00005"></a>00005 <span class="comment"> * This program is free software: you can redistribute it and/or modify    *</span>
<a name="l00006"></a>00006 <span class="comment"> * it under the terms of the GNU General Public License as published by    *</span>
<a name="l00007"></a>00007 <span class="comment"> * the Free Software Foundation, either version 3 of the License, or       *</span>
<a name="l00008"></a>00008 <span class="comment"> * (at your option) any later version.                                     *</span>
<a name="l00009"></a>00009 <span class="comment"> *                                                                         *</span>
<a name="l00010"></a>00010 <span class="comment"> * This program is distributed in the hope that it will be useful,         *</span>
<a name="l00011"></a>00011 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of          *</span>
<a name="l00012"></a>00012 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *</span>
<a name="l00013"></a>00013 <span class="comment"> * GNU General Public License for more details.                            *</span>
<a name="l00014"></a>00014 <span class="comment"> *                                                                         *</span>
<a name="l00015"></a>00015 <span class="comment"> * You should have received a copy of the GNU General Public License       *</span>
<a name="l00016"></a>00016 <span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.   *</span>
<a name="l00017"></a>00017 <span class="comment"> ***************************************************************************/</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="includes_8h.xhtml" title="All non-system includes that need to be within each .cpp file.">h/includes.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="utils_8h.xhtml" title="The Utils namespace.">h/utils.h</a>&quot;</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="comment">/* Core */</span>
<a name="l00036"></a><a class="code" href="namespaceUtils.xhtml#ac41c505e3efccab8549238e6843b0d2e">00036</a> <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> <a class="code" href="namespaceUtils.xhtml#ac41c505e3efccab8549238e6843b0d2e" title="Determines if a directory exists on disk.">Utils::DirExists</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; dir )
<a name="l00037"></a>00037 {
<a name="l00038"></a>00038     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00039"></a>00039     <span class="keyword">struct </span>stat status = { 0 };
<a name="l00040"></a>00040 
<a name="l00041"></a>00041     <span class="keywordflow">if</span> ( dir.empty() )
<a name="l00042"></a>00042     {
<a name="l00043"></a>00043         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::DirExists()-&gt; called with empty dir&quot;</span> );
<a name="l00044"></a>00044         <span class="keywordflow">return</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88aa6afb4eb3fbede68c19c12bf3543045f">UTILS_RET_ERROR</a>;
<a name="l00045"></a>00045     }
<a name="l00046"></a>00046 
<a name="l00047"></a>00047     <span class="keywordflow">if</span> ( ::access( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( dir ), F_OK ) &lt; 0 &amp;&amp; errno != ENOENT )
<a name="l00048"></a>00048     {
<a name="l00049"></a>00049         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Utils::DirExists()-&gt;access()-&gt;&quot;</span> );
<a name="l00050"></a>00050         <span class="keywordflow">return</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88aa6afb4eb3fbede68c19c12bf3543045f">UTILS_RET_ERROR</a>;
<a name="l00051"></a>00051     }
<a name="l00052"></a>00052 
<a name="l00053"></a>00053     <span class="keywordflow">if</span> ( ::stat( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( dir ), &amp;status ) &lt; 0 &amp;&amp; errno != ENOENT )
<a name="l00054"></a>00054     {
<a name="l00055"></a>00055         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Utils::DirExists()-&gt;stat()-&gt;&quot;</span> );
<a name="l00056"></a>00056         <span class="keywordflow">return</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88aa6afb4eb3fbede68c19c12bf3543045f">UTILS_RET_ERROR</a>;
<a name="l00057"></a>00057     }
<a name="l00058"></a>00058 
<a name="l00059"></a>00059     <span class="keywordflow">if</span> ( status.st_mode &amp; S_IFDIR )
<a name="l00060"></a>00060         <span class="keywordflow">return</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88ae2722723183013676ca1f0f065fc0b24">UTILS_RET_TRUE</a>;
<a name="l00061"></a>00061 
<a name="l00062"></a>00062     <span class="keywordflow">return</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88ae9b6a246539fb57fb810ac271b05d050">UTILS_RET_FALSE</a>;
<a name="l00063"></a>00063 }
<a name="l00064"></a>00064 
<a name="l00072"></a><a class="code" href="namespaceUtils.xhtml#ad21617b756ef242fbc66e63dec3e4e4d">00072</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.xhtml#ad21617b756ef242fbc66e63dec3e4e4d" title="Returns a string consisting of directory/file.ext.">Utils::DirPath</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; dir, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; ext )
<a name="l00073"></a>00073 {
<a name="l00074"></a>00074     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00075"></a>00075     stringstream output;
<a name="l00076"></a>00076 
<a name="l00077"></a>00077     <span class="keywordflow">if</span> ( dir.empty() )
<a name="l00078"></a>00078     {
<a name="l00079"></a>00079         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::DirPath()-&gt; called with empty dir&quot;</span> );
<a name="l00080"></a>00080         <span class="keywordflow">return</span> output.str();
<a name="l00081"></a>00081     }
<a name="l00082"></a>00082 
<a name="l00083"></a>00083     <span class="keywordflow">if</span> ( file.empty() )
<a name="l00084"></a>00084     {
<a name="l00085"></a>00085         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::DirPath()-&gt; called with empty file&quot;</span> );
<a name="l00086"></a>00086         <span class="keywordflow">return</span> output.str();
<a name="l00087"></a>00087     }
<a name="l00088"></a>00088 
<a name="l00089"></a>00089     output &lt;&lt; dir &lt;&lt; <span class="stringliteral">&quot;/&quot;</span>;
<a name="l00090"></a>00090 
<a name="l00091"></a>00091     <span class="keywordflow">if</span> ( !ext.empty() )
<a name="l00092"></a>00092         output &lt;&lt; file.substr( 0, file.find_last_of( <span class="stringliteral">&quot;.&quot;</span> ) + 1 ) &lt;&lt; ext;
<a name="l00093"></a>00093     <span class="keywordflow">else</span>
<a name="l00094"></a>00094         output &lt;&lt; file;
<a name="l00095"></a>00095 
<a name="l00096"></a>00096     <span class="keywordflow">return</span> output.str();
<a name="l00097"></a>00097 }
<a name="l00098"></a>00098 
<a name="l00105"></a><a class="code" href="namespaceUtils.xhtml#a3e236b07fd628bcaf2e7c5854dd2a281">00105</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.xhtml#a3e236b07fd628bcaf2e7c5854dd2a281" title="Returns a string consisting of file.ext.">Utils::FileExt</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; ext )
<a name="l00106"></a>00106 {
<a name="l00107"></a>00107     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00108"></a>00108     stringstream output;
<a name="l00109"></a>00109 
<a name="l00110"></a>00110     <span class="keywordflow">if</span> ( file.empty() )
<a name="l00111"></a>00111     {
<a name="l00112"></a>00112         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::FileExt()-&gt; called with empty file&quot;</span> );
<a name="l00113"></a>00113         <span class="keywordflow">return</span> output.str();
<a name="l00114"></a>00114     }
<a name="l00115"></a>00115 
<a name="l00116"></a>00116     <span class="keywordflow">if</span> ( ext.empty() )
<a name="l00117"></a>00117     {
<a name="l00118"></a>00118         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::FileExt()-&gt; called with empty ext&quot;</span> );
<a name="l00119"></a>00119         <span class="keywordflow">return</span> output.str();
<a name="l00120"></a>00120     }
<a name="l00121"></a>00121 
<a name="l00122"></a>00122     output &lt;&lt; file &lt;&lt; <span class="stringliteral">&quot;.&quot;</span> &lt;&lt; ext;
<a name="l00123"></a>00123 
<a name="l00124"></a>00124     <span class="keywordflow">return</span> output.str();
<a name="l00125"></a>00125 }
<a name="l00126"></a>00126 
<a name="l00133"></a><a class="code" href="namespaceUtils.xhtml#afaf029667f299587a52ba9c8de11edfa">00133</a> <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> <a class="code" href="namespaceUtils.xhtml#afaf029667f299587a52ba9c8de11edfa" title="Returns the number of a specific character in a given string.">Utils::NumChar</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; input, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; item )
<a name="l00134"></a>00134 {
<a name="l00135"></a>00135     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00136"></a>00136     <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> amount = 0, i = 0;
<a name="l00137"></a>00137 
<a name="l00138"></a>00138     <span class="keywordflow">if</span> ( input.empty() )
<a name="l00139"></a>00139     {
<a name="l00140"></a>00140         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::NumChar()-&gt; called with empty input&quot;</span> );
<a name="l00141"></a>00141         <span class="keywordflow">return</span> amount;
<a name="l00142"></a>00142     }
<a name="l00143"></a>00143 
<a name="l00144"></a>00144     <span class="keywordflow">for</span> ( i = 0; i &lt; input.length(); i++ )
<a name="l00145"></a>00145         <span class="keywordflow">if</span> ( input[i] == item[0] )
<a name="l00146"></a>00146             amount++;
<a name="l00147"></a>00147 
<a name="l00148"></a>00148     <span class="keywordflow">return</span> amount;
<a name="l00149"></a>00149 }
<a name="l00150"></a>00150 
<a name="l00156"></a><a class="code" href="namespaceUtils.xhtml#a11bfe61c6e77603d59116397b1d3f580">00156</a> <span class="keyword">const</span> pair&lt;string,string&gt; <a class="code" href="namespaceUtils.xhtml#a11bfe61c6e77603d59116397b1d3f580" title="Returns a pair of type T,V after receiving an input string generated from Utils::MakePair().">Utils::ReadPair</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; input )
<a name="l00157"></a>00157 {
<a name="l00158"></a>00158     pair&lt;string,string&gt; output;
<a name="l00159"></a>00159     <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> p1 = <a class="code" href="limits_8h.xhtml#ace307ffbe4c934f4565176f184b38d78" title="The minimum value of any uint_t variable.">uintmin_t</a>, p2 = <a class="code" href="limits_8h.xhtml#ace307ffbe4c934f4565176f184b38d78" title="The minimum value of any uint_t variable.">uintmin_t</a>;
<a name="l00160"></a>00160 
<a name="l00161"></a>00161     <span class="keywordflow">if</span> ( input.compare( 0, 2, <span class="stringliteral">&quot;{\&quot;&quot;</span> ) != 0 )
<a name="l00162"></a>00162         <span class="keywordflow">return</span> output;
<a name="l00163"></a>00163 
<a name="l00164"></a>00164     <span class="keywordflow">if</span> ( input.compare( input.length() - 2, 2, <span class="stringliteral">&quot;\&quot;}&quot;</span> ) != 0 )
<a name="l00165"></a>00165         <span class="keywordflow">return</span> output;
<a name="l00166"></a>00166 
<a name="l00167"></a>00167     <span class="keywordflow">if</span> ( ( p1 = input.find( <span class="stringliteral">&quot;\&quot;:\&quot;&quot;</span> ) ) == string::npos )
<a name="l00168"></a>00168         <span class="keywordflow">return</span> output;
<a name="l00169"></a>00169 
<a name="l00170"></a>00170     <span class="keywordflow">if</span> ( ( p2 = input.find( <span class="stringliteral">&quot;\&quot;}&quot;</span> ) ) == string::npos )
<a name="l00171"></a>00171         <span class="keywordflow">return</span> output;
<a name="l00172"></a>00172 
<a name="l00173"></a>00173     output.first = input.substr( 2, p1 - 2 );
<a name="l00174"></a>00174     output.second = input.substr( p1 + 3, p2 - p1 - 3 );
<a name="l00175"></a>00175 
<a name="l00176"></a>00176     <span class="keywordflow">return</span> output;
<a name="l00177"></a>00177 }
<a name="l00178"></a>00178 
<a name="l00184"></a><a class="code" href="namespaceUtils.xhtml#adafa6fa32d5b637ea62db12aa35db6e0">00184</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.xhtml#adafa6fa32d5b637ea62db12aa35db6e0" title="Returns a salt value for use with crypt.">Utils::Salt</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; input )
<a name="l00185"></a>00185 {
<a name="l00186"></a>00186     stringstream output;
<a name="l00187"></a>00187 
<a name="l00188"></a>00188     output &lt;&lt; <a class="code" href="config_8h.xhtml#aee7c7a26324d7aa5dd00144db42355c8" title="The initial salt string to use with crypt().">CFG_SEC_CRYPT_SALT</a> &lt;&lt; input;
<a name="l00189"></a>00189 
<a name="l00190"></a>00190     <span class="keywordflow">return</span> output.str();
<a name="l00191"></a>00191 }
<a name="l00192"></a>00192 
<a name="l00198"></a><a class="code" href="namespaceUtils.xhtml#a8c70e85acdb1549aa4cd3a16b8d8d9cf">00198</a> <span class="keyword">const</span> vector&lt;string&gt; <a class="code" href="namespaceUtils.xhtml#a8c70e85acdb1549aa4cd3a16b8d8d9cf" title="Returns a vector of strings split at linebreaks based on input.">Utils::StrNewlines</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; input )
<a name="l00199"></a>00199 {
<a name="l00200"></a>00200     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00201"></a>00201 
<a name="l00202"></a>00202     <span class="keywordflow">if</span> ( input.empty() )
<a name="l00203"></a>00203     {
<a name="l00204"></a>00204         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::StrNewlines()-&gt; called with empty input&quot;</span> );
<a name="l00205"></a>00205         <span class="keywordflow">return</span> vector&lt;string&gt;();
<a name="l00206"></a>00206     }
<a name="l00207"></a>00207 
<a name="l00208"></a>00208     stringstream ss( input );
<a name="l00209"></a>00209     <span class="keywordtype">string</span> line;
<a name="l00210"></a>00210     vector&lt;string&gt; output;
<a name="l00211"></a>00211 
<a name="l00212"></a>00212     <span class="keywordflow">while</span> ( getline( ss, line ) )
<a name="l00213"></a>00213     {
<a name="l00214"></a>00214         <span class="comment">// Strip the newline off the end</span>
<a name="l00215"></a>00215         line.resize( line.length() - 1 );
<a name="l00216"></a>00216         <span class="keywordflow">if</span> ( !line.empty() )
<a name="l00217"></a>00217             output.push_back( line );
<a name="l00218"></a>00218     }
<a name="l00219"></a>00219 
<a name="l00220"></a>00220     <span class="keywordflow">return</span> output;
<a name="l00221"></a>00221 }
<a name="l00222"></a>00222 
<a name="l00231"></a><a class="code" href="namespaceUtils.xhtml#acf9ee675ffc2d73b7b2a2a71aa68e36a">00231</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.xhtml#acf9ee675ffc2d73b7b2a2a71aa68e36a" title="Returns if string s1 is a prefix of string s2.">Utils::StrPrefix</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; s1, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; s2, <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; igncase )
<a name="l00232"></a>00232 {
<a name="l00233"></a>00233     pair&lt;string::iterator,string::iterator&gt; si;
<a name="l00234"></a>00234     <span class="keywordtype">string</span> _s1( s1 ), _s2( s2 );
<a name="l00235"></a>00235 
<a name="l00236"></a>00236     <span class="keywordflow">if</span> ( igncase )
<a name="l00237"></a>00237     {
<a name="l00238"></a>00238         _s1 = <a class="code" href="namespaceUtils.xhtml#a9b70f9dd0af906c806695b35488e778f" title="Returns a string converted to all lowercase letters.">Utils::Lower</a>( _s1 );
<a name="l00239"></a>00239         _s2 = <a class="code" href="namespaceUtils.xhtml#a9b70f9dd0af906c806695b35488e778f" title="Returns a string converted to all lowercase letters.">Utils::Lower</a>( _s2 );
<a name="l00240"></a>00240     }
<a name="l00241"></a>00241 
<a name="l00242"></a>00242     si = mismatch( _s1.begin(), _s1.end(), _s2.begin() );
<a name="l00243"></a>00243 
<a name="l00244"></a>00244     <span class="keywordflow">if</span> ( si.first == _s1.end() )
<a name="l00245"></a>00245         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00246"></a>00246 
<a name="l00247"></a>00247     <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00248"></a>00248 }
<a name="l00249"></a>00249 
<a name="l00255"></a><a class="code" href="namespaceUtils.xhtml#a2b2dad8fa1999271cf613dc735f851d4">00255</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.xhtml#a2b2dad8fa1999271cf613dc735f851d4" title="Returns a given time as a string.">Utils::StrTime</a>( <span class="keyword">const</span> time_t&amp; now )
<a name="l00256"></a>00256 {
<a name="l00257"></a>00257     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00258"></a>00258     <span class="keywordtype">string</span> output;
<a name="l00259"></a>00259 
<a name="l00260"></a>00260     <span class="keywordflow">if</span> ( ( output = ::ctime( &amp;now ) ).empty() )
<a name="l00261"></a>00261     {
<a name="l00262"></a>00262         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::StrTime()-&gt;ctime()-&gt; returned NULL&quot;</span> );
<a name="l00263"></a>00263         <span class="keywordflow">return</span> output;
<a name="l00264"></a>00264     }
<a name="l00265"></a>00265 
<a name="l00266"></a>00266     <span class="comment">// Strip the newline off the end</span>
<a name="l00267"></a>00267     output.resize( output.length() - 1 );
<a name="l00268"></a>00268 
<a name="l00269"></a>00269     <span class="keywordflow">return</span> output;
<a name="l00270"></a>00270 }
<a name="l00271"></a>00271 
<a name="l00278"></a><a class="code" href="namespaceUtils.xhtml#a402a36406edb7938330204e83b1abe83">00278</a> <span class="keyword">const</span> vector&lt;string&gt; <a class="code" href="namespaceUtils.xhtml#a402a36406edb7938330204e83b1abe83" title="Returns a vector of strings split at spaces based on input.">Utils::StrTokens</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; input, <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; quiet )
<a name="l00279"></a>00279 {
<a name="l00280"></a>00280     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00281"></a>00281 
<a name="l00282"></a>00282     <span class="keywordflow">if</span> ( input.empty() )
<a name="l00283"></a>00283     {
<a name="l00284"></a>00284         <span class="keywordflow">if</span> ( !quiet )
<a name="l00285"></a>00285             <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::StrTokens()-&gt; called with empty input&quot;</span> );
<a name="l00286"></a>00286         <span class="keywordflow">return</span> vector&lt;string&gt;();
<a name="l00287"></a>00287     }
<a name="l00288"></a>00288 
<a name="l00289"></a>00289     stringstream ss( input );
<a name="l00290"></a>00290     istream_iterator&lt;string&gt; si( ss );
<a name="l00291"></a>00291     istream_iterator&lt;string&gt; end;
<a name="l00292"></a>00292     vector&lt;string&gt; output( si, end );
<a name="l00293"></a>00293 
<a name="l00294"></a>00294     <span class="keywordflow">return</span> output;
<a name="l00295"></a>00295 }
<a name="l00296"></a>00296 
<a name="l00297"></a>00297 <span class="comment">/* Query */</span>
<a name="l00304"></a><a class="code" href="namespaceUtils.xhtml#a303e8afc983db3b483fb450a1c499c1e">00304</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.xhtml#a303e8afc983db3b483fb450a1c499c1e" title="Determines if a file path is a directory or file on disk.">Utils::iDirectory</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; dir )
<a name="l00305"></a>00305 {
<a name="l00306"></a>00306     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00307"></a>00307     <span class="keyword">struct </span>stat dir_info;
<a name="l00308"></a>00308 
<a name="l00309"></a>00309     <span class="keywordflow">if</span> ( ::stat( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( dir ), &amp;dir_info ) &lt; 0 )
<a name="l00310"></a>00310     {
<a name="l00311"></a>00311         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Utils::iDirectory()-&gt;stat()-&gt;&quot;</span> );
<a name="l00312"></a>00312         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00313"></a>00313     }
<a name="l00314"></a>00314 
<a name="l00315"></a>00315     <span class="keywordflow">if</span> ( !S_ISDIR( dir_info.st_mode ) )
<a name="l00316"></a>00316         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00317"></a>00317 
<a name="l00318"></a>00318     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00319"></a>00319 }
<a name="l00320"></a>00320 
<a name="l00327"></a><a class="code" href="namespaceUtils.xhtml#a7d40818a602fb21db4b4f0917705f85b">00327</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.xhtml#a7d40818a602fb21db4b4f0917705f85b" title="Determines if a file path is a file or directory on disk.">Utils::iFile</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file )
<a name="l00328"></a>00328 {
<a name="l00329"></a>00329     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00330"></a>00330     <span class="keyword">struct </span>stat dir_info;
<a name="l00331"></a>00331 
<a name="l00332"></a>00332     <span class="keywordflow">if</span> ( ::stat( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( file ), &amp;dir_info ) &lt; 0 )
<a name="l00333"></a>00333     {
<a name="l00334"></a>00334         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Utils::iFile()-&gt;stat()-&gt;&quot;</span> );
<a name="l00335"></a>00335         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00336"></a>00336     }
<a name="l00337"></a>00337 
<a name="l00338"></a>00338     <span class="keywordflow">if</span> ( !S_ISREG( dir_info.st_mode ) )
<a name="l00339"></a>00339         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00340"></a>00340 
<a name="l00341"></a>00341     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00342"></a>00342 }
<a name="l00343"></a>00343 
<a name="l00350"></a><a class="code" href="namespaceUtils.xhtml#a47aae40aead5b696e927fb0cdd336442">00350</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.xhtml#a47aae40aead5b696e927fb0cdd336442" title="Determines if a string is only a string of numerical values.">Utils::iNumber</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; input )
<a name="l00351"></a>00351 {
<a name="l00352"></a>00352     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00353"></a>00353     <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> i = 0;
<a name="l00354"></a>00354 
<a name="l00355"></a>00355     <span class="keywordflow">if</span> ( input.empty() )
<a name="l00356"></a>00356     {
<a name="l00357"></a>00357         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::iNumber()-&gt; called with empty input&quot;</span> );
<a name="l00358"></a>00358         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00359"></a>00359     }
<a name="l00360"></a>00360 
<a name="l00361"></a>00361     <span class="keywordflow">for</span> ( i = 0; i &lt; input.length(); i++ )
<a name="l00362"></a>00362         <span class="keywordflow">if</span> ( !isdigit( input[i] ) )
<a name="l00363"></a>00363             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00364"></a>00364 
<a name="l00365"></a>00365     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00366"></a>00366 }
<a name="l00367"></a>00367 
<a name="l00374"></a><a class="code" href="namespaceUtils.xhtml#a158e1deb611937a6313e8683fe7db3fc">00374</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.xhtml#a158e1deb611937a6313e8683fe7db3fc" title="Determines if a file is readable.">Utils::iReadable</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file )
<a name="l00375"></a>00375 {
<a name="l00376"></a>00376     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00377"></a>00377     ifstream ifile;
<a name="l00378"></a>00378     <span class="keywordtype">bool</span> ret = <span class="keyword">false</span>;
<a name="l00379"></a>00379 
<a name="l00380"></a>00380     ifile.open( file, ifstream::in );
<a name="l00381"></a>00381 
<a name="l00382"></a>00382     <span class="keywordflow">if</span> ( ifile.fail() )
<a name="l00383"></a>00383         ret = <span class="keyword">false</span>;
<a name="l00384"></a>00384     <span class="keywordflow">else</span>
<a name="l00385"></a>00385         ret = <span class="keyword">true</span>;
<a name="l00386"></a>00386 
<a name="l00387"></a>00387     ifile.close();
<a name="l00388"></a>00388 
<a name="l00389"></a>00389     <span class="keywordflow">return</span> ret;
<a name="l00390"></a>00390 }
<a name="l00391"></a>00391 
<a name="l00392"></a>00392 <span class="comment">/* Manipulate */</span>
<a name="l00399"></a><a class="code" href="namespaceUtils.xhtml#af8586b5c4d77ae0617279186b2bfdb66">00399</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.xhtml#af8586b5c4d77ae0617279186b2bfdb66" title="Returns the first delimeter separated argument from input and then erases it from input...">Utils::Argument</a>( <span class="keywordtype">string</span>&amp; input, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; delim )
<a name="l00400"></a>00400 {
<a name="l00401"></a>00401     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00402"></a>00402     <span class="keywordtype">string</span> output;
<a name="l00403"></a>00403     <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> pos;
<a name="l00404"></a>00404 
<a name="l00405"></a>00405     <span class="keywordflow">if</span> ( input.empty() )
<a name="l00406"></a>00406     {
<a name="l00407"></a>00407         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::Argument() called with empty input&quot;</span> );
<a name="l00408"></a>00408         <span class="keywordflow">return</span> output;
<a name="l00409"></a>00409     }
<a name="l00410"></a>00410 
<a name="l00411"></a>00411     pos = input.find( delim );
<a name="l00412"></a>00412 
<a name="l00413"></a>00413     <span class="keywordflow">if</span> ( pos == string::npos )
<a name="l00414"></a>00414     {
<a name="l00415"></a>00415         output = input;
<a name="l00416"></a>00416         input.clear();
<a name="l00417"></a>00417     }
<a name="l00418"></a>00418     <span class="keywordflow">else</span>
<a name="l00419"></a>00419     {
<a name="l00420"></a>00420         output = input.substr( 0, pos + delim.length() - 1 );
<a name="l00421"></a>00421         input.erase( 0, pos + delim.length() );
<a name="l00422"></a>00422     }
<a name="l00423"></a>00423 
<a name="l00424"></a>00424     <span class="keywordflow">return</span> output;
<a name="l00425"></a>00425 }
<a name="l00426"></a>00426 
<a name="l00433"></a><a class="code" href="namespaceUtils.xhtml#a57b7c6b0c6ea6f1498129d9c9a16d8a8">00433</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="namespaceUtils.xhtml#a57b7c6b0c6ea6f1498129d9c9a16d8a8" title="Unlinks any temp files leftover from a failed write.">Utils::CleanupTemp</a>( <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; dir_close, <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; dir_open )
<a name="l00434"></a>00434 {
<a name="l00435"></a>00435     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00436"></a>00436     multimap&lt;bool,string&gt; files;
<a name="l00437"></a>00437     <a class="code" href="macros_8h.xhtml#ac49d0f3d55253bd7403da9e5fcab7504" title="Define an iterator variable (name) of (type1,type2) using (container).">MITER</a>( multimap, <span class="keywordtype">bool</span>,<span class="keywordtype">string</span>, mi );
<a name="l00438"></a>00438 
<a name="l00439"></a>00439     <a class="code" href="namespaceUtils.xhtml#a995fed3bf7ff41788f5b3dbdc6a70ecb" title="Return a multimap of a specified directory tree on disk.">ListDirectory</a>( <a class="code" href="config_8h.xhtml#a139b7703e057cd102ea853e5999f39fd" title="Directory for temporary files.">CFG_DAT_DIR_VAR</a>, <span class="keyword">false</span>, <span class="keyword">false</span>, files, dir_close, dir_open );
<a name="l00440"></a>00440 
<a name="l00441"></a>00441     <span class="keywordflow">if</span> ( files.empty() )
<a name="l00442"></a>00442         <span class="keywordflow">return</span>;
<a name="l00443"></a>00443 
<a name="l00444"></a>00444     <span class="keywordflow">for</span> ( mi = files.begin(); mi != files.end(); mi++ )
<a name="l00445"></a>00445         <span class="keywordflow">if</span> ( mi-&gt;first == <a class="code" href="enum_8h.xhtml#a9325070b1daf70dbe43f7fb9a341aaf2">UTILS_IS_FILE</a> )
<a name="l00446"></a>00446             <span class="keywordflow">if</span> ( ::unlink( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( <a class="code" href="namespaceUtils.xhtml#ad21617b756ef242fbc66e63dec3e4e4d" title="Returns a string consisting of directory/file.ext.">DirPath</a>( <a class="code" href="config_8h.xhtml#a139b7703e057cd102ea853e5999f39fd" title="Directory for temporary files.">CFG_DAT_DIR_VAR</a>, mi-&gt;second ) ) ) &lt; 0 )
<a name="l00447"></a>00447                 <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Utils::CleanupTemp()-&gt;unlink()-&gt;&quot;</span> );
<a name="l00448"></a>00448 
<a name="l00449"></a>00449     <span class="keywordflow">return</span>;
<a name="l00450"></a>00450 }
<a name="l00451"></a>00451 
<a name="l00459"></a><a class="code" href="namespaceUtils.xhtml#a67fd451200ee8a3cc646aeba5cb9513b">00459</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.xhtml#a67fd451200ee8a3cc646aeba5cb9513b" title="Begins a write to a temporary file that is intended to replace a live file.">Utils::FileOpen</a>( ofstream&amp; ofs, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file )
<a name="l00460"></a>00460 {
<a name="l00461"></a>00461     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00462"></a>00462 
<a name="l00463"></a>00463     <span class="keywordflow">if</span> ( ofs.is_open() )
<a name="l00464"></a>00464     {
<a name="l00465"></a>00465         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::FileOpen()-&gt; called with open ofs&quot;</span> );
<a name="l00466"></a>00466         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00467"></a>00467     }
<a name="l00468"></a>00468 
<a name="l00469"></a>00469     ofs.open( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( <a class="code" href="namespaceUtils.xhtml#ad21617b756ef242fbc66e63dec3e4e4d" title="Returns a string consisting of directory/file.ext.">DirPath</a>( <a class="code" href="config_8h.xhtml#a139b7703e057cd102ea853e5999f39fd" title="Directory for temporary files.">CFG_DAT_DIR_VAR</a>, file ) ) );
<a name="l00470"></a>00470 
<a name="l00471"></a>00471     <span class="keywordflow">if</span> ( ofs.fail() )
<a name="l00472"></a>00472     {
<a name="l00473"></a>00473         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::FileOpen()-&gt; error opening ofs&quot;</span> );
<a name="l00474"></a>00474         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00475"></a>00475     }
<a name="l00476"></a>00476 
<a name="l00477"></a>00477     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00478"></a>00478 }
<a name="l00479"></a>00479 
<a name="l00488"></a><a class="code" href="namespaceUtils.xhtml#a46f8de9f032906cc7f0b4c18602e6542">00488</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.xhtml#a67fd451200ee8a3cc646aeba5cb9513b" title="Begins a write to a temporary file that is intended to replace a live file.">Utils::FileOpen</a>( ifstream&amp; ifs, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file, <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; quiet )
<a name="l00489"></a>00489 {
<a name="l00490"></a>00490     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00491"></a>00491 
<a name="l00492"></a>00492     <span class="keywordflow">if</span> ( ifs.is_open() )
<a name="l00493"></a>00493     {
<a name="l00494"></a>00494         <span class="keywordflow">if</span> ( !quiet )
<a name="l00495"></a>00495             <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::FileOpen()-&gt; called with open ifs&quot;</span> );
<a name="l00496"></a>00496         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00497"></a>00497     }
<a name="l00498"></a>00498 
<a name="l00499"></a>00499     ifs.open( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( file ) );
<a name="l00500"></a>00500 
<a name="l00501"></a>00501     <span class="keywordflow">if</span> ( ifs.fail() )
<a name="l00502"></a>00502     {
<a name="l00503"></a>00503         <span class="keywordflow">if</span> ( !quiet )
<a name="l00504"></a>00504             <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::FileOpen()-&gt; error opening ifs&quot;</span> );
<a name="l00505"></a>00505         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00506"></a>00506     }
<a name="l00507"></a>00507 
<a name="l00508"></a>00508     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00509"></a>00509 }
<a name="l00510"></a>00510 
<a name="l00518"></a><a class="code" href="namespaceUtils.xhtml#a7008f8effca71806721305d1834bde1e">00518</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.xhtml#a7008f8effca71806721305d1834bde1e" title="Completes a read from a file.">Utils::FileClose</a>( ifstream&amp; ifs, <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; quiet )
<a name="l00519"></a>00519 {
<a name="l00520"></a>00520     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00521"></a>00521 
<a name="l00522"></a>00522     <span class="keywordflow">if</span> ( !ifs.is_open() )
<a name="l00523"></a>00523     {
<a name="l00524"></a>00524         <span class="keywordflow">if</span> ( !quiet )
<a name="l00525"></a>00525             <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::FileClose()-&gt; called with closed ifs&quot;</span> );
<a name="l00526"></a>00526         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00527"></a>00527     }
<a name="l00528"></a>00528 
<a name="l00529"></a>00529     ifs.clear();
<a name="l00530"></a>00530     ifs.close();
<a name="l00531"></a>00531 
<a name="l00532"></a>00532     <span class="keywordflow">if</span> ( ifs.fail() )
<a name="l00533"></a>00533     {
<a name="l00534"></a>00534         <span class="keywordflow">if</span> ( !quiet )
<a name="l00535"></a>00535             <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::FileClose()-&gt; error closing ifs&quot;</span> );
<a name="l00536"></a>00536         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00537"></a>00537     }
<a name="l00538"></a>00538 
<a name="l00539"></a>00539     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00540"></a>00540 }
<a name="l00541"></a>00541 
<a name="l00548"></a><a class="code" href="namespaceUtils.xhtml#a2e9eaa30b811a49ea71003ca3e54fc3c">00548</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.xhtml#a7008f8effca71806721305d1834bde1e" title="Completes a read from a file.">Utils::FileClose</a>( ofstream&amp; ofs )
<a name="l00549"></a>00549 {
<a name="l00550"></a>00550     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00551"></a>00551 
<a name="l00552"></a>00552     <span class="keywordflow">if</span> ( !ofs.is_open() )
<a name="l00553"></a>00553     {
<a name="l00554"></a>00554         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::FileClose()-&gt; called with closed ofs&quot;</span> );
<a name="l00555"></a>00555         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00556"></a>00556     }
<a name="l00557"></a>00557 
<a name="l00558"></a>00558     ofs.clear();
<a name="l00559"></a>00559     ofs.close();
<a name="l00560"></a>00560 
<a name="l00561"></a>00561     <span class="keywordflow">if</span> ( ofs.fail() )
<a name="l00562"></a>00562     {
<a name="l00563"></a>00563         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::FileClose()-&gt; error closing ofs&quot;</span> );
<a name="l00564"></a>00564         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00565"></a>00565     }
<a name="l00566"></a>00566 
<a name="l00567"></a>00567     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00568"></a>00568 }
<a name="l00569"></a>00569 
<a name="l00578"></a><a class="code" href="namespaceUtils.xhtml#a795e3185f741a3e0ee5025c4266afcd3">00578</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.xhtml#a7008f8effca71806721305d1834bde1e" title="Completes a read from a file.">Utils::FileClose</a>( ofstream&amp; ofs, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; dir, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file )
<a name="l00579"></a>00579 {
<a name="l00580"></a>00580     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00581"></a>00581     <span class="keywordtype">string</span> oldfi, newfi;
<a name="l00582"></a>00582 
<a name="l00583"></a>00583     <span class="keywordflow">if</span> ( !ofs.is_open() )
<a name="l00584"></a>00584     {
<a name="l00585"></a>00585         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::FileClose()-&gt; called with closed ofs&quot;</span> );
<a name="l00586"></a>00586         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00587"></a>00587     }
<a name="l00588"></a>00588 
<a name="l00589"></a>00589     ofs.clear();
<a name="l00590"></a>00590     ofs.close();
<a name="l00591"></a>00591 
<a name="l00592"></a>00592     <span class="keywordflow">if</span> ( ofs.fail() )
<a name="l00593"></a>00593     {
<a name="l00594"></a>00594         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::FileClose()-&gt; error closing ofs&quot;</span> );
<a name="l00595"></a>00595         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00596"></a>00596     }
<a name="l00597"></a>00597 
<a name="l00598"></a>00598     <span class="keywordflow">if</span> ( dir.empty() )
<a name="l00599"></a>00599     {
<a name="l00600"></a>00600         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::FileClose()-&gt; called with empty dir&quot;</span> );
<a name="l00601"></a>00601         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00602"></a>00602     }
<a name="l00603"></a>00603 
<a name="l00604"></a>00604     <span class="keywordflow">if</span> ( file.empty() )
<a name="l00605"></a>00605     {
<a name="l00606"></a>00606         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::FileClose()-&gt; called with empty file&quot;</span> );
<a name="l00607"></a>00607         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00608"></a>00608     }
<a name="l00609"></a>00609 
<a name="l00610"></a>00610     <span class="comment">// Ensure the copy to move from temp exists and we have permissions before unlinking the live file</span>
<a name="l00611"></a>00611     newfi = <a class="code" href="namespaceUtils.xhtml#ad21617b756ef242fbc66e63dec3e4e4d" title="Returns a string consisting of directory/file.ext.">DirPath</a>( <a class="code" href="config_8h.xhtml#a139b7703e057cd102ea853e5999f39fd" title="Directory for temporary files.">CFG_DAT_DIR_VAR</a>, file );
<a name="l00612"></a>00612     <span class="keywordflow">if</span> ( ::access( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( newfi ), R_OK | W_OK ) &lt; 0 &amp;&amp; errno != ENOENT )
<a name="l00613"></a>00613     {
<a name="l00614"></a>00614         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Utils::FileClose()-&gt;access()-&gt;&quot;</span> );
<a name="l00615"></a>00615         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00616"></a>00616     }
<a name="l00617"></a>00617 
<a name="l00618"></a>00618     <span class="comment">// Remove the live copy</span>
<a name="l00619"></a>00619     oldfi = <a class="code" href="namespaceUtils.xhtml#ad21617b756ef242fbc66e63dec3e4e4d" title="Returns a string consisting of directory/file.ext.">DirPath</a>( dir, file );
<a name="l00620"></a>00620     <span class="keywordflow">if</span> ( ::unlink( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( oldfi ) ) &lt; 0 &amp;&amp; errno != ENOENT )
<a name="l00621"></a>00621     {
<a name="l00622"></a>00622         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Utils::FileClose()-&gt;unlink()-&gt;&quot;</span> );
<a name="l00623"></a>00623         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00624"></a>00624     }
<a name="l00625"></a>00625 
<a name="l00626"></a>00626     <span class="comment">// Move the new copy over</span>
<a name="l00627"></a>00627     <span class="keywordflow">if</span> ( ::rename( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( newfi ), <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( oldfi ) ) &lt; 0 )
<a name="l00628"></a>00628     {
<a name="l00629"></a>00629         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Utils::FileClose()-&gt;rename()-&gt;&quot;</span> );
<a name="l00630"></a>00630         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00631"></a>00631     }
<a name="l00632"></a>00632 
<a name="l00633"></a>00633     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00634"></a>00634 }
<a name="l00635"></a>00635 
<a name="l00646"></a><a class="code" href="namespaceUtils.xhtml#a995fed3bf7ff41788f5b3dbdc6a70ecb">00646</a> <span class="keyword">const</span> multimap&lt;bool,string&gt; <a class="code" href="namespaceUtils.xhtml#a995fed3bf7ff41788f5b3dbdc6a70ecb" title="Return a multimap of a specified directory tree on disk.">Utils::ListDirectory</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; dir, <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; recursive, <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; path,  multimap&lt;bool,string&gt;&amp; output, <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; dir_close, <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; dir_open )
<a name="l00647"></a>00647 {
<a name="l00648"></a>00648     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00649"></a>00649     DIR* directory = NULL;
<a name="l00650"></a>00650     dirent* entry = NULL;
<a name="l00651"></a>00651     <span class="keywordtype">string</span> ifile, idir;
<a name="l00652"></a>00652 
<a name="l00653"></a>00653     <span class="keywordflow">if</span> ( dir.empty() )
<a name="l00654"></a>00654     {
<a name="l00655"></a>00655         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::OpenDirectory()-&gt; called with empty dir&quot;</span> );
<a name="l00656"></a>00656         <span class="keywordflow">return</span> output;
<a name="l00657"></a>00657     }
<a name="l00658"></a>00658 
<a name="l00659"></a>00659     <span class="keywordflow">if</span> ( ( directory = ::opendir( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( dir ) ) ) == NULL )
<a name="l00660"></a>00660     {
<a name="l00661"></a>00661         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Utils::OpenDirectory()-&gt;opendir()-&gt; returned NULL for dir: %s&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( dir ) );
<a name="l00662"></a>00662         <span class="keywordflow">return</span> output;
<a name="l00663"></a>00663     }
<a name="l00664"></a>00664 
<a name="l00665"></a>00665     dir_open++;
<a name="l00666"></a>00666     idir = dir;
<a name="l00667"></a>00667 
<a name="l00668"></a>00668     <span class="comment">// Ensure a trailing slash is present to properly recurse</span>
<a name="l00669"></a>00669     <span class="keywordflow">if</span> ( idir.compare( dir.length() - 1, 1, <span class="stringliteral">&quot;/&quot;</span> ) != 0 )
<a name="l00670"></a>00670         idir.append( <span class="stringliteral">&quot;/&quot;</span> );
<a name="l00671"></a>00671 
<a name="l00672"></a>00672     <span class="keywordflow">while</span> ( ( entry = ::readdir( directory ) ) != NULL )
<a name="l00673"></a>00673     {
<a name="l00674"></a>00674         ifile = entry-&gt;d_name;
<a name="l00675"></a>00675 
<a name="l00676"></a>00676         <span class="comment">// Skip over the unwanteds</span>
<a name="l00677"></a>00677         <span class="keywordflow">if</span> ( ifile == <span class="stringliteral">&quot;.&quot;</span> || ifile == <span class="stringliteral">&quot;..&quot;</span> )
<a name="l00678"></a>00678             <span class="keywordflow">continue</span>;
<a name="l00679"></a>00679 
<a name="l00680"></a>00680         <span class="keywordflow">if</span> ( <a class="code" href="namespaceUtils.xhtml#a303e8afc983db3b483fb450a1c499c1e" title="Determines if a file path is a directory or file on disk.">iDirectory</a>( idir + ifile ) )
<a name="l00681"></a>00681             output.insert( pair&lt;bool,string&gt;( <a class="code" href="enum_8h.xhtml#aa51282a877957eaf36ac9e8416145a53">UTILS_IS_DIRECTORY</a>, ifile ) );
<a name="l00682"></a>00682         <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( path )
<a name="l00683"></a>00683             output.insert( pair&lt;bool,string&gt;( <a class="code" href="enum_8h.xhtml#a9325070b1daf70dbe43f7fb9a341aaf2">UTILS_IS_FILE</a>, idir + ifile ) );
<a name="l00684"></a>00684         <span class="keywordflow">else</span>
<a name="l00685"></a>00685             output.insert( pair&lt;bool,string&gt;( <a class="code" href="enum_8h.xhtml#a9325070b1daf70dbe43f7fb9a341aaf2">UTILS_IS_FILE</a>, ifile ) );
<a name="l00686"></a>00686 
<a name="l00687"></a>00687         <span class="comment">// Only recurse if another directory is found, otherwise a file was found, so skip it</span>
<a name="l00688"></a>00688         <span class="keywordflow">if</span> ( <a class="code" href="namespaceUtils.xhtml#a303e8afc983db3b483fb450a1c499c1e" title="Determines if a file path is a directory or file on disk.">iDirectory</a>( idir + ifile ) &amp;&amp; recursive )
<a name="l00689"></a>00689             <a class="code" href="namespaceUtils.xhtml#a995fed3bf7ff41788f5b3dbdc6a70ecb" title="Return a multimap of a specified directory tree on disk.">ListDirectory</a>( idir + ifile, recursive, path, output, dir_close, dir_open );
<a name="l00690"></a>00690     }
<a name="l00691"></a>00691 
<a name="l00692"></a>00692     <span class="keywordflow">if</span> ( ::closedir( directory ) &lt; 0 )
<a name="l00693"></a>00693         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Utils::OpenDir()-&gt;closedir()-&gt;&quot;</span> );
<a name="l00694"></a>00694     <span class="keywordflow">else</span>
<a name="l00695"></a>00695         dir_close++;
<a name="l00696"></a>00696 
<a name="l00697"></a>00697     <span class="keywordflow">return</span> output;
<a name="l00698"></a>00698 }
<a name="l00699"></a>00699 
<a name="l00700"></a>00700 <span class="comment">/* Internal */</span>
<a name="l00710"></a><a class="code" href="namespaceUtils.xhtml#a33e08ea185b71aab494d83322ad3cd53">00710</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.xhtml#a33e08ea185b71aab494d83322ad3cd53" title="This is a nested wrapper for Utils::__FormatString and should not be called directly.">Utils::_FormatString</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; narg, <span class="keyword">const</span> bitset&lt;CFG_MEM_MAX_BITSET&gt;&amp; flags, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; caller, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; fmt, ... )
<a name="l00711"></a>00711 {
<a name="l00712"></a>00712     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( uflags );
<a name="l00713"></a>00713     va_list args;
<a name="l00714"></a>00714     <span class="keywordtype">string</span> output;
<a name="l00715"></a>00715 
<a name="l00716"></a>00716     <span class="keywordflow">if</span> ( fmt.empty() )
<a name="l00717"></a>00717     {
<a name="l00718"></a>00718         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( uflags, <span class="stringliteral">&quot;Utils::_FormatString()-&gt; called with empty fmt&quot;</span> );
<a name="l00719"></a>00719         <span class="keywordflow">return</span> output;
<a name="l00720"></a>00720     }
<a name="l00721"></a>00721 
<a name="l00722"></a>00722     va_start( args, fmt );
<a name="l00723"></a>00723     output = <a class="code" href="namespaceUtils.xhtml#a070c642e01b4b1d2ded94e234d32f65e" title="This is the printf-style string formatter. It should not be invoked directly, but rather by using Uti...">__FormatString</a>( narg, flags, caller, fmt, args );
<a name="l00724"></a>00724     va_end( args );
<a name="l00725"></a>00725 
<a name="l00726"></a>00726     <span class="keywordflow">return</span> output;
<a name="l00727"></a>00727 }
<a name="l00728"></a>00728 
<a name="l00738"></a><a class="code" href="namespaceUtils.xhtml#a070c642e01b4b1d2ded94e234d32f65e">00738</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.xhtml#a070c642e01b4b1d2ded94e234d32f65e" title="This is the printf-style string formatter. It should not be invoked directly, but rather by using Uti...">Utils::__FormatString</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; narg, <span class="keyword">const</span> bitset&lt;CFG_MEM_MAX_BITSET&gt;&amp; flags, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; caller, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; fmt, va_list&amp; val ) <span class="comment">// Thanks go to Darien @ MudBytes.net for the start of this</span>
<a name="l00739"></a>00739 {
<a name="l00740"></a>00740     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( uflags );
<a name="l00741"></a>00741     va_list args;
<a name="l00742"></a>00742     vector&lt;string&gt; arguments;
<a name="l00743"></a>00743     <a class="code" href="macros_8h.xhtml#a05e235f398566bf49e21735cf00fc656" title="Define an iterator variable (name) of (type) using (container).">ITER</a>( vector, <span class="keywordtype">string</span>, si );
<a name="l00744"></a>00744     vector&lt;char&gt; buf;
<a name="l00745"></a>00745     <span class="keywordtype">string</span> output, token;
<a name="l00746"></a>00746     <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a> size = 0;
<a name="l00747"></a>00747 
<a name="l00748"></a>00748     <span class="keywordflow">if</span> ( fmt.empty() )
<a name="l00749"></a>00749     {
<a name="l00750"></a>00750         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( uflags, <span class="stringliteral">&quot;Utils::__FormatString()-&gt; called with empty fmt&quot;</span> );
<a name="l00751"></a>00751         <span class="keywordflow">return</span> output;
<a name="l00752"></a>00752     }
<a name="l00753"></a>00753 
<a name="l00754"></a>00754     arguments = <a class="code" href="namespaceUtils.xhtml#a402a36406edb7938330204e83b1abe83" title="Returns a vector of strings split at spaces based on input.">StrTokens</a>( fmt );
<a name="l00755"></a>00755     <span class="keywordflow">for</span> ( si = arguments.begin(); si != arguments.end(); si++ )
<a name="l00756"></a>00756     {
<a name="l00757"></a>00757         token = *si;
<a name="l00758"></a>00758         <span class="keywordflow">if</span> ( token.find( <span class="stringliteral">&quot;%&quot;</span> ) != string::npos ) <span class="comment">// not foolproof, but it should catch some worst cases by attempting</span>
<a name="l00759"></a>00759             size++;                              <span class="comment">// to ensure a matching narg : format specifier count</span>
<a name="l00760"></a>00760     }
<a name="l00761"></a>00761 
<a name="l00762"></a>00762     <span class="keywordflow">if</span> ( narg != 1 &amp;&amp; narg != static_cast&lt;uint_t&gt;( size ) &amp;&amp; narg != <a class="code" href="namespaceUtils.xhtml#afaf029667f299587a52ba9c8de11edfa" title="Returns the number of a specific character in a given string.">NumChar</a>( fmt, <span class="stringliteral">&quot;%&quot;</span> ) ) <span class="comment">// if narg == 1 invocation was func( flags, string )</span>
<a name="l00763"></a>00763     {
<a name="l00764"></a>00764         bitset&lt;CFG_MEM_MAX_BITSET&gt; eflags;
<a name="l00765"></a>00765 
<a name="l00766"></a>00766         eflags.set( <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88a3953ba936b7fd0b7cbc726e534c63197">UTILS_TYPE_ERROR</a> );
<a name="l00767"></a>00767         <a class="code" href="utils_8h.xhtml#acf49e3634b60414304a9adfc79e02adb">Logger</a>( eflags, <span class="stringliteral">&quot;Number of arguments (%lu) did not match number of format specifiers (%lu) at: %s&quot;</span>, narg, size, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( caller ) );
<a name="l00768"></a>00768         <span class="keywordflow">return</span> output = <span class="stringliteral">&quot;&quot;</span>;
<a name="l00769"></a>00769     }
<a name="l00770"></a>00770 
<a name="l00771"></a>00771     va_copy( args, val );
<a name="l00772"></a>00772     size = vsnprintf( NULL, 0, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( fmt ), args );
<a name="l00773"></a>00773     va_end( args );
<a name="l00774"></a>00774 
<a name="l00775"></a>00775     va_copy( args, val );
<a name="l00776"></a>00776     buf.resize( size + 1 );
<a name="l00777"></a>00777     vsnprintf( &amp;buf[0], ( size + 1 ), <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( fmt ), args );
<a name="l00778"></a>00778     va_end( args );
<a name="l00779"></a>00779 
<a name="l00780"></a>00780     <span class="keywordflow">return</span> output = &amp;buf[0];
<a name="l00781"></a>00781 }
<a name="l00782"></a>00782 
<a name="l00792"></a><a class="code" href="namespaceUtils.xhtml#aa2ac8bf1bb304bab8f29829ec30af243">00792</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="namespaceUtils.xhtml#aa2ac8bf1bb304bab8f29829ec30af243" title="This is the logging output engine. It should not be invoked directly, but rather by calling Utils::Lo...">Utils::_Logger</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; narg, <span class="keyword">const</span> bitset&lt;CFG_MEM_MAX_BITSET&gt;&amp; flags, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; caller, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; fmt, ... )
<a name="l00793"></a>00793 {
<a name="l00794"></a>00794     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( uflags );
<a name="l00795"></a>00795     va_list args;
<a name="l00796"></a>00796     <span class="keywordtype">string</span> pre, post, output;
<a name="l00797"></a>00797     <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> i = 0;
<a name="l00798"></a>00798     chrono::high_resolution_clock::time_point tt;
<a name="l00799"></a>00799 
<a name="l00800"></a>00800     <span class="keywordflow">if</span> ( fmt.empty() )
<a name="l00801"></a>00801     {
<a name="l00802"></a>00802         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( uflags, <span class="stringliteral">&quot;Utils::_Logger()-&gt; called with empty fmt&quot;</span> );
<a name="l00803"></a>00803         <span class="keywordflow">return</span>;
<a name="l00804"></a>00804     }
<a name="l00805"></a>00805 
<a name="l00806"></a>00806     va_start( args, fmt );
<a name="l00807"></a>00807     output = <a class="code" href="namespaceUtils.xhtml#a070c642e01b4b1d2ded94e234d32f65e" title="This is the printf-style string formatter. It should not be invoked directly, but rather by using Uti...">__FormatString</a>( narg, flags, caller, fmt, args );
<a name="l00808"></a>00808     va_end( args );
<a name="l00809"></a>00809 
<a name="l00810"></a>00810     <span class="keywordflow">if</span> ( output.empty() )
<a name="l00811"></a>00811         <span class="keywordflow">return</span>;
<a name="l00812"></a>00812 
<a name="l00813"></a>00813     <span class="comment">// prepend timestamp</span>
<a name="l00814"></a>00814     tt = chrono::high_resolution_clock::now();
<a name="l00815"></a>00815     pre = <a class="code" href="namespaceUtils.xhtml#a2b2dad8fa1999271cf613dc735f851d4" title="Returns a given time as a string.">StrTime</a>( chrono::high_resolution_clock::to_time_t( tt ) );
<a name="l00816"></a>00816     pre.append( <span class="stringliteral">&quot; :: &quot;</span> );
<a name="l00817"></a>00817 
<a name="l00818"></a>00818     <span class="keywordflow">for</span> ( i = 0; i &lt; <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88aa435dc1cf64950a334aba3ae322dc7e3">MAX_UTILS</a>; i++ )
<a name="l00819"></a>00819     {
<a name="l00820"></a>00820         <span class="keywordflow">if</span> ( flags.test( i ) )
<a name="l00821"></a>00821         {
<a name="l00822"></a>00822             <span class="keywordflow">switch</span>( i )
<a name="l00823"></a>00823             {
<a name="l00824"></a>00824                 <span class="keywordflow">case</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88a285bb6b32d7a114b3103822c8ba11914">UTILS_DEBUG</a>: <span class="comment">//output caller</span>
<a name="l00825"></a>00825                     post.append( <span class="stringliteral">&quot; [&quot;</span> );
<a name="l00826"></a>00826                     post.append( caller );
<a name="l00827"></a>00827                     post.append( <span class="stringliteral">&quot;]&quot;</span> );
<a name="l00828"></a>00828                 <span class="keywordflow">break</span>;
<a name="l00829"></a>00829 
<a name="l00830"></a>00830                 <span class="keywordflow">case</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88a7d4a5f7891869a8964c9f3be6ad4fb03">UTILS_RAW</a>: <span class="comment">//no extraneous data applied</span>
<a name="l00831"></a>00831                     pre.clear();
<a name="l00832"></a>00832                     post.clear();
<a name="l00833"></a>00833                     i = <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88aa435dc1cf64950a334aba3ae322dc7e3">MAX_UTILS</a>;
<a name="l00834"></a>00834                 <span class="keywordflow">break</span>;
<a name="l00835"></a>00835 
<a name="l00836"></a>00836                 <span class="keywordflow">case</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88a3953ba936b7fd0b7cbc726e534c63197">UTILS_TYPE_ERROR</a>: <span class="comment">//so fancy!</span>
<a name="l00837"></a>00837                     pre.append( <a class="code" href="config_8h.xhtml#ab1422261ac78a78462c06713ccb88155" title="String to prepend to logs flagged UTILS_TYPE_ERROR.">CFG_STR_UTILS_ERROR</a> );
<a name="l00838"></a>00838                 <span class="keywordflow">break</span>;
<a name="l00839"></a>00839 
<a name="l00840"></a>00840                 <span class="keywordflow">case</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88af08cecf6f2c8ca5d3c5e4202a8450a92">UTILS_TYPE_INFO</a>: <span class="comment">//so fancy!</span>
<a name="l00841"></a>00841                     pre.append( <a class="code" href="config_8h.xhtml#aa5d991baf2e5165be5c3f1a1a53eacd6" title="String to prepend to logs flagged UTILS_TYPE_INFO.">CFG_STR_UTILS_INFO</a> );
<a name="l00842"></a>00842                 <span class="keywordflow">break</span>;
<a name="l00843"></a>00843 
<a name="l00844"></a>00844                 <span class="keywordflow">case</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88ad9f4e83dec6fdf793451e709fb5d9509">UTILS_TYPE_SOCKET</a>: <span class="comment">//so fancy!</span>
<a name="l00845"></a>00845                     pre.append( <a class="code" href="config_8h.xhtml#ac38f0f1beed2da9e2c6e0210da5ba57f" title="String to prepend to logs flagged UTILS_TYPE_SOCKET.">CFG_STR_UTILS_SOCKET</a> );
<a name="l00846"></a>00846                 <span class="keywordflow">break</span>;
<a name="l00847"></a>00847 
<a name="l00848"></a>00848                 <span class="keywordflow">default</span>:
<a name="l00849"></a>00849                 <span class="keywordflow">break</span>;
<a name="l00850"></a>00850             }
<a name="l00851"></a>00851         }
<a name="l00852"></a>00852     }
<a name="l00853"></a>00853 
<a name="l00854"></a>00854     clog &lt;&lt; pre &lt;&lt; output &lt;&lt; post &lt;&lt; endl;
<a name="l00857"></a>00857     <span class="keywordflow">return</span>;
<a name="l00858"></a>00858 }
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Sun Apr 28 2013 21:23:22 for NAMS - Not Another MUD Server by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
