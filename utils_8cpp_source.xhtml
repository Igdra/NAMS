<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>NAMS - Not Another MUD Server: utils.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">NAMS - Not Another MUD Server
   
   </div>
   <div id="projectbrief">NAMS is a C++ MUD server with the primary goals of a safe, modular design and a server core that is substantially decouppled from game logic.</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="dynsections.js"></script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">utils.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="utils_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/***************************************************************************</span>
<a name="l00002"></a>00002 <span class="comment"> * NAMS - Not Another MUD Server                                           *</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2012 Matthew Goff (matt@goff.cc) &lt;http://www.ackmud.net/&gt; *</span>
<a name="l00004"></a>00004 <span class="comment"> *                                                                         *</span>
<a name="l00005"></a>00005 <span class="comment"> * This program is free software: you can redistribute it and/or modify    *</span>
<a name="l00006"></a>00006 <span class="comment"> * it under the terms of the GNU General Public License as published by    *</span>
<a name="l00007"></a>00007 <span class="comment"> * the Free Software Foundation, either version 3 of the License, or       *</span>
<a name="l00008"></a>00008 <span class="comment"> * (at your option) any later version.                                     *</span>
<a name="l00009"></a>00009 <span class="comment"> *                                                                         *</span>
<a name="l00010"></a>00010 <span class="comment"> * This program is distributed in the hope that it will be useful,         *</span>
<a name="l00011"></a>00011 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of          *</span>
<a name="l00012"></a>00012 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *</span>
<a name="l00013"></a>00013 <span class="comment"> * GNU General Public License for more details.                            *</span>
<a name="l00014"></a>00014 <span class="comment"> *                                                                         *</span>
<a name="l00015"></a>00015 <span class="comment"> * You should have received a copy of the GNU General Public License       *</span>
<a name="l00016"></a>00016 <span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.   *</span>
<a name="l00017"></a>00017 <span class="comment"> ***************************************************************************/</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="includes_8h.xhtml" title="All non-system includes that need to be within each .cpp file.">h/includes.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="class_8h.xhtml" title="All class declarations.">h/class.h</a>&quot;</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="utils_8h.xhtml" title="The Utils namespace.">h/utils.h</a>&quot;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="comment">/* Core */</span>
<a name="l00037"></a><a class="code" href="namespaceUtils.xhtml#adbb91eecf7e80e6e97b3ebe38123cc12">00037</a> <span class="keyword">const</span> timeval <a class="code" href="namespaceUtils.xhtml#adbb91eecf7e80e6e97b3ebe38123cc12" title="Returns the current system time.">Utils::CurrentTime</a>()
<a name="l00038"></a>00038 {
<a name="l00039"></a>00039     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00040"></a>00040     timeval now;
<a name="l00041"></a>00041 
<a name="l00042"></a>00042     <span class="keywordflow">if</span> ( ::gettimeofday( &amp;now, NULL ) &lt; 0 )
<a name="l00043"></a>00043     {
<a name="l00044"></a>00044         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Utils::CurrentTime()-&gt;&quot;</span> );
<a name="l00045"></a>00045         <span class="keywordflow">return</span> timeval();
<a name="l00046"></a>00046     }
<a name="l00047"></a>00047 
<a name="l00048"></a>00048     <span class="keywordflow">return</span> now;
<a name="l00049"></a>00049 }
<a name="l00050"></a>00050 
<a name="l00058"></a><a class="code" href="namespaceUtils.xhtml#a405af6e04f92e289f5be1f8ae24a78ee">00058</a> <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> <a class="code" href="namespaceUtils.xhtml#a405af6e04f92e289f5be1f8ae24a78ee" title="Calculates the different between two timeval variables.">Utils::DiffTime</a>( <span class="keyword">const</span> timeval&amp; prev, <span class="keyword">const</span> timeval&amp; current, <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; granularity )
<a name="l00059"></a>00059 {
<a name="l00060"></a>00060     <span class="keywordflow">switch</span> ( granularity )
<a name="l00061"></a>00061     {
<a name="l00062"></a>00062         <span class="keywordflow">case</span>  <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88ae8ea1ef3caec7348d521d686adcfbfff">UTILS_TIME_S</a>: <span class="keywordflow">return</span> ( current.tv_sec - prev.tv_sec );
<a name="l00063"></a>00063         <span class="keywordflow">case</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88ab80ef2c700675085764563f89553686d">UTILS_TIME_MS</a>: <span class="keywordflow">return</span> ( current.tv_usec - prev.tv_usec ) / 1000;
<a name="l00064"></a>00064         <span class="keywordflow">case</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88aee1cb989b30c560f341cf31b44f1f64d">UTILS_TIME_US</a>:
<a name="l00065"></a>00065                    <span class="keywordflow">default</span>: <span class="keywordflow">return</span> ( current.tv_usec - prev.tv_usec );
<a name="l00066"></a>00066     }
<a name="l00067"></a>00067 }
<a name="l00068"></a>00068 
<a name="l00076"></a><a class="code" href="namespaceUtils.xhtml#addb4a550d4405e6351e52a275fae8107">00076</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.xhtml#addb4a550d4405e6351e52a275fae8107" title="Returns a string consisting of directory/file.ext.">Utils::DirPath</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; directory, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; ext )
<a name="l00077"></a>00077 {
<a name="l00078"></a>00078     <span class="keywordtype">string</span> path( directory );
<a name="l00079"></a>00079 
<a name="l00080"></a>00080     path.append( <span class="stringliteral">&quot;/&quot;</span> );
<a name="l00081"></a>00081 
<a name="l00082"></a>00082     <span class="keywordflow">if</span> ( !ext.empty() )
<a name="l00083"></a>00083     {
<a name="l00084"></a>00084         path.append( file.substr( 0, file.find_last_of( <span class="stringliteral">&quot;.&quot;</span> ) + 1 ) );
<a name="l00085"></a>00085         path.append( ext );
<a name="l00086"></a>00086     }
<a name="l00087"></a>00087     <span class="keywordflow">else</span>
<a name="l00088"></a>00088         path.append( file );
<a name="l00089"></a>00089 
<a name="l00090"></a>00090     <span class="keywordflow">return</span> path;
<a name="l00091"></a>00091 }
<a name="l00092"></a>00092 
<a name="l00102"></a><a class="code" href="namespaceUtils.xhtml#a33e08ea185b71aab494d83322ad3cd53">00102</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.xhtml#a33e08ea185b71aab494d83322ad3cd53" title="This is a nested wrapper for Utils::__FormatString and should not be called directly.">Utils::_FormatString</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; narg, <span class="keyword">const</span> bitset&lt;CFG_MEM_MAX_BITSET&gt;&amp; flags, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; caller, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; fmt, ... )
<a name="l00103"></a>00103 {
<a name="l00104"></a>00104     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( uflags );
<a name="l00105"></a>00105     va_list args;
<a name="l00106"></a>00106     <span class="keywordtype">string</span> output;
<a name="l00107"></a>00107 
<a name="l00108"></a>00108     <span class="keywordflow">if</span> ( fmt.empty() )
<a name="l00109"></a>00109     {
<a name="l00110"></a>00110         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( uflags, <span class="stringliteral">&quot;Utils::_FormatString()-&gt; called with empty fmt&quot;</span> );
<a name="l00111"></a>00111         <span class="keywordflow">return</span> output;
<a name="l00112"></a>00112     }
<a name="l00113"></a>00113 
<a name="l00114"></a>00114     va_start( args, fmt );
<a name="l00115"></a>00115     output = <a class="code" href="namespaceUtils.xhtml#a070c642e01b4b1d2ded94e234d32f65e" title="This is the printf-style string formatter. It should not be invoked directly, but rather by using Uti...">__FormatString</a>( narg, flags, caller, fmt, args );
<a name="l00116"></a>00116     va_end( args );
<a name="l00117"></a>00117 
<a name="l00118"></a>00118     <span class="keywordflow">return</span> output;
<a name="l00119"></a>00119 }
<a name="l00120"></a>00120 
<a name="l00130"></a><a class="code" href="namespaceUtils.xhtml#a070c642e01b4b1d2ded94e234d32f65e">00130</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.xhtml#a070c642e01b4b1d2ded94e234d32f65e" title="This is the printf-style string formatter. It should not be invoked directly, but rather by using Uti...">Utils::__FormatString</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; narg, <span class="keyword">const</span> bitset&lt;CFG_MEM_MAX_BITSET&gt;&amp; flags, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; caller, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; fmt, va_list&amp; val ) <span class="comment">// Thanks go to Darien @ MudBytes.net for the start of this</span>
<a name="l00131"></a>00131 {
<a name="l00132"></a>00132     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( uflags );
<a name="l00133"></a>00133     va_list args;
<a name="l00134"></a>00134     vector&lt;string&gt; arguments;
<a name="l00135"></a>00135     vector&lt;string&gt;::iterator si;
<a name="l00136"></a>00136     vector&lt;char&gt; buf;
<a name="l00137"></a>00137     <span class="keywordtype">string</span> output, token;
<a name="l00138"></a>00138     <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a> size = 0;
<a name="l00139"></a>00139 
<a name="l00140"></a>00140     <span class="keywordflow">if</span> ( fmt.empty() )
<a name="l00141"></a>00141     {
<a name="l00142"></a>00142         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( uflags, <span class="stringliteral">&quot;Utils::__FormatString()-&gt; called with empty fmt&quot;</span> );
<a name="l00143"></a>00143         <span class="keywordflow">return</span> output;
<a name="l00144"></a>00144     }
<a name="l00145"></a>00145 
<a name="l00146"></a>00146     arguments = <a class="code" href="namespaceUtils.xhtml#a498e31ec51c129ae9b68a20aa4e05c57" title="Returns a vector of strings split at spaces based on input.">StrTokens</a>( fmt );
<a name="l00147"></a>00147     <span class="keywordflow">for</span> ( si = arguments.begin(); si != arguments.end(); si++ )
<a name="l00148"></a>00148     {
<a name="l00149"></a>00149         token = *si;
<a name="l00150"></a>00150         <span class="keywordflow">if</span> ( token.find( <span class="stringliteral">&quot;%&quot;</span> ) != string::npos ) <span class="comment">// not foolproof, but it should catch some worst cases by attempting</span>
<a name="l00151"></a>00151             size++;                              <span class="comment">// to ensure a matching narg : format specifier count</span>
<a name="l00152"></a>00152     }
<a name="l00153"></a>00153 
<a name="l00154"></a>00154     <span class="keywordflow">if</span> ( narg != 1 &amp;&amp; narg != static_cast&lt;uint_t&gt;( size ) &amp;&amp; narg != <a class="code" href="namespaceUtils.xhtml#afaf029667f299587a52ba9c8de11edfa" title="Returns the number of a specific character in a given string.">NumChar</a>( fmt, <span class="stringliteral">&quot;%&quot;</span> ) ) <span class="comment">// if narg == 1 invocation was func( flags, string )</span>
<a name="l00155"></a>00155     {
<a name="l00156"></a>00156         bitset&lt;CFG_MEM_MAX_BITSET&gt; eflags;
<a name="l00157"></a>00157 
<a name="l00158"></a>00158         eflags.set( <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88a3953ba936b7fd0b7cbc726e534c63197">UTILS_TYPE_ERROR</a> );
<a name="l00159"></a>00159         <a class="code" href="utils_8h.xhtml#acf49e3634b60414304a9adfc79e02adb">Logger</a>( eflags, <span class="stringliteral">&quot;Number of arguments (%lu) did not match number of format specifiers (%lu) at: %s&quot;</span>, narg, size, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( caller ) );
<a name="l00160"></a>00160         <span class="keywordflow">return</span> output = <span class="stringliteral">&quot;&quot;</span>;
<a name="l00161"></a>00161     }
<a name="l00162"></a>00162 
<a name="l00163"></a>00163     va_copy( args, val );
<a name="l00164"></a>00164     size = vsnprintf( NULL, 0, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( fmt ), args );
<a name="l00165"></a>00165     va_end( args );
<a name="l00166"></a>00166 
<a name="l00167"></a>00167     va_copy( args, val );
<a name="l00168"></a>00168     buf.resize( size + 1 );
<a name="l00169"></a>00169     vsnprintf( &amp;buf[0], ( size + 1 ), <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( fmt ), args );
<a name="l00170"></a>00170     va_end( args );
<a name="l00171"></a>00171 
<a name="l00172"></a>00172     <span class="keywordflow">return</span> output = &amp;buf[0];
<a name="l00173"></a>00173 }
<a name="l00174"></a>00174 
<a name="l00184"></a><a class="code" href="namespaceUtils.xhtml#aa2ac8bf1bb304bab8f29829ec30af243">00184</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="namespaceUtils.xhtml#aa2ac8bf1bb304bab8f29829ec30af243" title="This is the logging output engine. It should not be invoked directly, but rather by calling Utils::Lo...">Utils::_Logger</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; narg, <span class="keyword">const</span> bitset&lt;CFG_MEM_MAX_BITSET&gt;&amp; flags, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; caller, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; fmt, ... )
<a name="l00185"></a>00185 {
<a name="l00186"></a>00186     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( uflags );
<a name="l00187"></a>00187     va_list args;
<a name="l00188"></a>00188     <span class="keywordtype">string</span> pre, post, output;
<a name="l00189"></a>00189     <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> i = 0;
<a name="l00190"></a>00190 
<a name="l00191"></a>00191     <span class="keywordflow">if</span> ( fmt.empty() )
<a name="l00192"></a>00192     {
<a name="l00193"></a>00193         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( uflags, <span class="stringliteral">&quot;Utils::_Logger()-&gt; called with empty fmt&quot;</span> );
<a name="l00194"></a>00194         <span class="keywordflow">return</span>;
<a name="l00195"></a>00195     }
<a name="l00196"></a>00196 
<a name="l00197"></a>00197     va_start( args, fmt );
<a name="l00198"></a>00198     output = <a class="code" href="namespaceUtils.xhtml#a070c642e01b4b1d2ded94e234d32f65e" title="This is the printf-style string formatter. It should not be invoked directly, but rather by using Uti...">__FormatString</a>( narg, flags, caller, fmt, args );
<a name="l00199"></a>00199     va_end( args );
<a name="l00200"></a>00200 
<a name="l00201"></a>00201     <span class="keywordflow">if</span> ( output.empty() )
<a name="l00202"></a>00202         <span class="keywordflow">return</span>;
<a name="l00203"></a>00203 
<a name="l00204"></a>00204     <span class="comment">// prepend timestamp</span>
<a name="l00205"></a>00205     pre = <a class="code" href="namespaceUtils.xhtml#aa3855eafe3e4898c743bc47cdc962a4a" title="Returns a given time as a string.">StrTime</a>( <a class="code" href="namespaceUtils.xhtml#adbb91eecf7e80e6e97b3ebe38123cc12" title="Returns the current system time.">CurrentTime</a>() );
<a name="l00206"></a>00206     pre.append( <span class="stringliteral">&quot; :: &quot;</span> );
<a name="l00207"></a>00207 
<a name="l00208"></a>00208     <span class="keywordflow">for</span> ( i = 0; i &lt; <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88aa435dc1cf64950a334aba3ae322dc7e3">MAX_UTILS</a>; i++ )
<a name="l00209"></a>00209     {
<a name="l00210"></a>00210         <span class="keywordflow">if</span> ( flags.test( i ) )
<a name="l00211"></a>00211         {
<a name="l00212"></a>00212             <span class="keywordflow">switch</span>( i )
<a name="l00213"></a>00213             {
<a name="l00214"></a>00214                 <span class="keywordflow">case</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88a285bb6b32d7a114b3103822c8ba11914">UTILS_DEBUG</a>: <span class="comment">//output caller</span>
<a name="l00215"></a>00215                     post.append( <span class="stringliteral">&quot; [&quot;</span> );
<a name="l00216"></a>00216                     post.append( caller );
<a name="l00217"></a>00217                     post.append( <span class="stringliteral">&quot;]&quot;</span> );
<a name="l00218"></a>00218                 <span class="keywordflow">break</span>;
<a name="l00219"></a>00219                 <span class="keywordflow">case</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88a7d4a5f7891869a8964c9f3be6ad4fb03">UTILS_RAW</a>: <span class="comment">//no extraneous data applied</span>
<a name="l00220"></a>00220                     pre.clear();
<a name="l00221"></a>00221                     post.clear();
<a name="l00222"></a>00222                     i = <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88aa435dc1cf64950a334aba3ae322dc7e3">MAX_UTILS</a>;
<a name="l00223"></a>00223                 <span class="keywordflow">break</span>;
<a name="l00224"></a>00224                 <span class="keywordflow">case</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88a3953ba936b7fd0b7cbc726e534c63197">UTILS_TYPE_ERROR</a>: <span class="comment">//so fancy!</span>
<a name="l00225"></a>00225                     pre.append( <a class="code" href="config_8h.xhtml#ab1422261ac78a78462c06713ccb88155" title="String to prepend to logs flagged UTILS_TYPE_ERROR.">CFG_STR_UTILS_ERROR</a> );
<a name="l00226"></a>00226                 <span class="keywordflow">break</span>;
<a name="l00227"></a>00227                 <span class="keywordflow">case</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88af08cecf6f2c8ca5d3c5e4202a8450a92">UTILS_TYPE_INFO</a>: <span class="comment">//so fancy!</span>
<a name="l00228"></a>00228                     pre.append( <a class="code" href="config_8h.xhtml#aa5d991baf2e5165be5c3f1a1a53eacd6" title="String to prepend to logs flagged UTILS_TYPE_INFO.">CFG_STR_UTILS_INFO</a> );
<a name="l00229"></a>00229                 <span class="keywordflow">break</span>;
<a name="l00230"></a>00230                 <span class="keywordflow">case</span> <a class="code" href="enum_8h.xhtml#a3e334343716a0199504bec5002e4be88ad9f4e83dec6fdf793451e709fb5d9509">UTILS_TYPE_SOCKET</a>: <span class="comment">//so fancy!</span>
<a name="l00231"></a>00231                     pre.append( <a class="code" href="config_8h.xhtml#ac38f0f1beed2da9e2c6e0210da5ba57f" title="String to prepend to logs flagged UTILS_TYPE_SOCKET.">CFG_STR_UTILS_SOCKET</a> );
<a name="l00232"></a>00232                 <span class="keywordflow">break</span>;
<a name="l00233"></a>00233                 <span class="keywordflow">default</span>: <span class="keywordflow">break</span>;
<a name="l00234"></a>00234             }
<a name="l00235"></a>00235         }
<a name="l00236"></a>00236     }
<a name="l00237"></a>00237 
<a name="l00238"></a>00238     clog &lt;&lt; pre &lt;&lt; output &lt;&lt; post &lt;&lt; endl;
<a name="l00241"></a>00241     <span class="keywordflow">return</span>;
<a name="l00242"></a>00242 }
<a name="l00243"></a>00243 
<a name="l00250"></a><a class="code" href="namespaceUtils.xhtml#afaf029667f299587a52ba9c8de11edfa">00250</a> <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> <a class="code" href="namespaceUtils.xhtml#afaf029667f299587a52ba9c8de11edfa" title="Returns the number of a specific character in a given string.">Utils::NumChar</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; input, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; item )
<a name="l00251"></a>00251 {
<a name="l00252"></a>00252     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00253"></a>00253     <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> amount = 0, i = 0;
<a name="l00254"></a>00254 
<a name="l00255"></a>00255     <span class="keywordflow">if</span> ( input.empty() )
<a name="l00256"></a>00256     {
<a name="l00257"></a>00257         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::NumChar()-&gt; called with empty input&quot;</span> );
<a name="l00258"></a>00258         <span class="keywordflow">return</span> amount;
<a name="l00259"></a>00259     }
<a name="l00260"></a>00260 
<a name="l00261"></a>00261     <span class="keywordflow">for</span> ( i = 0; i &lt; input.length(); i++ )
<a name="l00262"></a>00262         <span class="keywordflow">if</span> ( input[i] == item[0] )
<a name="l00263"></a>00263             amount++;
<a name="l00264"></a>00264 
<a name="l00265"></a>00265     <span class="keywordflow">return</span> amount;
<a name="l00266"></a>00266 }
<a name="l00267"></a>00267 
<a name="l00273"></a><a class="code" href="namespaceUtils.xhtml#a8c70e85acdb1549aa4cd3a16b8d8d9cf">00273</a> <span class="keyword">const</span> vector&lt;string&gt; <a class="code" href="namespaceUtils.xhtml#a8c70e85acdb1549aa4cd3a16b8d8d9cf" title="Returns a vector of strings split at linebreaks based on input.">Utils::StrNewlines</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; input )
<a name="l00274"></a>00274 {
<a name="l00275"></a>00275     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00276"></a>00276 
<a name="l00277"></a>00277     <span class="keywordflow">if</span> ( input.empty() )
<a name="l00278"></a>00278     {
<a name="l00279"></a>00279         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::StrNewlines()-&gt; called with empty input&quot;</span> );
<a name="l00280"></a>00280         <span class="keywordflow">return</span> vector&lt;string&gt;();
<a name="l00281"></a>00281     }
<a name="l00282"></a>00282 
<a name="l00283"></a>00283     stringstream ss( input );
<a name="l00284"></a>00284     <span class="keywordtype">string</span> line;
<a name="l00285"></a>00285     vector&lt;string&gt; output;
<a name="l00286"></a>00286 
<a name="l00287"></a>00287     <span class="keywordflow">while</span> ( getline( ss, line ) )
<a name="l00288"></a>00288     {
<a name="l00289"></a>00289         <span class="comment">// Strip the newline off the end</span>
<a name="l00290"></a>00290         line.resize( line.length() - 1 );
<a name="l00291"></a>00291         <span class="keywordflow">if</span> ( !line.empty() )
<a name="l00292"></a>00292             output.push_back( line );
<a name="l00293"></a>00293     }
<a name="l00294"></a>00294 
<a name="l00295"></a>00295     <span class="keywordflow">return</span> output;
<a name="l00296"></a>00296 }
<a name="l00297"></a>00297 
<a name="l00303"></a><a class="code" href="namespaceUtils.xhtml#aa3855eafe3e4898c743bc47cdc962a4a">00303</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.xhtml#aa3855eafe3e4898c743bc47cdc962a4a" title="Returns a given time as a string.">Utils::StrTime</a>( <span class="keyword">const</span> timeval&amp; now )
<a name="l00304"></a>00304 {
<a name="l00305"></a>00305     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00306"></a>00306     <span class="keywordtype">string</span> output;
<a name="l00307"></a>00307 
<a name="l00308"></a>00308     <span class="keywordflow">if</span> ( ( output = ::ctime( &amp;now.tv_sec ) ).empty() )
<a name="l00309"></a>00309     {
<a name="l00310"></a>00310         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::CurrentTime()-&gt;ctime()-&gt; returned NULL&quot;</span> );
<a name="l00311"></a>00311         <span class="keywordflow">return</span> output;
<a name="l00312"></a>00312     }
<a name="l00313"></a>00313 
<a name="l00314"></a>00314     <span class="comment">// Strip the newline off the end</span>
<a name="l00315"></a>00315     output.resize( output.length() - 1 );
<a name="l00316"></a>00316 
<a name="l00317"></a>00317     <span class="keywordflow">return</span> output;
<a name="l00318"></a>00318 }
<a name="l00319"></a>00319 
<a name="l00325"></a><a class="code" href="namespaceUtils.xhtml#a498e31ec51c129ae9b68a20aa4e05c57">00325</a> <span class="keyword">const</span> vector&lt;string&gt; <a class="code" href="namespaceUtils.xhtml#a498e31ec51c129ae9b68a20aa4e05c57" title="Returns a vector of strings split at spaces based on input.">Utils::StrTokens</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; input )
<a name="l00326"></a>00326 {
<a name="l00327"></a>00327     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00328"></a>00328 
<a name="l00329"></a>00329     <span class="keywordflow">if</span> ( input.empty() )
<a name="l00330"></a>00330     {
<a name="l00331"></a>00331         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::StrTokens()-&gt; called with empty input&quot;</span> );
<a name="l00332"></a>00332         <span class="keywordflow">return</span> vector&lt;string&gt;();
<a name="l00333"></a>00333     }
<a name="l00334"></a>00334 
<a name="l00335"></a>00335     stringstream ss( input );
<a name="l00336"></a>00336     istream_iterator&lt;string&gt; si( ss );
<a name="l00337"></a>00337     istream_iterator&lt;string&gt; end;
<a name="l00338"></a>00338     vector&lt;string&gt; output( si, end );
<a name="l00339"></a>00339 
<a name="l00340"></a>00340     <span class="keywordflow">return</span> output;
<a name="l00341"></a>00341 }
<a name="l00342"></a>00342 
<a name="l00343"></a>00343 <span class="comment">/* Query */</span>
<a name="l00350"></a><a class="code" href="namespaceUtils.xhtml#a303e8afc983db3b483fb450a1c499c1e">00350</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.xhtml#a303e8afc983db3b483fb450a1c499c1e" title="Determines if a file path is a directory or file on disk.">Utils::iDirectory</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; dir )
<a name="l00351"></a>00351 {
<a name="l00352"></a>00352     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00353"></a>00353     <span class="keyword">struct </span>stat dir_info;
<a name="l00354"></a>00354 
<a name="l00355"></a>00355     <span class="keywordflow">if</span> ( ::stat( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( dir ), &amp;dir_info ) &lt; 0 )
<a name="l00356"></a>00356     {
<a name="l00357"></a>00357         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Utils::iDirectory()-&gt;stat()-&gt;&quot;</span> );
<a name="l00358"></a>00358         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00359"></a>00359     }
<a name="l00360"></a>00360 
<a name="l00361"></a>00361     <span class="keywordflow">if</span> ( !S_ISDIR( dir_info.st_mode ) )
<a name="l00362"></a>00362         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00363"></a>00363 
<a name="l00364"></a>00364     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00365"></a>00365 }
<a name="l00366"></a>00366 
<a name="l00373"></a><a class="code" href="namespaceUtils.xhtml#a7d40818a602fb21db4b4f0917705f85b">00373</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.xhtml#a7d40818a602fb21db4b4f0917705f85b" title="Determines if a file path is a file or directory on disk.">Utils::iFile</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file )
<a name="l00374"></a>00374 {
<a name="l00375"></a>00375     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00376"></a>00376     <span class="keyword">struct </span>stat dir_info;
<a name="l00377"></a>00377 
<a name="l00378"></a>00378     <span class="keywordflow">if</span> ( ::stat( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( file ), &amp;dir_info ) &lt; 0 )
<a name="l00379"></a>00379     {
<a name="l00380"></a>00380         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Utils::iFile()-&gt;stat()-&gt;&quot;</span> );
<a name="l00381"></a>00381         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00382"></a>00382     }
<a name="l00383"></a>00383 
<a name="l00384"></a>00384     <span class="keywordflow">if</span> ( !S_ISREG( dir_info.st_mode ) )
<a name="l00385"></a>00385         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00386"></a>00386 
<a name="l00387"></a>00387     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00388"></a>00388 }
<a name="l00389"></a>00389 
<a name="l00396"></a><a class="code" href="namespaceUtils.xhtml#a47aae40aead5b696e927fb0cdd336442">00396</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.xhtml#a47aae40aead5b696e927fb0cdd336442" title="Determines if a string is only a string of numerical values.">Utils::iNumber</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; input )
<a name="l00397"></a>00397 {
<a name="l00398"></a>00398     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00399"></a>00399     <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> i = 0;
<a name="l00400"></a>00400 
<a name="l00401"></a>00401     <span class="keywordflow">if</span> ( input.empty() )
<a name="l00402"></a>00402     {
<a name="l00403"></a>00403         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::iNumber()-&gt; called with empty input&quot;</span> );
<a name="l00404"></a>00404         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00405"></a>00405     }
<a name="l00406"></a>00406 
<a name="l00407"></a>00407     <span class="keywordflow">for</span> ( i = 0; i &lt; input.length(); i++ )
<a name="l00408"></a>00408         <span class="keywordflow">if</span> ( !isdigit( input[i] ) )
<a name="l00409"></a>00409             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00410"></a>00410 
<a name="l00411"></a>00411     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00412"></a>00412 }
<a name="l00413"></a>00413 
<a name="l00420"></a><a class="code" href="namespaceUtils.xhtml#a158e1deb611937a6313e8683fe7db3fc">00420</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.xhtml#a158e1deb611937a6313e8683fe7db3fc" title="Determines if a file is readable.">Utils::iReadable</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file )
<a name="l00421"></a>00421 {
<a name="l00422"></a>00422     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00423"></a>00423     ifstream ifile;
<a name="l00424"></a>00424     <span class="keywordtype">bool</span> ret = <span class="keyword">false</span>;
<a name="l00425"></a>00425 
<a name="l00426"></a>00426     ifile.open( file, ifstream::in );
<a name="l00427"></a>00427 
<a name="l00428"></a>00428     <span class="keywordflow">if</span> ( ifile.fail() )
<a name="l00429"></a>00429         ret = <span class="keyword">false</span>;
<a name="l00430"></a>00430     <span class="keywordflow">else</span>
<a name="l00431"></a>00431         ret = <span class="keyword">true</span>;
<a name="l00432"></a>00432 
<a name="l00433"></a>00433     ifile.close();
<a name="l00434"></a>00434 
<a name="l00435"></a>00435     <span class="keywordflow">return</span> ret;
<a name="l00436"></a>00436 }
<a name="l00437"></a>00437 
<a name="l00438"></a>00438 <span class="comment">/* Manipulate */</span>
<a name="l00448"></a><a class="code" href="namespaceUtils.xhtml#a014607a95c6d01ee99564479b3620ee7">00448</a> <span class="keyword">const</span> multimap&lt;bool,string&gt; <a class="code" href="namespaceUtils.xhtml#a014607a95c6d01ee99564479b3620ee7" title="Return a multimap of a specified directory tree on disk.">Utils::ListDirectory</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; dir, <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; recursive, multimap&lt;bool,string&gt;&amp; output, <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; dir_close, <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; dir_open )
<a name="l00449"></a>00449 {
<a name="l00450"></a>00450     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00451"></a>00451     DIR* directory = NULL;
<a name="l00452"></a>00452     dirent* entry = NULL;
<a name="l00453"></a>00453     <span class="keywordtype">string</span> ifile, idir;
<a name="l00454"></a>00454 
<a name="l00455"></a>00455     <span class="keywordflow">if</span> ( ( directory = ::opendir( <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( dir ) ) ) == NULL )
<a name="l00456"></a>00456     {
<a name="l00457"></a>00457         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Utils::OpenDirectory()-&gt;opendir()-&gt; returned NULL for dir: %s&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( dir ) );
<a name="l00458"></a>00458         <span class="keywordflow">return</span> output;
<a name="l00459"></a>00459     }
<a name="l00460"></a>00460 
<a name="l00461"></a>00461     dir_open++;
<a name="l00462"></a>00462     idir = dir;
<a name="l00463"></a>00463 
<a name="l00464"></a>00464     <span class="comment">// Ensure a trailing slash is present to properly recurse</span>
<a name="l00465"></a>00465     <span class="keywordflow">if</span> ( idir.compare( dir.length() - 1, 1, <span class="stringliteral">&quot;/&quot;</span> ) != 0 )
<a name="l00466"></a>00466         idir.append( <span class="stringliteral">&quot;/&quot;</span> );
<a name="l00467"></a>00467 
<a name="l00468"></a>00468     <span class="keywordflow">while</span> ( ( entry = ::readdir( directory ) ) != NULL )
<a name="l00469"></a>00469     {
<a name="l00470"></a>00470         ifile = entry-&gt;d_name;
<a name="l00471"></a>00471 
<a name="l00472"></a>00472         <span class="comment">// Skip over the unwanteds</span>
<a name="l00473"></a>00473         <span class="keywordflow">if</span> ( ifile.compare( <span class="stringliteral">&quot;.&quot;</span> ) == 0 || ifile.compare( <span class="stringliteral">&quot;..&quot;</span> ) == 0 )
<a name="l00474"></a>00474             <span class="keywordflow">continue</span>;
<a name="l00475"></a>00475 
<a name="l00476"></a>00476         <span class="keywordflow">if</span> ( <a class="code" href="namespaceUtils.xhtml#a303e8afc983db3b483fb450a1c499c1e" title="Determines if a file path is a directory or file on disk.">iDirectory</a>( idir + ifile ) )
<a name="l00477"></a>00477             output.insert( pair&lt;bool,string&gt;( <a class="code" href="enum_8h.xhtml#aa51282a877957eaf36ac9e8416145a53">UTILS_IS_DIRECTORY</a>, ifile ) );
<a name="l00478"></a>00478         <span class="keywordflow">else</span>
<a name="l00479"></a>00479             output.insert( pair&lt;bool,string&gt;( <a class="code" href="enum_8h.xhtml#a9325070b1daf70dbe43f7fb9a341aaf2">UTILS_IS_FILE</a>, ifile ) );
<a name="l00480"></a>00480 
<a name="l00481"></a>00481         <span class="comment">// Only recurse if another directory is found, otherwise a file was found, so skip it</span>
<a name="l00482"></a>00482         <span class="keywordflow">if</span> ( <a class="code" href="namespaceUtils.xhtml#a303e8afc983db3b483fb450a1c499c1e" title="Determines if a file path is a directory or file on disk.">iDirectory</a>( idir + ifile ) &amp;&amp; recursive )
<a name="l00483"></a>00483             <a class="code" href="namespaceUtils.xhtml#a014607a95c6d01ee99564479b3620ee7" title="Return a multimap of a specified directory tree on disk.">ListDirectory</a>( idir + ifile, recursive, output, dir_close, dir_open );
<a name="l00484"></a>00484     }
<a name="l00485"></a>00485 
<a name="l00486"></a>00486     <span class="keywordflow">if</span> ( ::closedir( directory ) &lt; 0 )
<a name="l00487"></a>00487         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Utils::OpenDir()-&gt;closedir()-&gt;&quot;</span> );
<a name="l00488"></a>00488     <span class="keywordflow">else</span>
<a name="l00489"></a>00489         dir_close++;
<a name="l00490"></a>00490 
<a name="l00491"></a>00491     <span class="keywordflow">return</span> output;
<a name="l00492"></a>00492 }
<a name="l00493"></a>00493 
<a name="l00494"></a>00494 <span class="comment">/* Internal */</span>
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Tue Nov 27 2012 15:05:03 for NAMS - Not Another MUD Server by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
