<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>NAMS - Not Another MUD Server: telopt.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">NAMS - Not Another MUD Server
   
   </div>
   <div id="projectbrief">NAMS is a C++ MUD server with the primary goals of a safe, modular design and a server core that is substantially decouppled from game logic.</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="dynsections.js"></script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">telopt.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="telopt_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/***************************************************************************</span>
<a name="l00002"></a>00002 <span class="comment"> * NAMS - Not Another MUD Server                                           *</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2012 Matthew Goff (matt@goff.cc) &lt;http://www.ackmud.net/&gt; *</span>
<a name="l00004"></a>00004 <span class="comment"> *                                                                         *</span>
<a name="l00005"></a>00005 <span class="comment"> * This program is free software: you can redistribute it and/or modify    *</span>
<a name="l00006"></a>00006 <span class="comment"> * it under the terms of the GNU General Public License as published by    *</span>
<a name="l00007"></a>00007 <span class="comment"> * the Free Software Foundation, either version 3 of the License, or       *</span>
<a name="l00008"></a>00008 <span class="comment"> * (at your option) any later version.                                     *</span>
<a name="l00009"></a>00009 <span class="comment"> *                                                                         *</span>
<a name="l00010"></a>00010 <span class="comment"> * This program is distributed in the hope that it will be useful,         *</span>
<a name="l00011"></a>00011 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of          *</span>
<a name="l00012"></a>00012 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *</span>
<a name="l00013"></a>00013 <span class="comment"> * GNU General Public License for more details.                            *</span>
<a name="l00014"></a>00014 <span class="comment"> *                                                                         *</span>
<a name="l00015"></a>00015 <span class="comment"> * You should have received a copy of the GNU General Public License       *</span>
<a name="l00016"></a>00016 <span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.   *</span>
<a name="l00017"></a>00017 <span class="comment"> ***************************************************************************/</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;<a class="code" href="includes_8h.xhtml" title="All non-system includes that need to be within each .cpp file.">h/includes.h</a>&quot;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="class_8h.xhtml" title="All class declarations.">h/class.h</a>&quot;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="comment">/* Core */</span>
<a name="l00034"></a><a class="code" href="namespaceTelopt.xhtml#aae5468ac9f53474dea225a4485905ac3">00034</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceTelopt.xhtml#aae5468ac9f53474dea225a4485905ac3" title="Send initial options to negotiate for, then the login string.">Telopt::InitialNegotiation</a>( <a class="code" href="classSocketClient.xhtml" title="Client / remote host specific functions that extend the Socket class.">SocketClient</a>* client )
<a name="l00035"></a>00035 {
<a name="l00036"></a>00036     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00037"></a>00037 
<a name="l00038"></a>00038     <span class="keywordflow">if</span> ( client == NULL )
<a name="l00039"></a>00039     {
<a name="l00040"></a>00040         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Telopt::InitialNegotiation()-&gt; called with NULL client&quot;</span> );
<a name="l00041"></a>00041         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00042"></a>00042     }
<a name="l00043"></a>00043 
<a name="l00044"></a>00044     <span class="comment">// negotiate some options here, then send the login string</span>
<a name="l00045"></a>00045     <a class="code" href="namespaceTelopt.xhtml#a71c731d78947d4c909f93df74950b64c" title="Negotiate requested options.">Telopt::Negotiate</a>( client, <a class="code" href="enum_8h.xhtml#a8133e93c6dc811b9b216c65d6836dbe4a1585c85241b55cc28b79eebd4c8c1594">SOC_TELOPT_ECHO</a>, <span class="keyword">false</span> );
<a name="l00046"></a>00046 
<a name="l00047"></a>00047     <span class="keywordflow">if</span> ( !client-&gt;<a class="code" href="classSocketClient.xhtml#a6268f3d184970ec0076da657c39d2e80" title="Process data from the client&#39;s send buffer and transmit it via the socket.">Send</a>( <a class="code" href="config_8h.xhtml#a8d29374ea9db48916be70f6c809e148c" title="String sent on initial socket connection.">CFG_STR_LOGIN</a> ) )
<a name="l00048"></a>00048     {
<a name="l00049"></a>00049         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Telopt::InitialNegotiation()-&gt; SocketClient::Send()-&gt; returned false&quot;</span> );
<a name="l00050"></a>00050         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00051"></a>00051     }
<a name="l00052"></a>00052 
<a name="l00053"></a>00053     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00054"></a>00054 }
<a name="l00055"></a>00055 
<a name="l00062"></a><a class="code" href="namespaceTelopt.xhtml#abdb8913fd8eb65e47c6035240d9a291f">00062</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceTelopt.xhtml#abdb8913fd8eb65e47c6035240d9a291f" title="Processes data received from a SocketClient for telnet sequences.">Telopt::ProcessInput</a>( <a class="code" href="classSocketClient.xhtml" title="Client / remote host specific functions that extend the Socket class.">SocketClient</a>* client, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; data )
<a name="l00063"></a>00063 {
<a name="l00064"></a>00064     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00065"></a>00065     <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> i = <a class="code" href="limits_8h.xhtml#ace307ffbe4c934f4565176f184b38d78" title="The minimum value of any uint_t variable.">uintmin_t</a>, o = <a class="code" href="limits_8h.xhtml#ace307ffbe4c934f4565176f184b38d78" title="The minimum value of any uint_t variable.">uintmin_t</a>;
<a name="l00066"></a>00066     <span class="keywordtype">char</span> output[<a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a>] = {<span class="charliteral">&#39;\0&#39;</span>};
<a name="l00067"></a>00067 
<a name="l00068"></a>00068     <span class="keywordflow">if</span> ( client == NULL )
<a name="l00069"></a>00069     {
<a name="l00070"></a>00070         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Telopt::ProcessInput()-&gt; called with NULL client&quot;</span> );
<a name="l00071"></a>00071         <span class="keywordflow">return</span> output;
<a name="l00072"></a>00072     }
<a name="l00073"></a>00073 
<a name="l00074"></a>00074     <span class="keywordflow">if</span> ( data.empty() )
<a name="l00075"></a>00075         <span class="keywordflow">return</span> output;
<a name="l00076"></a>00076 
<a name="l00077"></a>00077     <span class="keywordflow">if</span> ( data.length() &gt;= <a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a> )
<a name="l00078"></a>00078         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Telopt::ProcessInput()-&gt; data length of %lu exceeds buffer length of %lu, truncating&quot;</span>, data.length(), <a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a> );
<a name="l00079"></a>00079 
<a name="l00080"></a>00080     <span class="keywordflow">for</span> ( i = 0; i &lt; data.length() &amp;&amp; i &lt; <a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a>; i++ )
<a name="l00081"></a>00081     {
<a name="l00082"></a>00082         <span class="keywordflow">if</span> ( data[i] == (<span class="keywordtype">char</span>)IAC )
<a name="l00083"></a>00083         {
<a name="l00084"></a>00084             <span class="keywordflow">switch</span> ( data[i+1] )
<a name="l00085"></a>00085             {
<a name="l00086"></a>00086                 <span class="keywordflow">case</span> (<span class="keywordtype">char</span>)IAC: <span class="comment">// IAC IAC will result in IAC being passed as data</span>
<a name="l00087"></a>00087                     output[o++] = (char)IAC;
<a name="l00088"></a>00088                     i++;
<a name="l00089"></a>00089                 <span class="keywordflow">break</span>;
<a name="l00090"></a>00090 
<a name="l00091"></a>00091                 <span class="keywordflow">case</span> (<span class="keywordtype">char</span>)DO:
<a name="l00092"></a>00092                 <span class="keywordflow">case</span> (<span class="keywordtype">char</span>)DONT:
<a name="l00093"></a>00093                 <span class="keywordflow">case</span> (<span class="keywordtype">char</span>)WILL:
<a name="l00094"></a>00094                 <span class="keywordflow">case</span> (<span class="keywordtype">char</span>)WONT:
<a name="l00095"></a>00095                     <a class="code" href="namespaceTelopt.xhtml#acb81c2e75d328c24352dd8ef356b84d8" title="Begins a telnet negotiation handshake for requested options.">Handshake</a>( client, data[i+1], data[i+2] );
<a name="l00096"></a>00096                     i += 2; <span class="comment">// data[i] == IAC, data[i+1] = cmd, data[i+2] = opt</span>
<a name="l00097"></a>00097                 <span class="keywordflow">break</span>;
<a name="l00098"></a>00098             }
<a name="l00099"></a>00099         }
<a name="l00100"></a>00100         <span class="keywordflow">else</span>
<a name="l00101"></a>00101             output[o++] = data[i];
<a name="l00102"></a>00102     }
<a name="l00103"></a>00103 
<a name="l00104"></a>00104     <span class="keywordflow">return</span> output;
<a name="l00105"></a>00105 }
<a name="l00106"></a>00106 
<a name="l00113"></a><a class="code" href="namespaceTelopt.xhtml#abb99f54e5e0a1ab69795aea0408c0fc2">00113</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceTelopt.xhtml#abb99f54e5e0a1ab69795aea0408c0fc2" title="Processes data to be sent to a SocketClient for telnet sequences.">Telopt::ProcessOutput</a>( <a class="code" href="classSocketClient.xhtml" title="Client / remote host specific functions that extend the Socket class.">SocketClient</a>* client, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; data )
<a name="l00114"></a>00114 {
<a name="l00115"></a>00115     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00116"></a>00116     <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> i = <a class="code" href="limits_8h.xhtml#ace307ffbe4c934f4565176f184b38d78" title="The minimum value of any uint_t variable.">uintmin_t</a>, o = <a class="code" href="limits_8h.xhtml#ace307ffbe4c934f4565176f184b38d78" title="The minimum value of any uint_t variable.">uintmin_t</a>;
<a name="l00117"></a>00117     <span class="keywordtype">char</span> output[<a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a>] = {<span class="charliteral">&#39;\0&#39;</span>};
<a name="l00118"></a>00118 
<a name="l00119"></a>00119     <span class="keywordflow">if</span> ( client == NULL )
<a name="l00120"></a>00120     {
<a name="l00121"></a>00121         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Telopt::ProcessOutput()-&gt; called with NULL client&quot;</span> );
<a name="l00122"></a>00122         <span class="keywordflow">return</span> output;
<a name="l00123"></a>00123     }
<a name="l00124"></a>00124 
<a name="l00125"></a>00125     <span class="keywordflow">if</span> ( data.empty() )
<a name="l00126"></a>00126         <span class="keywordflow">return</span> output;
<a name="l00127"></a>00127 
<a name="l00128"></a>00128     <span class="keywordflow">if</span> ( data.length() &gt;= <a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a> )
<a name="l00129"></a>00129         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Telopt::ProcessOutput()-&gt; data length of %lu exceeds buffer length of %lu, truncating&quot;</span>, data.length(), <a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a> );
<a name="l00130"></a>00130 
<a name="l00131"></a>00131     <span class="keywordflow">for</span> ( i = 0; i &lt; data.length() &amp;&amp; i &lt; <a class="code" href="config_8h.xhtml#afb71aab62bfe0df8712e4fdadc30e456" title="Maximum length of all char type buffers.">CFG_STR_MAX_BUFLEN</a>; i++ )
<a name="l00132"></a>00132     {
<a name="l00133"></a>00133         output[o++] = data[i];
<a name="l00134"></a>00134     }
<a name="l00135"></a>00135 
<a name="l00136"></a>00136     <span class="keywordflow">return</span> output;
<a name="l00137"></a>00137 }
<a name="l00138"></a>00138 
<a name="l00139"></a>00139 <span class="comment">/* Query */</span>
<a name="l00140"></a>00140 
<a name="l00141"></a>00141 <span class="comment">/* Manipulate */</span>
<a name="l00142"></a>00142 
<a name="l00143"></a>00143 <span class="comment">/* Internal */</span>
<a name="l00151"></a><a class="code" href="namespaceTelopt.xhtml#acb81c2e75d328c24352dd8ef356b84d8">00151</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="namespaceTelopt.xhtml#acb81c2e75d328c24352dd8ef356b84d8" title="Begins a telnet negotiation handshake for requested options.">Telopt::Handshake</a>( <a class="code" href="classSocketClient.xhtml" title="Client / remote host specific functions that extend the Socket class.">SocketClient</a>* client, <span class="keyword">const</span> <span class="keywordtype">char</span>&amp; cmd, <span class="keyword">const</span> <span class="keywordtype">char</span>&amp; opt )
<a name="l00152"></a>00152 {
<a name="l00153"></a>00153     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00154"></a>00154 
<a name="l00155"></a>00155     <span class="keywordflow">if</span> ( client == NULL )
<a name="l00156"></a>00156     {
<a name="l00157"></a>00157         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Telopt::Handshake()-&gt; called with NULL client&quot;</span> );
<a name="l00158"></a>00158         <span class="keywordflow">return</span>;
<a name="l00159"></a>00159     }
<a name="l00160"></a>00160 
<a name="l00161"></a>00161     <span class="keywordflow">switch</span> ( opt )
<a name="l00162"></a>00162     {
<a name="l00163"></a>00163         <span class="keywordflow">case</span> (<span class="keywordtype">char</span>)TELOPT_ECHO:
<a name="l00164"></a>00164             <span class="keywordflow">if</span> ( cmd == (<span class="keywordtype">char</span>)DO )
<a name="l00165"></a>00165             {   <span class="comment">// PuTTY likes to send IAC DO ECHO on connect which doesn&#39;t play nicely with</span>
<a name="l00166"></a>00166                 <span class="comment">// allowing the account name to echo then flipping it for the password</span>
<a name="l00167"></a>00167                 <span class="keywordflow">if</span> ( client-&gt;<a class="code" href="classSocketClient.xhtml#aa0badca8f614127e98281995c02cb385" title="Returns the connection state of the client from SOC_STATE.">gState</a>() &gt; <a class="code" href="enum_8h.xhtml#a183c84f479d3dfb8ea89c5fa6db3c5c7aa97346118bd6336de5373254e8cbd15f">SOC_STATE_LOGIN_SCREEN</a> )
<a name="l00168"></a>00168                     <a class="code" href="namespaceTelopt.xhtml#a71c731d78947d4c909f93df74950b64c" title="Negotiate requested options.">Negotiate</a>( client, <a class="code" href="enum_8h.xhtml#a8133e93c6dc811b9b216c65d6836dbe4a1585c85241b55cc28b79eebd4c8c1594">SOC_TELOPT_ECHO</a>, <span class="keyword">true</span>, <span class="keyword">true</span> );
<a name="l00169"></a>00169                 <span class="keywordflow">else</span>
<a name="l00170"></a>00170                     <a class="code" href="namespaceTelopt.xhtml#a71c731d78947d4c909f93df74950b64c" title="Negotiate requested options.">Negotiate</a>( client, <a class="code" href="enum_8h.xhtml#a8133e93c6dc811b9b216c65d6836dbe4a1585c85241b55cc28b79eebd4c8c1594">SOC_TELOPT_ECHO</a>, <span class="keyword">false</span>, <span class="keyword">true</span> );
<a name="l00171"></a>00171 
<a name="l00172"></a>00172                 client-&gt;<a class="code" href="classSocketClient.xhtml#aaad671b55573cb36a5d0bcc1e4a518fb" title="Returns a pointer to the terminal information of the SocketClient.">gTermInfo</a>()-&gt;<a class="code" href="classSocketClient_1_1TermInfo.xhtml#a05765d3e9e5c8f4d8c94bcea42b74dbe" title="Sets the value of a telnet option.">sTelopt</a>( <a class="code" href="enum_8h.xhtml#a8133e93c6dc811b9b216c65d6836dbe4a1585c85241b55cc28b79eebd4c8c1594">SOC_TELOPT_ECHO</a>, <span class="keyword">true</span> );
<a name="l00173"></a>00173             }
<a name="l00174"></a>00174             <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( cmd == (<span class="keywordtype">char</span>)DONT )
<a name="l00175"></a>00175             {
<a name="l00176"></a>00176                 <a class="code" href="namespaceTelopt.xhtml#a71c731d78947d4c909f93df74950b64c" title="Negotiate requested options.">Negotiate</a>( client, <a class="code" href="enum_8h.xhtml#a8133e93c6dc811b9b216c65d6836dbe4a1585c85241b55cc28b79eebd4c8c1594">SOC_TELOPT_ECHO</a>, <span class="keyword">false</span>, client-&gt;<a class="code" href="classSocketClient.xhtml#aaad671b55573cb36a5d0bcc1e4a518fb" title="Returns a pointer to the terminal information of the SocketClient.">gTermInfo</a>()-&gt;<a class="code" href="classSocketClient_1_1TermInfo.xhtml#a53781b89d3e22a7ceaa68c96b2b14463" title="Returns the value of a telnet option.">gTelopt</a>( <a class="code" href="enum_8h.xhtml#a8133e93c6dc811b9b216c65d6836dbe4a1585c85241b55cc28b79eebd4c8c1594">SOC_TELOPT_ECHO</a> ) );
<a name="l00177"></a>00177                 client-&gt;<a class="code" href="classSocketClient.xhtml#aaad671b55573cb36a5d0bcc1e4a518fb" title="Returns a pointer to the terminal information of the SocketClient.">gTermInfo</a>()-&gt;<a class="code" href="classSocketClient_1_1TermInfo.xhtml#a05765d3e9e5c8f4d8c94bcea42b74dbe" title="Sets the value of a telnet option.">sTelopt</a>( <a class="code" href="enum_8h.xhtml#a8133e93c6dc811b9b216c65d6836dbe4a1585c85241b55cc28b79eebd4c8c1594">SOC_TELOPT_ECHO</a>, <span class="keyword">false</span> );
<a name="l00178"></a>00178             }
<a name="l00179"></a>00179             <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( cmd == (<span class="keywordtype">char</span>)WILL )
<a name="l00180"></a>00180                 <a class="code" href="namespaceTelopt.xhtml#a4f56b29258351832660a550c61bda34f" title="Sends a formatted telnet negotiation command to the client.">Telopt::Send</a>( client, (<span class="keywordtype">char</span>)DONT, opt );
<a name="l00181"></a>00181         <span class="keywordflow">break</span>;
<a name="l00182"></a>00182 
<a name="l00183"></a>00183         <span class="keywordflow">default</span>:
<a name="l00184"></a>00184             <span class="keywordflow">if</span> ( cmd == (<span class="keywordtype">char</span>)WILL )
<a name="l00185"></a>00185                 <a class="code" href="namespaceTelopt.xhtml#a4f56b29258351832660a550c61bda34f" title="Sends a formatted telnet negotiation command to the client.">Telopt::Send</a>( client, DONT, opt );
<a name="l00186"></a>00186             <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( cmd == (<span class="keywordtype">char</span>)DO )
<a name="l00187"></a>00187                 <a class="code" href="namespaceTelopt.xhtml#a4f56b29258351832660a550c61bda34f" title="Sends a formatted telnet negotiation command to the client.">Telopt::Send</a>( client, WONT, opt );
<a name="l00188"></a>00188         <span class="keywordflow">break</span>;
<a name="l00189"></a>00189 
<a name="l00190"></a>00190     }
<a name="l00191"></a>00191 
<a name="l00192"></a>00192     <span class="keywordflow">return</span>;
<a name="l00193"></a>00193 }
<a name="l00194"></a>00194 
<a name="l00203"></a><a class="code" href="namespaceTelopt.xhtml#a71c731d78947d4c909f93df74950b64c">00203</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="namespaceTelopt.xhtml#a71c731d78947d4c909f93df74950b64c" title="Negotiate requested options.">Telopt::Negotiate</a>( <a class="code" href="classSocketClient.xhtml" title="Client / remote host specific functions that extend the Socket class.">SocketClient</a>* client, <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; opt, <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; val, <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; reply )
<a name="l00204"></a>00204 {
<a name="l00205"></a>00205     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00206"></a>00206 
<a name="l00207"></a>00207     <span class="keywordflow">if</span> ( client == NULL )
<a name="l00208"></a>00208     {
<a name="l00209"></a>00209         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Telopt::Negotiate()-&gt; called with NULL client&quot;</span> );
<a name="l00210"></a>00210         <span class="keywordflow">return</span>;
<a name="l00211"></a>00211     }
<a name="l00212"></a>00212 
<a name="l00213"></a>00213     <span class="keywordflow">if</span> ( opt &lt; uintmin_t || opt &gt;= <a class="code" href="enum_8h.xhtml#a8133e93c6dc811b9b216c65d6836dbe4a597c66d7807ce83daecb77a1ca11c7bf">MAX_SOC_TELOPT</a> )
<a name="l00214"></a>00214     {
<a name="l00215"></a>00215         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;Telopt::Negotiate()-&gt; called with invalid opt: %lu&quot;</span>, opt );
<a name="l00216"></a>00216         <span class="keywordflow">return</span>;
<a name="l00217"></a>00217     }
<a name="l00218"></a>00218 
<a name="l00219"></a>00219     <span class="comment">// Check to see if anything has changed</span>
<a name="l00220"></a>00220     <span class="keywordflow">if</span> ( client-&gt;<a class="code" href="classSocketClient.xhtml#aaad671b55573cb36a5d0bcc1e4a518fb" title="Returns a pointer to the terminal information of the SocketClient.">gTermInfo</a>()-&gt;<a class="code" href="classSocketClient_1_1TermInfo.xhtml#a58debeabe9fe825bc7abbac06df5b216" title="Returns if a telopt has been previously negotiated.">gNegotiated</a>( opt ) != val )
<a name="l00221"></a>00221     {
<a name="l00222"></a>00222         client-&gt;<a class="code" href="classSocketClient.xhtml#aaad671b55573cb36a5d0bcc1e4a518fb" title="Returns a pointer to the terminal information of the SocketClient.">gTermInfo</a>()-&gt;<a class="code" href="classSocketClient_1_1TermInfo.xhtml#aa576f2ec6f9de8d4160ccee6cbd1dc34" title="Sets if a telopt has been previously negotiated.">sNegotiated</a>( opt, val );
<a name="l00223"></a>00223 
<a name="l00224"></a>00224         <span class="keywordflow">if</span> ( reply )
<a name="l00225"></a>00225         {
<a name="l00226"></a>00226             <span class="keywordflow">switch</span> ( opt )
<a name="l00227"></a>00227             {
<a name="l00228"></a>00228                 <span class="keywordflow">case</span> <a class="code" href="enum_8h.xhtml#a8133e93c6dc811b9b216c65d6836dbe4a1585c85241b55cc28b79eebd4c8c1594">SOC_TELOPT_ECHO</a>:
<a name="l00229"></a>00229                     <a class="code" href="namespaceTelopt.xhtml#a4f56b29258351832660a550c61bda34f" title="Sends a formatted telnet negotiation command to the client.">Telopt::Send</a>( client, val ? WILL : WONT, TELOPT_ECHO );
<a name="l00230"></a>00230                 <span class="keywordflow">break</span>;
<a name="l00231"></a>00231 
<a name="l00232"></a>00232                 <span class="keywordflow">default</span>:
<a name="l00233"></a>00233                 <span class="keywordflow">break</span>;
<a name="l00234"></a>00234             }
<a name="l00235"></a>00235         }
<a name="l00236"></a>00236     }
<a name="l00237"></a>00237 
<a name="l00238"></a>00238     <span class="keywordflow">return</span>;
<a name="l00239"></a>00239 }
<a name="l00240"></a>00240 
<a name="l00248"></a><a class="code" href="namespaceTelopt.xhtml#a4f56b29258351832660a550c61bda34f">00248</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="namespaceTelopt.xhtml#a4f56b29258351832660a550c61bda34f" title="Sends a formatted telnet negotiation command to the client.">Telopt::Send</a>( <a class="code" href="classSocketClient.xhtml" title="Client / remote host specific functions that extend the Socket class.">SocketClient</a>* client, <span class="keyword">const</span> <span class="keywordtype">char</span>&amp; cmd, <span class="keyword">const</span> <span class="keywordtype">char</span>&amp; opt )
<a name="l00249"></a>00249 {
<a name="l00250"></a>00250     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00251"></a>00251     <span class="keywordtype">char</span> output[4] = {<span class="charliteral">&#39;\0&#39;</span>};
<a name="l00252"></a>00252 
<a name="l00253"></a>00253     <span class="keywordflow">if</span> ( client == NULL )
<a name="l00254"></a>00254     {
<a name="l00255"></a>00255         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;Telopt::Send()-&gt; called with NULL client&quot;</span> );
<a name="l00256"></a>00256         <span class="keywordflow">return</span>;
<a name="l00257"></a>00257     }
<a name="l00258"></a>00258 
<a name="l00259"></a>00259     output[0] = (char)IAC;
<a name="l00260"></a>00260     output[1] = cmd;
<a name="l00261"></a>00261     output[2] = opt;
<a name="l00262"></a>00262     output[3] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00263"></a>00263 
<a name="l00264"></a>00264     client-&gt;<a class="code" href="classSocketClient.xhtml#a6268f3d184970ec0076da657c39d2e80" title="Process data from the client&#39;s send buffer and transmit it via the socket.">Send</a>( output );
<a name="l00265"></a>00265 
<a name="l00266"></a>00266     <span class="keywordflow">return</span>;
<a name="l00267"></a>00267  }
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Sun Mar 17 2013 16:00:35 for NAMS - Not Another MUD Server by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
