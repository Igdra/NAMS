NAMS - Not Another MUD Server
    High Level Overview - Directory

This document provides a high level overview of directory layout and purpose
within the NAMS server.

root folder/
        The top level folder contains all components of NAMS within its
        subfolders. The only file maintained as the root level is the
        README.

    account/
        Accounts within NAMS are represented as a folder. Within each account
        folder are data files that contain all information about the account
        itself and all characters associated with the account.

    command/
        Within the command folder are command files. Currently each command is
        implemented as a stand-alone .cpp file that utilizes the Plugin class
        to implement a new class per-command and interface with the rest of the
        server via an API abstraction layer.

    doc/
        All NAMS documentation is stored within this folder aside from the README.
        A copy of the GPLv3 license is also provided here.

    etc/
        All NAMS runtime configurations, world state persistence, and other
        miscelaneous data files required for the operation of the core server
        are stored here.

    log/
        All log files generated by NAMS are stored within the log folder. While
        not currently implemented, NAMS intends to support multiple event driven
        logs and automatic log rotation.

    obj/
        All Plugin objects are compiled into independent shared object files
        stored in this folder. The server will compile any missing Plugin at
        boot, and Plugins are also capable of being compiled via the existing
        Makefile.

    src/
        Within the src folder are h and o subfolders. Header files are kept
        within the h subfolder, while compiled object files and an automatically
        generated dependencies file are stored within the o subfolder. All other
        source code is kept directly within the src folder. The Makefile is also
        contained here.

    var/
        The var directory acts as storage for temporary files during write
        operations. Files are first written to var and after the write has
        completed are then moved to their intended location. This ensures that
        in the event of a crash mid-write no data is lost.
