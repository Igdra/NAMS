<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>NAMS - Not Another MUD Server: utils.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.7.1 -->
<script type="text/javascript">
function hasClass(ele,cls) {
  return ele.className.match(new RegExp('(\\s|^)'+cls+'(\\s|$)'));
}

function addClass(ele,cls) {
  if (!this.hasClass(ele,cls)) ele.className += " "+cls;
}

function removeClass(ele,cls) {
  if (hasClass(ele,cls)) {
    var reg = new RegExp('(\\s|^)'+cls+'(\\s|$)');
    ele.className=ele.className.replace(reg,' ');
  }
}

function toggleVisibility(linkObj) {
 var base = linkObj.getAttribute('id');
 var summary = document.getElementById(base + '-summary');
 var content = document.getElementById(base + '-content');
 var trigger = document.getElementById(base + '-trigger');
 if ( hasClass(linkObj,'closed') ) {
   summary.style.display = 'none';
   content.style.display = 'block';
   trigger.src = 'open.png';
   removeClass(linkObj,'closed');
   addClass(linkObj,'opened');
 } else if ( hasClass(linkObj,'opened') ) {
   summary.style.display = 'block';
   content.style.display = 'none';
   trigger.src = 'closed.png';
   removeClass(linkObj,'opened');
   addClass(linkObj,'closed');
 }
 return false;
}
</script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<h1>utils.cpp</h1>  </div>
</div>
<div class="contents">
<a href="utils_8cpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/***************************************************************************</span>
<a name="l00002"></a>00002 <span class="comment"> * NAMS - Not Another MUD Server                                           *</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2012 Matthew Goff (matt@goff.cc) &lt;http://www.ackmud.net/&gt; *</span>
<a name="l00004"></a>00004 <span class="comment"> *                                                                         *</span>
<a name="l00005"></a>00005 <span class="comment"> * This program is free software: you can redistribute it and/or modify    *</span>
<a name="l00006"></a>00006 <span class="comment"> * it under the terms of the GNU General Public License as published by    *</span>
<a name="l00007"></a>00007 <span class="comment"> * the Free Software Foundation, either version 3 of the License, or       *</span>
<a name="l00008"></a>00008 <span class="comment"> * (at your option) any later version.                                     *</span>
<a name="l00009"></a>00009 <span class="comment"> *                                                                         *</span>
<a name="l00010"></a>00010 <span class="comment"> * This program is distributed in the hope that it will be useful,         *</span>
<a name="l00011"></a>00011 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of          *</span>
<a name="l00012"></a>00012 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *</span>
<a name="l00013"></a>00013 <span class="comment"> * GNU General Public License for more details.                            *</span>
<a name="l00014"></a>00014 <span class="comment"> *                                                                         *</span>
<a name="l00015"></a>00015 <span class="comment"> * You should have received a copy of the GNU General Public License       *</span>
<a name="l00016"></a>00016 <span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.   *</span>
<a name="l00017"></a>00017 <span class="comment"> ***************************************************************************/</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include &quot;<a class="code" href="includes_8h.htm">h/includes.h</a>&quot;</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &quot;<a class="code" href="class_8h.htm">h/class.h</a>&quot;</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="comment">// Core</span>
<a name="l00022"></a><a class="code" href="namespaceUtils.htm#adbb91eecf7e80e6e97b3ebe38123cc12">00022</a> <span class="keyword">const</span> timeval <a class="code" href="namespaceUtils.htm#adbb91eecf7e80e6e97b3ebe38123cc12">Utils::CurrentTime</a>()
<a name="l00023"></a>00023 {
<a name="l00024"></a>00024     <a class="code" href="macros_8h.htm#a56f9e62010649bf59e47724b826e3502">UFLAGS_DE</a>( flags );
<a name="l00025"></a>00025     timeval now;
<a name="l00026"></a>00026 
<a name="l00027"></a>00027     <span class="keywordflow">if</span> ( ::gettimeofday( &amp;now, NULL ) &lt; 0 )
<a name="l00028"></a>00028     {
<a name="l00029"></a>00029         <a class="code" href="macros_8h.htm#a39c64b6565bddaca7e2af8518ee764e3">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Utils::CurrentTime()-&gt;&quot;</span> );
<a name="l00030"></a>00030         <span class="keywordflow">return</span> timeval();
<a name="l00031"></a>00031     }
<a name="l00032"></a>00032 
<a name="l00033"></a>00033     <span class="keywordflow">return</span> now;
<a name="l00034"></a>00034 }
<a name="l00035"></a>00035 
<a name="l00036"></a><a class="code" href="namespaceUtils.htm#a405af6e04f92e289f5be1f8ae24a78ee">00036</a> <span class="keyword">const</span> <a class="code" href="limits_8h.htm#a12a1e9b3ce141648783a82445d02b58d">uint_t</a> <a class="code" href="namespaceUtils.htm#a405af6e04f92e289f5be1f8ae24a78ee">Utils::DiffTime</a>( <span class="keyword">const</span> timeval&amp; prev, <span class="keyword">const</span> timeval&amp; current, <span class="keyword">const</span> <a class="code" href="limits_8h.htm#a12a1e9b3ce141648783a82445d02b58d">uint_t</a>&amp; granularity )
<a name="l00037"></a>00037 {
<a name="l00038"></a>00038     <span class="keywordflow">switch</span> ( granularity )
<a name="l00039"></a>00039     {
<a name="l00040"></a>00040         <span class="keywordflow">case</span>  <a class="code" href="enum_8h.htm#adf764cbdea00d65edcd07bb9953ad2b7ae8ea1ef3caec7348d521d686adcfbfff">UTILS_TIME_S</a>: <span class="keywordflow">return</span> ( current.tv_sec - prev.tv_sec );
<a name="l00041"></a>00041         <span class="keywordflow">case</span> <a class="code" href="enum_8h.htm#adf764cbdea00d65edcd07bb9953ad2b7ab80ef2c700675085764563f89553686d">UTILS_TIME_MS</a>: <span class="keywordflow">return</span> ( current.tv_usec - prev.tv_usec ) / 1000;
<a name="l00042"></a>00042         <span class="keywordflow">case</span> <a class="code" href="enum_8h.htm#adf764cbdea00d65edcd07bb9953ad2b7aee1cb989b30c560f341cf31b44f1f64d">UTILS_TIME_US</a>:
<a name="l00043"></a>00043                    <span class="keywordflow">default</span>: <span class="keywordflow">return</span> ( current.tv_usec - prev.tv_usec );
<a name="l00044"></a>00044     }
<a name="l00045"></a>00045 }
<a name="l00046"></a>00046 
<a name="l00047"></a><a class="code" href="namespaceUtils.htm#a33e08ea185b71aab494d83322ad3cd53">00047</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.htm#a33e08ea185b71aab494d83322ad3cd53">Utils::_FormatString</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.htm#a12a1e9b3ce141648783a82445d02b58d">uint_t</a>&amp; narg, <span class="keyword">const</span> bitset&lt;CFG_MEM_MAX_BITSET&gt;&amp; flags, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; caller, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; fmt, ... )
<a name="l00048"></a>00048 {
<a name="l00049"></a>00049     <a class="code" href="macros_8h.htm#a56f9e62010649bf59e47724b826e3502">UFLAGS_DE</a>( uflags );
<a name="l00050"></a>00050     va_list args;
<a name="l00051"></a>00051     <span class="keywordtype">string</span> output;
<a name="l00052"></a>00052 
<a name="l00053"></a>00053     <span class="keywordflow">if</span> ( fmt.empty() )
<a name="l00054"></a>00054     {
<a name="l00055"></a>00055         <a class="code" href="macros_8h.htm#acd5f0d05a4501b560a2fbc0799039598">LOGSTR</a>( uflags, <span class="stringliteral">&quot;Utils::_FormatString()-&gt; called with empty fmt&quot;</span> );
<a name="l00056"></a>00056         <span class="keywordflow">return</span> output;
<a name="l00057"></a>00057     }
<a name="l00058"></a>00058 
<a name="l00059"></a>00059     va_start( args, fmt );
<a name="l00060"></a>00060     output = <a class="code" href="namespaceUtils.htm#a070c642e01b4b1d2ded94e234d32f65e">__FormatString</a>( narg, flags, caller, fmt, args );
<a name="l00061"></a>00061     va_end( args );
<a name="l00062"></a>00062 
<a name="l00063"></a>00063     <span class="keywordflow">return</span> output;
<a name="l00064"></a>00064 }
<a name="l00065"></a>00065 
<a name="l00066"></a><a class="code" href="namespaceUtils.htm#a070c642e01b4b1d2ded94e234d32f65e">00066</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.htm#a070c642e01b4b1d2ded94e234d32f65e">Utils::__FormatString</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.htm#a12a1e9b3ce141648783a82445d02b58d">uint_t</a>&amp; narg, <span class="keyword">const</span> bitset&lt;CFG_MEM_MAX_BITSET&gt;&amp; flags, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; caller, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; fmt, va_list&amp; val ) <span class="comment">// Thanks go to Darien @ MudBytes.net for the start of this</span>
<a name="l00067"></a>00067 {
<a name="l00068"></a>00068     <a class="code" href="macros_8h.htm#a56f9e62010649bf59e47724b826e3502">UFLAGS_DE</a>( uflags );
<a name="l00069"></a>00069     va_list args;
<a name="l00070"></a>00070     vector&lt;string&gt; arguments;
<a name="l00071"></a>00071     vector&lt;string&gt;::iterator si;
<a name="l00072"></a>00072     vector&lt;char&gt; buf;
<a name="l00073"></a>00073     <span class="keywordtype">string</span> output, token;
<a name="l00074"></a>00074     <a class="code" href="limits_8h.htm#a95d88c395560ef694e6258da742ad660">sint_t</a> size = 0;
<a name="l00075"></a>00075 
<a name="l00076"></a>00076     <span class="keywordflow">if</span> ( fmt.empty() )
<a name="l00077"></a>00077     {
<a name="l00078"></a>00078         <a class="code" href="macros_8h.htm#acd5f0d05a4501b560a2fbc0799039598">LOGSTR</a>( uflags, <span class="stringliteral">&quot;Utils::__FormatString()-&gt; called with empty fmt&quot;</span> );
<a name="l00079"></a>00079         <span class="keywordflow">return</span> output;
<a name="l00080"></a>00080     }
<a name="l00081"></a>00081 
<a name="l00082"></a>00082     arguments = <a class="code" href="namespaceUtils.htm#a498e31ec51c129ae9b68a20aa4e05c57">StrTokens</a>( fmt );
<a name="l00083"></a>00083     <span class="keywordflow">for</span> ( si = arguments.begin(); si != arguments.end(); si++ )
<a name="l00084"></a>00084     {
<a name="l00085"></a>00085         token = *si;
<a name="l00086"></a>00086         <span class="keywordflow">if</span> ( token.find( <span class="stringliteral">&quot;%&quot;</span> ) != string::npos ) <span class="comment">// not foolproof, but it should catch some worst cases by attempting</span>
<a name="l00087"></a>00087             size++;                              <span class="comment">// to ensure a matching narg : format specifier count</span>
<a name="l00088"></a>00088     }
<a name="l00089"></a>00089 
<a name="l00090"></a>00090     <span class="keywordflow">if</span> ( narg != 1 &amp;&amp; narg != static_cast&lt;uint_t&gt;( size ) &amp;&amp; narg != <a class="code" href="namespaceUtils.htm#afaf029667f299587a52ba9c8de11edfa">NumChar</a>( fmt, <span class="stringliteral">&quot;%&quot;</span> ) ) <span class="comment">// if narg == 1 invocation was func( flags, string )</span>
<a name="l00091"></a>00091     {
<a name="l00092"></a>00092         bitset&lt;CFG_MEM_MAX_BITSET&gt; eflags;
<a name="l00093"></a>00093 
<a name="l00094"></a>00094         eflags.set( <a class="code" href="enum_8h.htm#adf764cbdea00d65edcd07bb9953ad2b7a3953ba936b7fd0b7cbc726e534c63197">UTILS_TYPE_ERROR</a> );
<a name="l00095"></a>00095         <a class="code" href="utils_8h.htm#acf49e3634b60414304a9adfc79e02adb">Logger</a>( eflags, <span class="stringliteral">&quot;Number of arguments (%lu) did not match number of format specifiers (%lu) at: %s&quot;</span>, narg, size, <a class="code" href="macros_8h.htm#a9e05c5960bb1d108f6621513f708bad4">CSTR</a>( caller ) );
<a name="l00096"></a>00096         <span class="keywordflow">return</span> output = <span class="stringliteral">&quot;&quot;</span>;
<a name="l00097"></a>00097     }
<a name="l00098"></a>00098 
<a name="l00099"></a>00099     va_copy( args, val );
<a name="l00100"></a>00100     size = vsnprintf( NULL, 0, <a class="code" href="macros_8h.htm#a9e05c5960bb1d108f6621513f708bad4">CSTR</a>( fmt ), args );
<a name="l00101"></a>00101     va_end( args );
<a name="l00102"></a>00102 
<a name="l00103"></a>00103     va_copy( args, val );
<a name="l00104"></a>00104     buf.resize( size + 1 );
<a name="l00105"></a>00105     vsnprintf( &amp;buf[0], ( size + 1 ), <a class="code" href="macros_8h.htm#a9e05c5960bb1d108f6621513f708bad4">CSTR</a>( fmt ), args );
<a name="l00106"></a>00106     va_end( args );
<a name="l00107"></a>00107 
<a name="l00108"></a>00108     <span class="keywordflow">return</span> output = &amp;buf[0];
<a name="l00109"></a>00109 }
<a name="l00110"></a>00110 
<a name="l00111"></a><a class="code" href="namespaceUtils.htm#aa2ac8bf1bb304bab8f29829ec30af243">00111</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="namespaceUtils.htm#aa2ac8bf1bb304bab8f29829ec30af243">Utils::_Logger</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.htm#a12a1e9b3ce141648783a82445d02b58d">uint_t</a>&amp; narg, <span class="keyword">const</span> bitset&lt;CFG_MEM_MAX_BITSET&gt;&amp; flags, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; caller, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; fmt, ... )
<a name="l00112"></a>00112 {
<a name="l00113"></a>00113     <a class="code" href="macros_8h.htm#a56f9e62010649bf59e47724b826e3502">UFLAGS_DE</a>( uflags );
<a name="l00114"></a>00114     va_list args;
<a name="l00115"></a>00115     <span class="keywordtype">string</span> pre, post, output;
<a name="l00116"></a>00116     <a class="code" href="limits_8h.htm#a12a1e9b3ce141648783a82445d02b58d">uint_t</a> i = 0;
<a name="l00117"></a>00117 
<a name="l00118"></a>00118     <span class="keywordflow">if</span> ( fmt.empty() )
<a name="l00119"></a>00119     {
<a name="l00120"></a>00120         <a class="code" href="macros_8h.htm#acd5f0d05a4501b560a2fbc0799039598">LOGSTR</a>( uflags, <span class="stringliteral">&quot;Utils::_Logger()-&gt; called with empty fmt&quot;</span> );
<a name="l00121"></a>00121         <span class="keywordflow">return</span>;
<a name="l00122"></a>00122     }
<a name="l00123"></a>00123 
<a name="l00124"></a>00124     va_start( args, fmt );
<a name="l00125"></a>00125     output = <a class="code" href="namespaceUtils.htm#a070c642e01b4b1d2ded94e234d32f65e">__FormatString</a>( narg, flags, caller, fmt, args );
<a name="l00126"></a>00126     va_end( args );
<a name="l00127"></a>00127 
<a name="l00128"></a>00128     <span class="keywordflow">if</span> ( output.empty() )
<a name="l00129"></a>00129         <span class="keywordflow">return</span>;
<a name="l00130"></a>00130 
<a name="l00131"></a>00131     <span class="comment">// prepend timestamp</span>
<a name="l00132"></a>00132     pre = <a class="code" href="namespaceUtils.htm#aa3855eafe3e4898c743bc47cdc962a4a">StrTime</a>( <a class="code" href="namespaceUtils.htm#adbb91eecf7e80e6e97b3ebe38123cc12">CurrentTime</a>() ); pre += <span class="stringliteral">&quot; :: &quot;</span>;
<a name="l00133"></a>00133 
<a name="l00134"></a>00134     <span class="keywordflow">for</span> ( i = 0; i &lt; MAX_UTILS; i++ )
<a name="l00135"></a>00135     {
<a name="l00136"></a>00136         <span class="keywordflow">if</span> ( flags.test( i ) )
<a name="l00137"></a>00137         {
<a name="l00138"></a>00138             <span class="keywordflow">switch</span>( i )
<a name="l00139"></a>00139             {
<a name="l00140"></a>00140                 <span class="keywordflow">case</span> <a class="code" href="enum_8h.htm#adf764cbdea00d65edcd07bb9953ad2b7a285bb6b32d7a114b3103822c8ba11914">UTILS_DEBUG</a>:       post += <span class="stringliteral">&quot; [&quot;</span>; post += caller; post += <span class="stringliteral">&quot;]&quot;</span>; <span class="keywordflow">break</span>; <span class="comment">// output caller</span>
<a name="l00141"></a>00141                 <span class="keywordflow">case</span> <a class="code" href="enum_8h.htm#adf764cbdea00d65edcd07bb9953ad2b7abd6e849c29d54290a6caf85c91816290">UTILS_IGNORE_CASE</a>: <span class="keywordflow">break</span>; <span class="comment">// noting for now</span>
<a name="l00142"></a>00142                 <span class="keywordflow">case</span> <a class="code" href="enum_8h.htm#adf764cbdea00d65edcd07bb9953ad2b7a7d4a5f7891869a8964c9f3be6ad4fb03">UTILS_RAW</a>:         pre.clear(); post.clear(); i = MAX_UTILS;  <span class="keywordflow">break</span>; <span class="comment">//no extraneous data applied</span>
<a name="l00143"></a>00143                 <span class="keywordflow">case</span> <a class="code" href="enum_8h.htm#adf764cbdea00d65edcd07bb9953ad2b7a3953ba936b7fd0b7cbc726e534c63197">UTILS_TYPE_ERROR</a>:  pre += CFG_STR_UTILS_ERROR;                <span class="keywordflow">break</span>; <span class="comment">// so fancy!</span>
<a name="l00144"></a>00144                 <span class="keywordflow">case</span> <a class="code" href="enum_8h.htm#adf764cbdea00d65edcd07bb9953ad2b7af08cecf6f2c8ca5d3c5e4202a8450a92">UTILS_TYPE_INFO</a>:   pre += CFG_STR_UTILS_INFO;                 <span class="keywordflow">break</span>;
<a name="l00145"></a>00145                 <span class="keywordflow">case</span> <a class="code" href="enum_8h.htm#adf764cbdea00d65edcd07bb9953ad2b7ad9f4e83dec6fdf793451e709fb5d9509">UTILS_TYPE_SOCKET</a>: pre += CFG_STR_UTILS_SOCKET;               <span class="keywordflow">break</span>;
<a name="l00146"></a>00146                 <span class="keywordflow">default</span>: <span class="keywordflow">break</span>;
<a name="l00147"></a>00147             }
<a name="l00148"></a>00148         }
<a name="l00149"></a>00149     }
<a name="l00150"></a>00150 
<a name="l00151"></a>00151     clog &lt;&lt; pre &lt;&lt; output &lt;&lt; post &lt;&lt; endl;
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 <span class="comment">//fixme    if ( !server.shutdown )</span>
<a name="l00154"></a>00154 <span class="comment">//fixme        monitor_chan( output.c_str(), MONITOR_LOG );</span>
<a name="l00155"></a>00155 
<a name="l00156"></a>00156     <span class="keywordflow">return</span>;
<a name="l00157"></a>00157 }
<a name="l00158"></a>00158 
<a name="l00159"></a><a class="code" href="namespaceUtils.htm#afaf029667f299587a52ba9c8de11edfa">00159</a> <span class="keyword">const</span> <a class="code" href="limits_8h.htm#a12a1e9b3ce141648783a82445d02b58d">uint_t</a> <a class="code" href="namespaceUtils.htm#afaf029667f299587a52ba9c8de11edfa">Utils::NumChar</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; input, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; item )
<a name="l00160"></a>00160 {
<a name="l00161"></a>00161     <a class="code" href="macros_8h.htm#a56f9e62010649bf59e47724b826e3502">UFLAGS_DE</a>( flags );
<a name="l00162"></a>00162     <a class="code" href="limits_8h.htm#a12a1e9b3ce141648783a82445d02b58d">uint_t</a> amount = 0, i = 0;
<a name="l00163"></a>00163 
<a name="l00164"></a>00164     <span class="keywordflow">if</span> ( input.empty() )
<a name="l00165"></a>00165     {
<a name="l00166"></a>00166         <a class="code" href="macros_8h.htm#acd5f0d05a4501b560a2fbc0799039598">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::NumChar()-&gt; called with empty input&quot;</span> );
<a name="l00167"></a>00167         <span class="keywordflow">return</span> amount;
<a name="l00168"></a>00168     }
<a name="l00169"></a>00169 
<a name="l00170"></a>00170     <span class="keywordflow">for</span> ( i = 0; i &lt; input.length(); i++ )
<a name="l00171"></a>00171         <span class="keywordflow">if</span> ( input[i] == item[0] )
<a name="l00172"></a>00172             amount++;
<a name="l00173"></a>00173 
<a name="l00174"></a>00174     <span class="keywordflow">return</span> amount;
<a name="l00175"></a>00175 }
<a name="l00176"></a>00176 
<a name="l00177"></a><a class="code" href="namespaceUtils.htm#a8c70e85acdb1549aa4cd3a16b8d8d9cf">00177</a> <span class="keyword">const</span> vector&lt;string&gt; <a class="code" href="namespaceUtils.htm#a8c70e85acdb1549aa4cd3a16b8d8d9cf">Utils::StrNewlines</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; input )
<a name="l00178"></a>00178 {
<a name="l00179"></a>00179     <a class="code" href="macros_8h.htm#a56f9e62010649bf59e47724b826e3502">UFLAGS_DE</a>( flags );
<a name="l00180"></a>00180 
<a name="l00181"></a>00181     <span class="keywordflow">if</span> ( input.empty() )
<a name="l00182"></a>00182     {
<a name="l00183"></a>00183         <a class="code" href="macros_8h.htm#acd5f0d05a4501b560a2fbc0799039598">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::StrNewlines()-&gt; called with empty input&quot;</span> );
<a name="l00184"></a>00184         <span class="keywordflow">return</span> vector&lt;string&gt;();
<a name="l00185"></a>00185     }
<a name="l00186"></a>00186 
<a name="l00187"></a>00187     stringstream ss( input );
<a name="l00188"></a>00188     <span class="keywordtype">string</span> line;
<a name="l00189"></a>00189     vector&lt;string&gt; output;
<a name="l00190"></a>00190 
<a name="l00191"></a>00191     <span class="keywordflow">while</span> ( getline( ss, line ) )
<a name="l00192"></a>00192     {
<a name="l00193"></a>00193         <span class="comment">// Strip the newline off the end</span>
<a name="l00194"></a>00194         line.resize( line.length() - 1 );
<a name="l00195"></a>00195         <span class="keywordflow">if</span> ( !line.empty() )
<a name="l00196"></a>00196             output.push_back( line );
<a name="l00197"></a>00197     }
<a name="l00198"></a>00198 
<a name="l00199"></a>00199     <span class="keywordflow">return</span> output;
<a name="l00200"></a>00200 }
<a name="l00201"></a>00201 
<a name="l00202"></a><a class="code" href="namespaceUtils.htm#aa3855eafe3e4898c743bc47cdc962a4a">00202</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.htm#aa3855eafe3e4898c743bc47cdc962a4a">Utils::StrTime</a>( <span class="keyword">const</span> timeval&amp; now )
<a name="l00203"></a>00203 {
<a name="l00204"></a>00204     <a class="code" href="macros_8h.htm#a56f9e62010649bf59e47724b826e3502">UFLAGS_DE</a>( flags );
<a name="l00205"></a>00205     <span class="keywordtype">string</span> output;
<a name="l00206"></a>00206 
<a name="l00207"></a>00207     <span class="keywordflow">if</span> ( ( output = ::ctime( &amp;now.tv_sec ) ).empty() )
<a name="l00208"></a>00208     {
<a name="l00209"></a>00209         <a class="code" href="macros_8h.htm#acd5f0d05a4501b560a2fbc0799039598">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::CurrentTime()-&gt;ctime()-&gt; returned NULL&quot;</span> );
<a name="l00210"></a>00210         <span class="keywordflow">return</span> output;
<a name="l00211"></a>00211     }
<a name="l00212"></a>00212 
<a name="l00213"></a>00213     <span class="comment">// Strip the newline off the end</span>
<a name="l00214"></a>00214     output.resize( output.length() - 1 );
<a name="l00215"></a>00215 
<a name="l00216"></a>00216     <span class="keywordflow">return</span> output;
<a name="l00217"></a>00217 }
<a name="l00218"></a>00218 
<a name="l00219"></a><a class="code" href="namespaceUtils.htm#a498e31ec51c129ae9b68a20aa4e05c57">00219</a> <span class="keyword">const</span> vector&lt;string&gt; <a class="code" href="namespaceUtils.htm#a498e31ec51c129ae9b68a20aa4e05c57">Utils::StrTokens</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; input )
<a name="l00220"></a>00220 {
<a name="l00221"></a>00221     <a class="code" href="macros_8h.htm#a56f9e62010649bf59e47724b826e3502">UFLAGS_DE</a>( flags );
<a name="l00222"></a>00222 
<a name="l00223"></a>00223     <span class="keywordflow">if</span> ( input.empty() )
<a name="l00224"></a>00224     {
<a name="l00225"></a>00225         <a class="code" href="macros_8h.htm#acd5f0d05a4501b560a2fbc0799039598">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::StrTokens()-&gt; called with empty input&quot;</span> );
<a name="l00226"></a>00226         <span class="keywordflow">return</span> vector&lt;string&gt;();
<a name="l00227"></a>00227     }
<a name="l00228"></a>00228 
<a name="l00229"></a>00229     stringstream ss( input );
<a name="l00230"></a>00230     istream_iterator&lt;string&gt; si( ss );
<a name="l00231"></a>00231     istream_iterator&lt;string&gt; end;
<a name="l00232"></a>00232     vector&lt;string&gt; output( si, end );
<a name="l00233"></a>00233 
<a name="l00234"></a>00234     <span class="keywordflow">return</span> output;
<a name="l00235"></a>00235 }
<a name="l00236"></a>00236 
<a name="l00237"></a>00237 <span class="comment">// Query</span>
<a name="l00238"></a><a class="code" href="namespaceUtils.htm#a303e8afc983db3b483fb450a1c499c1e">00238</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.htm#a303e8afc983db3b483fb450a1c499c1e">Utils::iDirectory</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; dir )
<a name="l00239"></a>00239 {
<a name="l00240"></a>00240     <a class="code" href="macros_8h.htm#a56f9e62010649bf59e47724b826e3502">UFLAGS_DE</a>( flags );
<a name="l00241"></a>00241     <span class="keyword">struct </span>stat dir_info;
<a name="l00242"></a>00242 
<a name="l00243"></a>00243     <span class="keywordflow">if</span> ( ::stat( <a class="code" href="macros_8h.htm#a9e05c5960bb1d108f6621513f708bad4">CSTR</a>( dir ), &amp;dir_info ) &lt; 0 )
<a name="l00244"></a>00244     {
<a name="l00245"></a>00245         <a class="code" href="macros_8h.htm#a39c64b6565bddaca7e2af8518ee764e3">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Utils::iDirectory()-&gt;stat()-&gt;&quot;</span> );
<a name="l00246"></a>00246         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00247"></a>00247     }
<a name="l00248"></a>00248 
<a name="l00249"></a>00249     <span class="keywordflow">if</span> ( !S_ISDIR( dir_info.st_mode ) )
<a name="l00250"></a>00250         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00251"></a>00251 
<a name="l00252"></a>00252     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00253"></a>00253 }
<a name="l00254"></a>00254 
<a name="l00255"></a><a class="code" href="namespaceUtils.htm#a7d40818a602fb21db4b4f0917705f85b">00255</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.htm#a7d40818a602fb21db4b4f0917705f85b">Utils::iFile</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file )
<a name="l00256"></a>00256 {
<a name="l00257"></a>00257     <a class="code" href="macros_8h.htm#a56f9e62010649bf59e47724b826e3502">UFLAGS_DE</a>( flags );
<a name="l00258"></a>00258     <span class="keyword">struct </span>stat dir_info;
<a name="l00259"></a>00259 
<a name="l00260"></a>00260     <span class="keywordflow">if</span> ( ::stat( <a class="code" href="macros_8h.htm#a9e05c5960bb1d108f6621513f708bad4">CSTR</a>( file ), &amp;dir_info ) &lt; 0 )
<a name="l00261"></a>00261     {
<a name="l00262"></a>00262         <a class="code" href="macros_8h.htm#a39c64b6565bddaca7e2af8518ee764e3">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Utils::iFile()-&gt;stat()-&gt;&quot;</span> );
<a name="l00263"></a>00263         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00264"></a>00264     }
<a name="l00265"></a>00265 
<a name="l00266"></a>00266     <span class="keywordflow">if</span> ( !S_ISREG( dir_info.st_mode ) )
<a name="l00267"></a>00267         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00268"></a>00268 
<a name="l00269"></a>00269     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00270"></a>00270 }
<a name="l00271"></a>00271 
<a name="l00272"></a><a class="code" href="namespaceUtils.htm#a47aae40aead5b696e927fb0cdd336442">00272</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.htm#a47aae40aead5b696e927fb0cdd336442">Utils::iNumber</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; input )
<a name="l00273"></a>00273 {
<a name="l00274"></a>00274     <a class="code" href="macros_8h.htm#a56f9e62010649bf59e47724b826e3502">UFLAGS_DE</a>( flags );
<a name="l00275"></a>00275     <a class="code" href="limits_8h.htm#a12a1e9b3ce141648783a82445d02b58d">uint_t</a> i = 0;
<a name="l00276"></a>00276 
<a name="l00277"></a>00277     <span class="keywordflow">if</span> ( input.empty() )
<a name="l00278"></a>00278     {
<a name="l00279"></a>00279         <a class="code" href="macros_8h.htm#acd5f0d05a4501b560a2fbc0799039598">LOGSTR</a>( flags, <span class="stringliteral">&quot;Utils::iNumber()-&gt; called with empty input&quot;</span> );
<a name="l00280"></a>00280         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00281"></a>00281     }
<a name="l00282"></a>00282 
<a name="l00283"></a>00283     <span class="keywordflow">for</span> ( i = 0; i &lt; input.length(); i++ )
<a name="l00284"></a>00284         <span class="keywordflow">if</span> ( !isdigit( input[i] ) )
<a name="l00285"></a>00285             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00286"></a>00286 
<a name="l00287"></a>00287     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00288"></a>00288 }
<a name="l00289"></a>00289 
<a name="l00290"></a>00290 <span class="comment">// Manipulate</span>
<a name="l00291"></a><a class="code" href="namespaceUtils.htm#a014607a95c6d01ee99564479b3620ee7">00291</a> <span class="keyword">const</span> multimap&lt;bool,string&gt; <a class="code" href="namespaceUtils.htm#a014607a95c6d01ee99564479b3620ee7">Utils::ListDirectory</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; dir, <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; recursive, multimap&lt;bool,string&gt;&amp; output, <a class="code" href="limits_8h.htm#a12a1e9b3ce141648783a82445d02b58d">uint_t</a>&amp; dir_close, <a class="code" href="limits_8h.htm#a12a1e9b3ce141648783a82445d02b58d">uint_t</a>&amp; dir_open )
<a name="l00292"></a>00292 {
<a name="l00293"></a>00293     <a class="code" href="macros_8h.htm#a56f9e62010649bf59e47724b826e3502">UFLAGS_DE</a>( flags );
<a name="l00294"></a>00294     DIR* directory = NULL;
<a name="l00295"></a>00295     dirent* entry = NULL;
<a name="l00296"></a>00296     <span class="keywordtype">string</span> ifile, idir;
<a name="l00297"></a>00297 
<a name="l00298"></a>00298     <span class="keywordflow">if</span> ( ( directory = ::opendir( <a class="code" href="macros_8h.htm#a9e05c5960bb1d108f6621513f708bad4">CSTR</a>( dir ) ) ) == NULL )
<a name="l00299"></a>00299     {
<a name="l00300"></a>00300         <a class="code" href="macros_8h.htm#ac116c157aff5572959fd33c0ecd913da">LOGFMT</a>( flags, <span class="stringliteral">&quot;Utils::OpenDirectory()-&gt;opendir()-&gt; returned NULL for dir: %s&quot;</span>, <a class="code" href="macros_8h.htm#a9e05c5960bb1d108f6621513f708bad4">CSTR</a>( dir ) );
<a name="l00301"></a>00301         <span class="keywordflow">return</span> output;
<a name="l00302"></a>00302     }
<a name="l00303"></a>00303 
<a name="l00304"></a>00304     dir_open++;
<a name="l00305"></a>00305     idir = dir;
<a name="l00306"></a>00306 
<a name="l00307"></a>00307     <span class="comment">// Ensure a trailing slash is present to properly recurse</span>
<a name="l00308"></a>00308     <span class="keywordflow">if</span> ( idir.compare( dir.length() - 1, 1, <span class="stringliteral">&quot;/&quot;</span> ) != 0 )
<a name="l00309"></a>00309         idir += <span class="stringliteral">&quot;/&quot;</span>;
<a name="l00310"></a>00310 
<a name="l00311"></a>00311     <span class="keywordflow">while</span> ( ( entry = ::readdir( directory ) ) != NULL )
<a name="l00312"></a>00312     {
<a name="l00313"></a>00313         ifile = entry-&gt;d_name;
<a name="l00314"></a>00314 
<a name="l00315"></a>00315         <span class="comment">// Skip over the unwanteds</span>
<a name="l00316"></a>00316         <span class="keywordflow">if</span> ( ifile.compare( <span class="stringliteral">&quot;.&quot;</span> ) == 0 || ifile.compare( <span class="stringliteral">&quot;..&quot;</span> ) == 0 )
<a name="l00317"></a>00317             <span class="keywordflow">continue</span>;
<a name="l00318"></a>00318 
<a name="l00319"></a>00319         <span class="keywordflow">if</span> ( <a class="code" href="namespaceUtils.htm#a303e8afc983db3b483fb450a1c499c1e">iDirectory</a>( idir + ifile ) )
<a name="l00320"></a>00320             output.insert( pair&lt;bool,string&gt;( <a class="code" href="enum_8h.htm#aa51282a877957eaf36ac9e8416145a53">UTILS_IS_DIRECTORY</a>, ifile ) );
<a name="l00321"></a>00321         <span class="keywordflow">else</span>
<a name="l00322"></a>00322             output.insert( pair&lt;bool,string&gt;( <a class="code" href="enum_8h.htm#a9325070b1daf70dbe43f7fb9a341aaf2">UTILS_IS_FILE</a>, ifile ) );
<a name="l00323"></a>00323 
<a name="l00324"></a>00324         <span class="comment">// Only recurse if another directory is found, otherwise a file was found, so skip it</span>
<a name="l00325"></a>00325         <span class="keywordflow">if</span> ( <a class="code" href="namespaceUtils.htm#a303e8afc983db3b483fb450a1c499c1e">iDirectory</a>( idir + ifile ) &amp;&amp; recursive )
<a name="l00326"></a>00326             <a class="code" href="namespaceUtils.htm#a014607a95c6d01ee99564479b3620ee7">ListDirectory</a>( idir + ifile, recursive, output, dir_close, dir_open );
<a name="l00327"></a>00327     }
<a name="l00328"></a>00328 
<a name="l00329"></a>00329     <span class="keywordflow">if</span> ( ::closedir( directory ) &lt; 0 )
<a name="l00330"></a>00330         <a class="code" href="macros_8h.htm#a39c64b6565bddaca7e2af8518ee764e3">LOGERRNO</a>( flags, <span class="stringliteral">&quot;Utils::OpenDir()-&gt;closedir()-&gt;&quot;</span> );
<a name="l00331"></a>00331     <span class="keywordflow">else</span>
<a name="l00332"></a>00332         dir_close++;
<a name="l00333"></a>00333 
<a name="l00334"></a>00334     <span class="keywordflow">return</span> output;
<a name="l00335"></a>00335 }
</pre></div></div>
</div>
<hr class="footer"/><address class="footer"><small>Generated on Sat Apr 14 2012 23:46:15 for NAMS - Not Another MUD Server by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.1 </small></address>
</body>
</html>
