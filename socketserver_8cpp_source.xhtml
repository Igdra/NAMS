<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>NAMS - Not Another MUD Server: socketserver.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">NAMS - Not Another MUD Server
   
   </div>
   <div id="projectbrief">NAMS is a C++ MUD server with the primary goals of a safe, modular design and a server core that is substantially decouppled from game logic.</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="dynsections.js"></script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">socketserver.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="socketserver_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/***************************************************************************</span>
<a name="l00002"></a>00002 <span class="comment"> * NAMS - Not Another MUD Server                                           *</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2012 Matthew Goff (matt@goff.cc) &lt;http://www.ackmud.net/&gt; *</span>
<a name="l00004"></a>00004 <span class="comment"> *                                                                         *</span>
<a name="l00005"></a>00005 <span class="comment"> * This program is free software: you can redistribute it and/or modify    *</span>
<a name="l00006"></a>00006 <span class="comment"> * it under the terms of the GNU General Public License as published by    *</span>
<a name="l00007"></a>00007 <span class="comment"> * the Free Software Foundation, either version 3 of the License, or       *</span>
<a name="l00008"></a>00008 <span class="comment"> * (at your option) any later version.                                     *</span>
<a name="l00009"></a>00009 <span class="comment"> *                                                                         *</span>
<a name="l00010"></a>00010 <span class="comment"> * This program is distributed in the hope that it will be useful,         *</span>
<a name="l00011"></a>00011 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of          *</span>
<a name="l00012"></a>00012 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *</span>
<a name="l00013"></a>00013 <span class="comment"> * GNU General Public License for more details.                            *</span>
<a name="l00014"></a>00014 <span class="comment"> *                                                                         *</span>
<a name="l00015"></a>00015 <span class="comment"> * You should have received a copy of the GNU General Public License       *</span>
<a name="l00016"></a>00016 <span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.   *</span>
<a name="l00017"></a>00017 <span class="comment"> ***************************************************************************/</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &quot;<a class="code" href="includes_8h.xhtml" title="All non-system includes that need to be within each .cpp file.">h/includes.h</a>&quot;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;<a class="code" href="class_8h.xhtml" title="All class declarations.">h/class.h</a>&quot;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="socketserver_8h.xhtml" title="The SocketServer class.">h/socketserver.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="server_8h.xhtml" title="The Server class.">h/server.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="list_8h.xhtml" title="All globally referenced list / map / vector types.">h/list.h</a>&quot;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="comment">// Core</span>
<a name="l00030"></a><a class="code" href="classSocketServer.xhtml#afdbc60c3bc840875d2214b59c6213f63">00030</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="classSocketServer.xhtml#afdbc60c3bc840875d2214b59c6213f63">SocketServer::Accept</a>()
<a name="l00031"></a>00031 {
<a name="l00032"></a>00032     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00033"></a>00033     <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a> descriptor = 0;
<a name="l00034"></a>00034     sockaddr_storage sin;
<a name="l00035"></a>00035     socklen_t size = <span class="keyword">static_cast&lt;</span>socklen_t<span class="keyword">&gt;</span>( <span class="keyword">sizeof</span>( sin ) );
<a name="l00036"></a>00036     <a class="code" href="classSocketClient.xhtml">SocketClient</a>* socket_client;
<a name="l00037"></a>00037 
<a name="l00038"></a>00038     <span class="keywordflow">if</span> ( !<a class="code" href="classSocket.xhtml#a508457b48e6296d1e86c7cc72af65948">Valid</a>() )
<a name="l00039"></a>00039     {
<a name="l00040"></a>00040         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;SocketServer::Accept()-&gt; called with invalid socket&quot;</span> );
<a name="l00041"></a>00041         <span class="keywordflow">return</span>;
<a name="l00042"></a>00042     }
<a name="l00043"></a>00043 
<a name="l00044"></a>00044     <span class="keywordflow">if</span> ( ::getsockname( <a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82">gDescriptor</a>(), reinterpret_cast&lt;sockaddr*&gt;( &amp;sin ), &amp;size ) &lt; 0 )
<a name="l00045"></a>00045     {
<a name="l00046"></a>00046         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;SocketServer::Accept()-&gt;getsockname()-&gt;&quot;</span> );
<a name="l00047"></a>00047         <span class="keywordflow">return</span>;
<a name="l00048"></a>00048     }
<a name="l00049"></a>00049 
<a name="l00050"></a>00050     <span class="keywordflow">if</span> ( ( descriptor = ::accept( <a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82">gDescriptor</a>(), reinterpret_cast&lt;sockaddr*&gt;( &amp;sin ), &amp;size ) ) &lt; 0 )
<a name="l00051"></a>00051     {
<a name="l00052"></a>00052         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;SocketServer::Accept()-&gt;accept()-&gt;&quot;</span> );
<a name="l00053"></a>00053         <span class="keywordflow">return</span>;
<a name="l00054"></a>00054     }
<a name="l00055"></a>00055 
<a name="l00056"></a>00056     socket_client = <span class="keyword">new</span> <a class="code" href="classSocketClient.xhtml">SocketClient</a>( <a class="code" href="classSocketServer.xhtml#a659e5775db60e3f8d29b70f2fdd317e7">gServer</a>(), descriptor );
<a name="l00057"></a>00057 
<a name="l00058"></a>00058     <span class="keywordflow">if</span> ( !socket_client-&gt;<a class="code" href="classSocketClient.xhtml#aa304eafc5814ed2ebda33c44ccb60316">Thread</a>() )
<a name="l00059"></a>00059     {
<a name="l00060"></a>00060         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;SocketServer::Accept()-&gt;SocketClient::Thread()-&gt; returned false&quot;</span> );
<a name="l00061"></a>00061         socket_client-&gt;<a class="code" href="classSocketClient.xhtml#af09328648d18ae943c8866cf744e5aad">Delete</a>();
<a name="l00062"></a>00062         <span class="keywordflow">return</span>;
<a name="l00063"></a>00063     }
<a name="l00064"></a>00064 
<a name="l00065"></a>00065     <span class="keywordflow">return</span>;
<a name="l00066"></a>00066 }
<a name="l00067"></a>00067 
<a name="l00068"></a><a class="code" href="classSocketServer.xhtml#aee14cfe29fef99baa29664eef8d89dc8">00068</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketServer.xhtml#aee14cfe29fef99baa29664eef8d89dc8">SocketServer::Bind</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; port, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; addr )
<a name="l00069"></a>00069 {
<a name="l00070"></a>00070     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00071"></a>00071     <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a> enable = 1;
<a name="l00072"></a>00072     <span class="keyword">static</span> sockaddr_in6 sa_zero;
<a name="l00073"></a>00073     sockaddr_in6 sa = sa_zero;
<a name="l00074"></a>00074 
<a name="l00075"></a>00075     <span class="keywordflow">if</span> ( !<a class="code" href="classSocket.xhtml#a508457b48e6296d1e86c7cc72af65948">Valid</a>() )
<a name="l00076"></a>00076     {
<a name="l00077"></a>00077         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;SocketServer::Bind()-&gt; called with invalid socket&quot;</span> );
<a name="l00078"></a>00078         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00079"></a>00079     }
<a name="l00080"></a>00080 
<a name="l00081"></a>00081     <span class="keywordflow">if</span> ( addr.empty() )
<a name="l00082"></a>00082     {
<a name="l00083"></a>00083         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;SocketServer::Bind()-&gt; called with empty addr&quot;</span> );
<a name="l00084"></a>00084         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00085"></a>00085     }
<a name="l00086"></a>00086 
<a name="l00087"></a>00087     sa.sin6_family = AF_INET6;
<a name="l00088"></a>00088     sa.sin6_port = htons( port );
<a name="l00089"></a>00089     inet_pton( AF_INET6, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( addr ), &amp;sa.sin6_addr );
<a name="l00090"></a>00090 
<a name="l00091"></a>00091     <span class="keywordflow">if</span> ( ::setsockopt( <a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82">gDescriptor</a>(), SOL_SOCKET, SO_REUSEADDR, reinterpret_cast&lt;const char*&gt;( &amp;enable ), <span class="keyword">sizeof</span>( enable ) ) &lt; 0 )
<a name="l00092"></a>00092     {
<a name="l00093"></a>00093         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;SocketServer::Bind()-&gt;setsockopt()-&gt;&quot;</span> );
<a name="l00094"></a>00094         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00095"></a>00095     }
<a name="l00096"></a>00096 
<a name="l00097"></a>00097     <span class="keywordflow">if</span> ( ::bind( <a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82">gDescriptor</a>(), reinterpret_cast&lt;sockaddr*&gt;( &amp;sa ), <span class="keyword">sizeof</span>( sa ) ) &lt; 0 )
<a name="l00098"></a>00098     {
<a name="l00099"></a>00099         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;SocketServer::Bind()-&gt;bind()-&gt;&quot;</span> );
<a name="l00100"></a>00100         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00101"></a>00101     }
<a name="l00102"></a>00102 
<a name="l00103"></a>00103     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00104"></a>00104 }
<a name="l00105"></a>00105 
<a name="l00106"></a><a class="code" href="classSocketServer.xhtml#a4fb2589ed01cea5daae154b2f06b4f41">00106</a> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="classSocketServer.xhtml#a4fb2589ed01cea5daae154b2f06b4f41">SocketServer::Delete</a>()
<a name="l00107"></a>00107 {
<a name="l00108"></a>00108     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00109"></a>00109 
<a name="l00110"></a>00110     <span class="keywordflow">if</span> ( !<a class="code" href="classSocket.xhtml#a508457b48e6296d1e86c7cc72af65948">Valid</a>() )
<a name="l00111"></a>00111         <span class="keywordflow">return</span>;
<a name="l00112"></a>00112 
<a name="l00113"></a>00113     <a class="code" href="classThread.xhtml#a975e77d37e7955c21155bfe4b9ddc7d1">MutexLock</a>();
<a name="l00114"></a>00114 
<a name="l00115"></a>00115     <span class="keywordflow">if</span> ( !<a class="code" href="classSocketServer.xhtml#abe9a0d62586891e9d8449c0f4d1ca97b">m_server</a>-&gt;<a class="code" href="classServer.xhtml#a1e68e32745cdfe194e0af388d9d5244a">sSocketClose</a>( <a class="code" href="classSocketServer.xhtml#abe9a0d62586891e9d8449c0f4d1ca97b">m_server</a>-&gt;<a class="code" href="classServer.xhtml#a01c4cacfdade91bc99d6c8911ca33a54">gSocketClose</a>() + 1 ) )
<a name="l00116"></a>00116         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketServer::Delete()-&gt;Server::sSocketClose()-&gt; value %lu returned false&quot;</span>, <a class="code" href="classSocketServer.xhtml#abe9a0d62586891e9d8449c0f4d1ca97b">m_server</a>-&gt;<a class="code" href="classServer.xhtml#a01c4cacfdade91bc99d6c8911ca33a54">gSocketClose</a>() + 1 );
<a name="l00117"></a>00117 
<a name="l00118"></a>00118     <a class="code" href="list_8cpp.xhtml#acc7c180313f75720b77ac49721ba874b" title="All SocketServer objects listening for new client connections.">socket_server_list</a>.remove( <span class="keyword">this</span> );
<a name="l00119"></a>00119     <span class="keyword">delete</span> <span class="keyword">this</span>;
<a name="l00120"></a>00120 
<a name="l00121"></a>00121     <span class="keywordflow">return</span>;
<a name="l00122"></a>00122 }
<a name="l00123"></a>00123 
<a name="l00124"></a><a class="code" href="classSocketServer.xhtml#a5c5b0cbbee6a2e265d0510b40bcc12d8">00124</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketServer.xhtml#a5c5b0cbbee6a2e265d0510b40bcc12d8">SocketServer::Listen</a>()
<a name="l00125"></a>00125 {
<a name="l00126"></a>00126     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00127"></a>00127 
<a name="l00128"></a>00128     <span class="keywordflow">if</span> ( !<a class="code" href="classSocket.xhtml#a508457b48e6296d1e86c7cc72af65948">Valid</a>() )
<a name="l00129"></a>00129     {
<a name="l00130"></a>00130         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;SocketServer::Listen()-&gt; called with invalid socket&quot;</span> );
<a name="l00131"></a>00131         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00132"></a>00132     }
<a name="l00133"></a>00133 
<a name="l00134"></a>00134     <span class="keywordflow">if</span> ( ::listen( <a class="code" href="classSocket.xhtml#a45d3aa99d71b868921543a4708471f82">gDescriptor</a>(), <a class="code" href="config_8h.xhtml#aa0e8c6d702ecb6118b49483584524db1" title="The maximum number of pending connections to allow in the listen backlog.">CFG_SOC_MAX_PENDING</a> ) &lt; 0 )
<a name="l00135"></a>00135     {
<a name="l00136"></a>00136         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;SocketServer::Listen()-&gt;listen()-&gt;&quot;</span> );
<a name="l00137"></a>00137         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00138"></a>00138     }
<a name="l00139"></a>00139 
<a name="l00140"></a>00140     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00141"></a>00141 }
<a name="l00142"></a>00142 
<a name="l00143"></a><a class="code" href="classSocketServer.xhtml#a276e17da8bbf562313bce8edfd32e231">00143</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketServer.xhtml#a276e17da8bbf562313bce8edfd32e231">SocketServer::New</a>()
<a name="l00144"></a>00144 {
<a name="l00145"></a>00145     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00146"></a>00146 
<a name="l00147"></a>00147     <a class="code" href="classThread.xhtml#a975e77d37e7955c21155bfe4b9ddc7d1">MutexLock</a>();
<a name="l00148"></a>00148 
<a name="l00149"></a>00149     <span class="keywordflow">if</span> ( !<a class="code" href="classSocketServer.xhtml#aee14cfe29fef99baa29664eef8d89dc8">Bind</a>( <a class="code" href="classSocketServer.xhtml#abe9a0d62586891e9d8449c0f4d1ca97b">m_server</a>-&gt;<a class="code" href="classServer.xhtml#a307ecabcbab896360450e2b06b22a411">gPort</a>(), <a class="code" href="config_8h.xhtml#acfbfb90b5a0afa6cddd1403c1e10a7ee" title="IP address to bind the listening server socket to.">CFG_SOC_BIND_ADDR</a> ) )
<a name="l00150"></a>00150     {
<a name="l00151"></a>00151         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;SocketServer::New()-&gt;SocketServer::Bind()-&gt; returned false&quot;</span> );
<a name="l00152"></a>00152         <a class="code" href="classSocketServer.xhtml#abe9a0d62586891e9d8449c0f4d1ca97b">m_server</a>-&gt;<a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762">Shutdown</a>( EXIT_FAILURE );
<a name="l00153"></a>00153     }
<a name="l00154"></a>00154 
<a name="l00155"></a>00155     <span class="keywordflow">if</span> ( !<a class="code" href="classSocket.xhtml#a14e5e2493abcae97043297dd170e7a39">sHostname</a>( <a class="code" href="classSocketServer.xhtml#abe9a0d62586891e9d8449c0f4d1ca97b">m_server</a>-&gt;<a class="code" href="classServer.xhtml#a49dcdc5d378b3c12c46b80788c986052">gHostname</a>() ) )
<a name="l00156"></a>00156     {
<a name="l00157"></a>00157         <a class="code" href="macros_8h.xhtml#ac116c157aff5572959fd33c0ecd913da" title="Wrap Utils::FormatString() within Utils::Logger() for brevity and ease of future maintenance.">LOGFMT</a>( flags, <span class="stringliteral">&quot;SocketServer::New()-&gt;SocketServer::sHostname()-&gt; hostname %s returned false&quot;</span>, <a class="code" href="macros_8h.xhtml#a5e53b0e3450b3de556a9b2326ad5cfcc" title="Output std::string to const char*.">CSTR</a>( <a class="code" href="classSocketServer.xhtml#abe9a0d62586891e9d8449c0f4d1ca97b">m_server</a>-&gt;<a class="code" href="classServer.xhtml#a49dcdc5d378b3c12c46b80788c986052">gHostname</a>() ) );
<a name="l00158"></a>00158         <a class="code" href="classSocketServer.xhtml#abe9a0d62586891e9d8449c0f4d1ca97b">m_server</a>-&gt;<a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762">Shutdown</a>( EXIT_FAILURE );
<a name="l00159"></a>00159     }
<a name="l00160"></a>00160 
<a name="l00161"></a>00161     <span class="keywordflow">if</span> ( !<a class="code" href="classSocketServer.xhtml#a5c5b0cbbee6a2e265d0510b40bcc12d8">Listen</a>() )
<a name="l00162"></a>00162     {
<a name="l00163"></a>00163         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;SocketServer::New()-&gt;SocketServer::Listen()-&gt; returned false&quot;</span> );
<a name="l00164"></a>00164         <a class="code" href="classSocketServer.xhtml#abe9a0d62586891e9d8449c0f4d1ca97b">m_server</a>-&gt;<a class="code" href="classServer.xhtml#a9b7082bbc9faca6eb84180f856116762">Shutdown</a>( EXIT_FAILURE );
<a name="l00165"></a>00165     }
<a name="l00166"></a>00166 
<a name="l00167"></a>00167     <a class="code" href="classThread.xhtml#ad616deeb95beb7384b3283c00a0c9bdf">MutexUnlock</a>();
<a name="l00168"></a>00168 
<a name="l00169"></a>00169     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00170"></a>00170 }
<a name="l00171"></a>00171 
<a name="l00172"></a><a class="code" href="classSocketServer.xhtml#a613401f64ca4c185e0a90dd2ae57b546">00172</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketServer.xhtml#a613401f64ca4c185e0a90dd2ae57b546">SocketServer::Thread</a>()
<a name="l00173"></a>00173 {
<a name="l00174"></a>00174     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00175"></a>00175     pthread_t thread_id = 0;
<a name="l00176"></a>00176     pthread_attr_t res_attr;
<a name="l00177"></a>00177 
<a name="l00178"></a>00178     <span class="keywordflow">if</span> ( !<a class="code" href="classSocket.xhtml#a508457b48e6296d1e86c7cc72af65948">Valid</a>() )
<a name="l00179"></a>00179     {
<a name="l00180"></a>00180         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;SocketServer::Thread()-&gt; called with invalid socket&quot;</span> );
<a name="l00181"></a>00181         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00182"></a>00182     }
<a name="l00183"></a>00183 
<a name="l00184"></a>00184     <span class="keywordflow">if</span> ( !<a class="code" href="classSocketServer.xhtml#a276e17da8bbf562313bce8edfd32e231">New</a>() )
<a name="l00185"></a>00185     {
<a name="l00186"></a>00186         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;SocketServer::Thread()-&gt;SocketServer::New()-&gt; returned false&quot;</span> );
<a name="l00187"></a>00187         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00188"></a>00188     }
<a name="l00189"></a>00189 
<a name="l00190"></a>00190     <span class="keywordflow">if</span> ( ::pthread_attr_init( &amp;res_attr ) != 0 )
<a name="l00191"></a>00191     {
<a name="l00192"></a>00192         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;SocketServer::Thread()-&gt;pthread_attr_init()-&gt;&quot;</span> );
<a name="l00193"></a>00193         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00194"></a>00194     }
<a name="l00195"></a>00195 
<a name="l00196"></a>00196     <span class="keywordflow">if</span> ( ::pthread_attr_setdetachstate( &amp;res_attr, PTHREAD_CREATE_JOINABLE ) != 0 )
<a name="l00197"></a>00197     {
<a name="l00198"></a>00198         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;SocketServer::Thread()-&gt;pthread_attr_setdetachstate()-&gt;&quot;</span> );
<a name="l00199"></a>00199         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00200"></a>00200     }
<a name="l00201"></a>00201 
<a name="l00202"></a>00202     <span class="keywordflow">if</span> ( ::pthread_create( &amp;thread_id, &amp;res_attr, &amp;<a class="code" href="classSocketServer.xhtml#abf0a57a793cb3cf9ad308c238329b690">SocketServer::Update</a>, <span class="keyword">this</span> ) != 0 )
<a name="l00203"></a>00203     {
<a name="l00204"></a>00204         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;SocketServer::Thread()-&gt;pthread_create()-&gt;&quot;</span> );
<a name="l00205"></a>00205         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00206"></a>00206     }
<a name="l00207"></a>00207 
<a name="l00208"></a>00208     <span class="keywordflow">if</span> ( ::pthread_attr_destroy( &amp;res_attr ) != 0 )
<a name="l00209"></a>00209     {
<a name="l00210"></a>00210         <a class="code" href="macros_8h.xhtml#a39c64b6565bddaca7e2af8518ee764e3" title="Wrap Utils::Logger() based on a locally generated errno value from system functions.">LOGERRNO</a>( flags, <span class="stringliteral">&quot;SocketServer::Thread()-&gt;pthread_attr_destroy()-&gt;&quot;</span> );
<a name="l00211"></a>00211         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00212"></a>00212     }
<a name="l00213"></a>00213 
<a name="l00214"></a>00214     <a class="code" href="list_8cpp.xhtml#aaf5f7633ec620b380d55167e8213da84" title="All active threads within the server.">thread_list</a>.insert( pair&lt;pthread_t,string&gt;( thread_id, <span class="stringliteral">&quot;SocketServer::Thread()&quot;</span> ) );
<a name="l00215"></a>00215 
<a name="l00216"></a>00216     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00217"></a>00217 }
<a name="l00218"></a>00218 
<a name="l00219"></a><a class="code" href="classSocketServer.xhtml#abf0a57a793cb3cf9ad308c238329b690">00219</a> <span class="keywordtype">void</span>* <a class="code" href="classSocketServer.xhtml#abf0a57a793cb3cf9ad308c238329b690">SocketServer::Update</a>( <span class="keywordtype">void</span>* data )
<a name="l00220"></a>00220 {
<a name="l00221"></a>00221     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00222"></a>00222     <a class="code" href="classSocketServer.xhtml">SocketServer</a>* socket_server = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="classSocketServer.xhtml">SocketServer</a>*<span class="keyword">&gt;</span>( data );
<a name="l00223"></a>00223 
<a name="l00224"></a>00224     <span class="keywordflow">if</span> ( !socket_server-&gt;<a class="code" href="classSocket.xhtml#a508457b48e6296d1e86c7cc72af65948">Valid</a>() )
<a name="l00225"></a>00225     {
<a name="l00226"></a>00226         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;SocketServer::Update()-&gt; called with invalid socket&quot;</span> );
<a name="l00227"></a>00227         socket_server-&gt;<a class="code" href="classSocketServer.xhtml#a4fb2589ed01cea5daae154b2f06b4f41">Delete</a>();
<a name="l00228"></a>00228     }
<a name="l00229"></a>00229 
<a name="l00230"></a>00230     <span class="keywordflow">for</span> ( ;; )
<a name="l00231"></a>00231     {
<a name="l00232"></a>00232         <span class="comment">// Look for new connections</span>
<a name="l00233"></a>00233         socket_server-&gt;<a class="code" href="classSocketServer.xhtml#afdbc60c3bc840875d2214b59c6213f63">Accept</a>();
<a name="l00234"></a>00234 
<a name="l00235"></a>00235         <span class="keywordflow">if</span> ( !socket_server-&gt;<a class="code" href="classSocketServer.xhtml#a659e5775db60e3f8d29b70f2fdd317e7">gServer</a>()-&gt;<a class="code" href="classServer.xhtml#ae3d4d866381050c00f383248872877ea">Running</a>() )
<a name="l00236"></a>00236             <span class="keywordflow">break</span>;
<a name="l00237"></a>00237 
<a name="l00238"></a>00238         ::usleep( <a class="code" href="macros_8h.xhtml#a5fc45be6b0bb71dc5d4c6390d98bf3ee" title="This is the maximum value usleep will take per man (3) usleep -- 1 second.">USLEEP_MAX</a> / <a class="code" href="config_8h.xhtml#abf59791d9bc371bb841717a963babfc3" title="How many cycles per second should be processed.">CFG_GAM_PULSE_RATE</a> );
<a name="l00239"></a>00239     }
<a name="l00240"></a>00240 
<a name="l00241"></a>00241     socket_server-&gt;<a class="code" href="classSocketServer.xhtml#a4fb2589ed01cea5daae154b2f06b4f41">Delete</a>();
<a name="l00242"></a>00242     ::pthread_exit( reinterpret_cast&lt;void*&gt;( EXIT_SUCCESS ) );
<a name="l00243"></a>00243 }
<a name="l00244"></a>00244 
<a name="l00245"></a>00245 <span class="comment">// Query</span>
<a name="l00246"></a>00246 
<a name="l00247"></a>00247 <span class="comment">// Manipulate</span>
<a name="l00248"></a><a class="code" href="classSocketServer.xhtml#a89cde9791b2f0ce928329c55a9ad21e7">00248</a> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classSocketServer.xhtml#a89cde9791b2f0ce928329c55a9ad21e7">SocketServer::sServer</a>( <a class="code" href="classServer.xhtml">Server</a>* server )
<a name="l00249"></a>00249 {
<a name="l00250"></a>00250     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00251"></a>00251 
<a name="l00252"></a>00252     <span class="keywordflow">if</span> ( !server )
<a name="l00253"></a>00253     {
<a name="l00254"></a>00254         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;SocketServer::sServer()-&gt; called with NULL server&quot;</span> );
<a name="l00255"></a>00255         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00256"></a>00256     }
<a name="l00257"></a>00257 
<a name="l00258"></a>00258     <span class="keywordflow">if</span> ( !server-&gt;<a class="code" href="classServer.xhtml#ae3d4d866381050c00f383248872877ea">Running</a>() )
<a name="l00259"></a>00259     {
<a name="l00260"></a>00260         <a class="code" href="macros_8h.xhtml#acd5f0d05a4501b560a2fbc0799039598" title="Wrap Utils::Logger() for brevity and ease of future maintenance.">LOGSTR</a>( flags, <span class="stringliteral">&quot;SocketServer::sServer()-&gt; called with offline server&quot;</span> );
<a name="l00261"></a>00261         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00262"></a>00262     }
<a name="l00263"></a>00263 
<a name="l00264"></a>00264     <a class="code" href="classSocketServer.xhtml#abe9a0d62586891e9d8449c0f4d1ca97b">m_server</a> = server;
<a name="l00265"></a>00265 
<a name="l00266"></a>00266     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00267"></a>00267 }
<a name="l00268"></a>00268 
<a name="l00269"></a><a class="code" href="classSocketServer.xhtml#ad7fde891ef174c336b46299c8ace88f4">00269</a> <a class="code" href="classSocketServer.xhtml#ad7fde891ef174c336b46299c8ace88f4">SocketServer::SocketServer</a>( <a class="code" href="classServer.xhtml">Server</a>* server, <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a4b065143310513611ddcce5fb87f9dbd" title="A signed integer value based upon system limits.">sint_t</a>&amp; descriptor ) : <a class="code" href="classSocket.xhtml">Socket</a>( server, descriptor )
<a name="l00270"></a>00270 {
<a name="l00271"></a>00271     <a class="code" href="macros_8h.xhtml#a56f9e62010649bf59e47724b826e3502" title="Define a bitset variable (name) with UTILS_DEBUG and UTILS_TYPE_ERROR already enabled.">UFLAGS_DE</a>( flags );
<a name="l00272"></a>00272 
<a name="l00273"></a>00273     <a class="code" href="classSocketServer.xhtml#a89cde9791b2f0ce928329c55a9ad21e7">sServer</a>( server );
<a name="l00274"></a>00274 
<a name="l00275"></a>00275     <a class="code" href="classSocketServer.xhtml#abe9a0d62586891e9d8449c0f4d1ca97b">m_server</a>-&gt;<a class="code" href="classServer.xhtml#a2b261b9b308edee58ec6191966bd019a">sSocketOpen</a>( <a class="code" href="classSocketServer.xhtml#abe9a0d62586891e9d8449c0f4d1ca97b">m_server</a>-&gt;<a class="code" href="classServer.xhtml#a0c8164b5ed4b2c6efd0ecbd2a8c8a503">gSocketOpen</a>() + 1 );
<a name="l00276"></a>00276     <a class="code" href="list_8cpp.xhtml#acc7c180313f75720b77ac49721ba874b" title="All SocketServer objects listening for new client connections.">socket_server_list</a>.push_back( <span class="keyword">this</span> );
<a name="l00277"></a>00277 
<a name="l00278"></a>00278     <span class="keywordflow">return</span>;
<a name="l00279"></a>00279 }
<a name="l00280"></a>00280 
<a name="l00281"></a><a class="code" href="classSocketServer.xhtml#af0e595690e453ef4b8e8da174069aba9">00281</a> <a class="code" href="classSocketServer.xhtml#af0e595690e453ef4b8e8da174069aba9">SocketServer::~SocketServer</a>()
<a name="l00282"></a>00282 {
<a name="l00283"></a>00283     <a class="code" href="classThread.xhtml#ad616deeb95beb7384b3283c00a0c9bdf">MutexUnlock</a>();
<a name="l00284"></a>00284     ::pthread_exit( reinterpret_cast&lt;void*&gt;( EXIT_SUCCESS ) );
<a name="l00285"></a>00285 
<a name="l00286"></a>00286     <span class="keywordflow">return</span>;
<a name="l00287"></a>00287 }
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Sun Apr 15 2012 13:48:55 for NAMS - Not Another MUD Server by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
