<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>NAMS - Not Another MUD Server: h/utils.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">NAMS - Not Another MUD Server
   </div>
   <div id="projectbrief">NAMS is a C++ MUD server with the primary goals of a safe, modular design and a server core that is substantially decouppled from game logic.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.1.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_c3a3ee36a1e03ad614258ece27f46d29.xhtml">h</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#namespaces">Namespaces</a>  </div>
  <div class="headertitle">
<div class="title">utils.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>The <a class="el" href="namespaceUtils.xhtml" title="The Utils namespace contains all general purpose, multi-use, and non-class functions.">Utils</a> namespace.  
<a href="#details">More...</a></p>
<div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> This graph shows which files directly or indirectly include this file:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="utils_8h__dep__incl.svg" width="100%" height="504"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
</div>
<p><a href="utils_8h_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classUtils_1_1DeleteObject.xhtml">Utils::DeleteObject</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">The <a class="el" href="classUtils_1_1DeleteObject.xhtml" title="The DeleteObject class implements only operator() to be used in easily deleting lists of pointers or ...">DeleteObject</a> class implements only operator() to be used in easily deleting lists of pointers or other objects.  <a href="classUtils_1_1DeleteObject.xhtml#details">More...</a><br/></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespaceUtils"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml">Utils</a></td></tr>
<tr class="memdesc:namespaceUtils"><td class="mdescLeft">&#160;</td><td class="mdescRight">The <a class="el" href="namespaceUtils.xhtml" title="The Utils namespace contains all general purpose, multi-use, and non-class functions.">Utils</a> namespace contains all general purpose, multi-use, and non-class functions. <br/></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Query</div></td></tr>
<tr class="memitem:a36780f0aa565047ca0db53bda2aff5fc"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a36780f0aa565047ca0db53bda2aff5fc"><td class="memTemplItemLeft" align="right" valign="top">const bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a36780f0aa565047ca0db53bda2aff5fc">Utils::iAlNum</a> (const T &amp;t)</td></tr>
<tr class="memdesc:a36780f0aa565047ca0db53bda2aff5fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks to ensure an input is entirely alphanumeric.  <a href="#a36780f0aa565047ca0db53bda2aff5fc"></a><br/></td></tr>
<tr class="memitem:a303e8afc983db3b483fb450a1c499c1e"><td class="memItemLeft" align="right" valign="top">const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a303e8afc983db3b483fb450a1c499c1e">Utils::iDirectory</a> (const string &amp;dir)</td></tr>
<tr class="memdesc:a303e8afc983db3b483fb450a1c499c1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determines if a file path is a directory or file on disk.  <a href="#a303e8afc983db3b483fb450a1c499c1e"></a><br/></td></tr>
<tr class="memitem:a7d40818a602fb21db4b4f0917705f85b"><td class="memItemLeft" align="right" valign="top">const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a7d40818a602fb21db4b4f0917705f85b">Utils::iFile</a> (const string &amp;file)</td></tr>
<tr class="memdesc:a7d40818a602fb21db4b4f0917705f85b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determines if a file path is a file or directory on disk.  <a href="#a7d40818a602fb21db4b4f0917705f85b"></a><br/></td></tr>
<tr class="memitem:afae9af77bae9d8afe98d1f0e79552008"><td class="memItemLeft" align="right" valign="top">const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#afae9af77bae9d8afe98d1f0e79552008">Utils::iName</a> (const string &amp;name, const string &amp;input)</td></tr>
<tr class="memdesc:afae9af77bae9d8afe98d1f0e79552008"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determines if name exists within input where input is a space delimited string.  <a href="#afae9af77bae9d8afe98d1f0e79552008"></a><br/></td></tr>
<tr class="memitem:a47aae40aead5b696e927fb0cdd336442"><td class="memItemLeft" align="right" valign="top">const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a47aae40aead5b696e927fb0cdd336442">Utils::iNumber</a> (const string &amp;input)</td></tr>
<tr class="memdesc:a47aae40aead5b696e927fb0cdd336442"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determines if a string is only a string of numerical values.  <a href="#a47aae40aead5b696e927fb0cdd336442"></a><br/></td></tr>
<tr class="memitem:a158e1deb611937a6313e8683fe7db3fc"><td class="memItemLeft" align="right" valign="top">const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a158e1deb611937a6313e8683fe7db3fc">Utils::iReadable</a> (const string &amp;file)</td></tr>
<tr class="memdesc:a158e1deb611937a6313e8683fe7db3fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determines if a file is readable.  <a href="#a158e1deb611937a6313e8683fe7db3fc"></a><br/></td></tr>
<tr><td colspan="2"><div class="groupHeader">Manipulate</div></td></tr>
<tr class="memitem:af8586b5c4d77ae0617279186b2bfdb66"><td class="memItemLeft" align="right" valign="top">const string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#af8586b5c4d77ae0617279186b2bfdb66">Utils::Argument</a> (string &amp;input, const string &amp;delim=&quot; &quot;)</td></tr>
<tr class="memdesc:af8586b5c4d77ae0617279186b2bfdb66"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the first delimeter separated argument from input and then erases it from input.  <a href="#af8586b5c4d77ae0617279186b2bfdb66"></a><br/></td></tr>
<tr class="memitem:a57b7c6b0c6ea6f1498129d9c9a16d8a8"><td class="memItemLeft" align="right" valign="top">const void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a57b7c6b0c6ea6f1498129d9c9a16d8a8">Utils::CleanupTemp</a> (<a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a> &amp;dir_close, <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a> &amp;dir_open)</td></tr>
<tr class="memdesc:a57b7c6b0c6ea6f1498129d9c9a16d8a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unlinks any temp files leftover from a failed write.  <a href="#a57b7c6b0c6ea6f1498129d9c9a16d8a8"></a><br/></td></tr>
<tr class="memitem:a67fd451200ee8a3cc646aeba5cb9513b"><td class="memItemLeft" align="right" valign="top">const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a67fd451200ee8a3cc646aeba5cb9513b">Utils::FileOpen</a> (ofstream &amp;ofs, const string &amp;file)</td></tr>
<tr class="memdesc:a67fd451200ee8a3cc646aeba5cb9513b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Begins a write to a temporary file that is intended to replace a live file.  <a href="#a67fd451200ee8a3cc646aeba5cb9513b"></a><br/></td></tr>
<tr class="memitem:a46f8de9f032906cc7f0b4c18602e6542"><td class="memItemLeft" align="right" valign="top">const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a46f8de9f032906cc7f0b4c18602e6542">Utils::FileOpen</a> (ifstream &amp;ifs, const string &amp;file, const bool &amp;quiet=false)</td></tr>
<tr class="memdesc:a46f8de9f032906cc7f0b4c18602e6542"><td class="mdescLeft">&#160;</td><td class="mdescRight">Begins a read from a file.  <a href="#a46f8de9f032906cc7f0b4c18602e6542"></a><br/></td></tr>
<tr class="memitem:a7008f8effca71806721305d1834bde1e"><td class="memItemLeft" align="right" valign="top">const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a7008f8effca71806721305d1834bde1e">Utils::FileClose</a> (ifstream &amp;ifs, const bool &amp;quiet=false)</td></tr>
<tr class="memdesc:a7008f8effca71806721305d1834bde1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Completes a read from a file.  <a href="#a7008f8effca71806721305d1834bde1e"></a><br/></td></tr>
<tr class="memitem:a2e9eaa30b811a49ea71003ca3e54fc3c"><td class="memItemLeft" align="right" valign="top">const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a2e9eaa30b811a49ea71003ca3e54fc3c">Utils::FileClose</a> (ofstream &amp;ofs)</td></tr>
<tr class="memdesc:a2e9eaa30b811a49ea71003ca3e54fc3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Completes a write from a file.  <a href="#a2e9eaa30b811a49ea71003ca3e54fc3c"></a><br/></td></tr>
<tr class="memitem:a795e3185f741a3e0ee5025c4266afcd3"><td class="memItemLeft" align="right" valign="top">const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a795e3185f741a3e0ee5025c4266afcd3">Utils::FileClose</a> (ofstream &amp;ofs, const string &amp;dir, const string &amp;file)</td></tr>
<tr class="memdesc:a795e3185f741a3e0ee5025c4266afcd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unlinks file and replaces it with the temp copy after a successful write.  <a href="#a795e3185f741a3e0ee5025c4266afcd3"></a><br/></td></tr>
<tr class="memitem:a4a4d3dfd2ddb691bc5bcff82252c058b"><td class="memTemplParams" colspan="2">template&lt;class K , class V , class I &gt; </td></tr>
<tr class="memitem:a4a4d3dfd2ddb691bc5bcff82252c058b"><td class="memTemplItemLeft" align="right" valign="top">const bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a4a4d3dfd2ddb691bc5bcff82252c058b">Utils::KeyValue</a> (K &amp;key, V &amp;val, const I &amp;item)</td></tr>
<tr class="memdesc:a4a4d3dfd2ddb691bc5bcff82252c058b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Splits a string in the format of key=value. Retains any whitespace in the value.  <a href="#a4a4d3dfd2ddb691bc5bcff82252c058b"></a><br/></td></tr>
<tr class="memitem:aba8fca9daa0f767d7f5af5e2b1d6b81d"><td class="memTemplParams" colspan="2">template&lt;class K , class V &gt; </td></tr>
<tr class="memitem:aba8fca9daa0f767d7f5af5e2b1d6b81d"><td class="memTemplItemLeft" align="right" valign="top">const void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#aba8fca9daa0f767d7f5af5e2b1d6b81d">Utils::KeySet</a> (const bool &amp;igncase, bool &amp;found, const K &amp;keyd, const V &amp;valu, const string &amp;item, string &amp;loc)</td></tr>
<tr class="memdesc:aba8fca9daa0f767d7f5af5e2b1d6b81d"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the contents of keyd == valu, assigns loc = item.  <a href="#aba8fca9daa0f767d7f5af5e2b1d6b81d"></a><br/></td></tr>
<tr class="memitem:a8def6be7e490b6d33b3b51d7fc39f517"><td class="memTemplParams" colspan="2">template&lt;class K , class V , class I , class L &gt; </td></tr>
<tr class="memitem:a8def6be7e490b6d33b3b51d7fc39f517"><td class="memTemplItemLeft" align="right" valign="top">const void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a8def6be7e490b6d33b3b51d7fc39f517">Utils::KeySet</a> (const bool &amp;igncase, bool &amp;found, const K &amp;keyd, const V &amp;valu, const I &amp;item, L &amp;loc, const <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a> &amp;maxv, bool &amp;maxb)</td></tr>
<tr class="memdesc:a8def6be7e490b6d33b3b51d7fc39f517"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the contents of keyd == valu, assigns loc = item.  <a href="#a8def6be7e490b6d33b3b51d7fc39f517"></a><br/></td></tr>
<tr class="memitem:a995fed3bf7ff41788f5b3dbdc6a70ecb"><td class="memItemLeft" align="right" valign="top">const multimap&lt; bool, string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a995fed3bf7ff41788f5b3dbdc6a70ecb">Utils::ListDirectory</a> (const string &amp;dir, const bool &amp;recursive, const bool &amp;path, multimap&lt; bool, string &gt; &amp;output, <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a> &amp;dir_close, <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a> &amp;dir_open)</td></tr>
<tr class="memdesc:a995fed3bf7ff41788f5b3dbdc6a70ecb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a multimap of a specified directory tree on disk.  <a href="#a995fed3bf7ff41788f5b3dbdc6a70ecb"></a><br/></td></tr>
<tr><td colspan="2"><div class="groupHeader">Internal</div></td></tr>
<tr class="memitem:a33e08ea185b71aab494d83322ad3cd53"><td class="memItemLeft" align="right" valign="top">const string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a33e08ea185b71aab494d83322ad3cd53">Utils::_FormatString</a> (const <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a> &amp;narg, const bitset&lt; <a class="el" href="config_8h.xhtml#a67bd2c66766c9c7f481025398b42dadb">CFG_MEM_MAX_BITSET</a> &gt; &amp;flags, const string &amp;caller, const string &amp;fmt,...)</td></tr>
<tr class="memdesc:a33e08ea185b71aab494d83322ad3cd53"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a nested wrapper for <a class="el" href="namespaceUtils.xhtml#a070c642e01b4b1d2ded94e234d32f65e" title="This is the printf-style string formatter. It should not be invoked directly, but rather by using Uti...">Utils::__FormatString</a> and should not be called directly.  <a href="#a33e08ea185b71aab494d83322ad3cd53"></a><br/></td></tr>
<tr class="memitem:a070c642e01b4b1d2ded94e234d32f65e"><td class="memItemLeft" align="right" valign="top">const string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a070c642e01b4b1d2ded94e234d32f65e">Utils::__FormatString</a> (const <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a> &amp;narg, const bitset&lt; <a class="el" href="config_8h.xhtml#a67bd2c66766c9c7f481025398b42dadb">CFG_MEM_MAX_BITSET</a> &gt; &amp;flags, const string &amp;caller, const string &amp;fmt, va_list &amp;val)</td></tr>
<tr class="memdesc:a070c642e01b4b1d2ded94e234d32f65e"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the printf-style string formatter. It should not be invoked directly, but rather by using Utils::FormatString() to ensure proper argument count and caller passing.  <a href="#a070c642e01b4b1d2ded94e234d32f65e"></a><br/></td></tr>
<tr class="memitem:aa2ac8bf1bb304bab8f29829ec30af243"><td class="memItemLeft" align="right" valign="top">const void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#aa2ac8bf1bb304bab8f29829ec30af243">Utils::_Logger</a> (const <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a> &amp;narg, const bitset&lt; <a class="el" href="config_8h.xhtml#a67bd2c66766c9c7f481025398b42dadb">CFG_MEM_MAX_BITSET</a> &gt; &amp;flags, const string &amp;caller, const string &amp;fmt,...)</td></tr>
<tr class="memdesc:aa2ac8bf1bb304bab8f29829ec30af243"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the logging output engine. It should not be invoked directly, but rather by calling Utils::Logger() to ensure proper argument count and caller passing.  <a href="#aa2ac8bf1bb304bab8f29829ec30af243"></a><br/></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="member-group"></a>
Core</h2></td></tr>
<tr class="memitem:a1e42e9736fc6dc3c7450d100f4267a29"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="utils_8h.xhtml#a1e42e9736fc6dc3c7450d100f4267a29">FormatString</a>(flags, fmt,...)&#160;&#160;&#160;_FormatString( <a class="el" href="macros_8h.xhtml#a31b9bcd0e7f30adb8ed947d86d4ae11b">PP_NARG</a>( __VA_ARGS__ ), flags, <a class="el" href="macros_8h.xhtml#a88894f3ccb47c646ae7d86a6d6f80121">_caller_</a>, fmt, ##__VA_ARGS__ )</td></tr>
<tr class="memitem:acf49e3634b60414304a9adfc79e02adb"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="utils_8h.xhtml#acf49e3634b60414304a9adfc79e02adb">Logger</a>(flags, fmt,...)&#160;&#160;&#160;_Logger( <a class="el" href="macros_8h.xhtml#a31b9bcd0e7f30adb8ed947d86d4ae11b">PP_NARG</a>( __VA_ARGS__ ), flags, <a class="el" href="macros_8h.xhtml#a88894f3ccb47c646ae7d86a6d6f80121">_caller_</a>, fmt, ##__VA_ARGS__ )</td></tr>
<tr class="memitem:a35029e6e20697c4fef5121040892e144"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a35029e6e20697c4fef5121040892e144"><td class="memTemplItemLeft" align="right" valign="top">const string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a35029e6e20697c4fef5121040892e144">Utils::DelSpaces</a> (const T &amp;t)</td></tr>
<tr class="memdesc:a35029e6e20697c4fef5121040892e144"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string with all whitespace characters removed.  <a href="#a35029e6e20697c4fef5121040892e144"></a><br/></td></tr>
<tr class="memitem:a9b70f9dd0af906c806695b35488e778f"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a9b70f9dd0af906c806695b35488e778f"><td class="memTemplItemLeft" align="right" valign="top">const string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a9b70f9dd0af906c806695b35488e778f">Utils::Lower</a> (const T &amp;t)</td></tr>
<tr class="memdesc:a9b70f9dd0af906c806695b35488e778f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string converted to all lowercase letters.  <a href="#a9b70f9dd0af906c806695b35488e778f"></a><br/></td></tr>
<tr class="memitem:a1cd33b86e538bb0c765d5c0bcde259e1"><td class="memTemplParams" colspan="2">template&lt;class T , class V &gt; </td></tr>
<tr class="memitem:a1cd33b86e538bb0c765d5c0bcde259e1"><td class="memTemplItemLeft" align="right" valign="top">const string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a1cd33b86e538bb0c765d5c0bcde259e1">Utils::MakePair</a> (const T &amp;t, const V &amp;v)</td></tr>
<tr class="memdesc:a1cd33b86e538bb0c765d5c0bcde259e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generates a string from the pair of t and v.  <a href="#a1cd33b86e538bb0c765d5c0bcde259e1"></a><br/></td></tr>
<tr class="memitem:a817d26eb6a3427ad3742fb3cb788d30e"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a817d26eb6a3427ad3742fb3cb788d30e"><td class="memTemplItemLeft" align="right" valign="top">const string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a817d26eb6a3427ad3742fb3cb788d30e">Utils::Upper</a> (const T &amp;t)</td></tr>
<tr class="memdesc:a817d26eb6a3427ad3742fb3cb788d30e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string converted to all uppercase letters.  <a href="#a817d26eb6a3427ad3742fb3cb788d30e"></a><br/></td></tr>
<tr class="memitem:a594756861a60d256d31db7bb34ea70de"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a594756861a60d256d31db7bb34ea70de"><td class="memTemplItemLeft" align="right" valign="top">const string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a594756861a60d256d31db7bb34ea70de">Utils::String</a> (const T &amp;t)</td></tr>
<tr class="memdesc:a594756861a60d256d31db7bb34ea70de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string object from any data type: bool, int, char, etc.  <a href="#a594756861a60d256d31db7bb34ea70de"></a><br/></td></tr>
<tr class="memitem:ac41c505e3efccab8549238e6843b0d2e"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#ac41c505e3efccab8549238e6843b0d2e">Utils::DirExists</a> (const string &amp;dir)</td></tr>
<tr class="memdesc:ac41c505e3efccab8549238e6843b0d2e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determines if a directory exists on disk.  <a href="#ac41c505e3efccab8549238e6843b0d2e"></a><br/></td></tr>
<tr class="memitem:ad21617b756ef242fbc66e63dec3e4e4d"><td class="memItemLeft" align="right" valign="top">const string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#ad21617b756ef242fbc66e63dec3e4e4d">Utils::DirPath</a> (const string &amp;dir, const string &amp;file, const string &amp;ext=&quot;&quot;)</td></tr>
<tr class="memdesc:ad21617b756ef242fbc66e63dec3e4e4d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string consisting of directory/file.ext.  <a href="#ad21617b756ef242fbc66e63dec3e4e4d"></a><br/></td></tr>
<tr class="memitem:a3e236b07fd628bcaf2e7c5854dd2a281"><td class="memItemLeft" align="right" valign="top">const string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a3e236b07fd628bcaf2e7c5854dd2a281">Utils::FileExt</a> (const string &amp;file, const string &amp;ext)</td></tr>
<tr class="memdesc:a3e236b07fd628bcaf2e7c5854dd2a281"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string consisting of file.ext.  <a href="#a3e236b07fd628bcaf2e7c5854dd2a281"></a><br/></td></tr>
<tr class="memitem:afaf029667f299587a52ba9c8de11edfa"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#afaf029667f299587a52ba9c8de11edfa">Utils::NumChar</a> (const string &amp;input, const string &amp;item)</td></tr>
<tr class="memdesc:afaf029667f299587a52ba9c8de11edfa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of a specific character in a given string.  <a href="#afaf029667f299587a52ba9c8de11edfa"></a><br/></td></tr>
<tr class="memitem:aae00a79736ae72b75138cc6576462a2a"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a">uint_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#aae00a79736ae72b75138cc6576462a2a">Utils::ReadIndex</a> (const string &amp;input)</td></tr>
<tr class="memdesc:aae00a79736ae72b75138cc6576462a2a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extracts the index of an array from a string.  <a href="#aae00a79736ae72b75138cc6576462a2a"></a><br/></td></tr>
<tr class="memitem:a11bfe61c6e77603d59116397b1d3f580"><td class="memItemLeft" align="right" valign="top">const pair&lt; string, string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a11bfe61c6e77603d59116397b1d3f580">Utils::ReadPair</a> (const string &amp;input)</td></tr>
<tr class="memdesc:a11bfe61c6e77603d59116397b1d3f580"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pair of type T,V after receiving an input string generated from <a class="el" href="namespaceUtils.xhtml#a1cd33b86e538bb0c765d5c0bcde259e1" title="Generates a string from the pair of t and v.">Utils::MakePair()</a>.  <a href="#a11bfe61c6e77603d59116397b1d3f580"></a><br/></td></tr>
<tr class="memitem:ae271a91ecdd19bee0e111252e0621054"><td class="memItemLeft" align="right" valign="top">const string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#ae271a91ecdd19bee0e111252e0621054">Utils::ReadString</a> (ifstream &amp;input)</td></tr>
<tr class="memdesc:ae271a91ecdd19bee0e111252e0621054"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reads a string written by <a class="el" href="namespaceUtils.xhtml#a446c2842f342ba8c9e9ba3cf5d971df7" title="Wraps a string in container edges suitable for multi-line read/writing.">Utils::WriteString</a> to strip off the container edges.  <a href="#ae271a91ecdd19bee0e111252e0621054"></a><br/></td></tr>
<tr class="memitem:adafa6fa32d5b637ea62db12aa35db6e0"><td class="memItemLeft" align="right" valign="top">const string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#adafa6fa32d5b637ea62db12aa35db6e0">Utils::Salt</a> (const string &amp;input)</td></tr>
<tr class="memdesc:adafa6fa32d5b637ea62db12aa35db6e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a salt value for use with crypt.  <a href="#adafa6fa32d5b637ea62db12aa35db6e0"></a><br/></td></tr>
<tr class="memitem:a8c70e85acdb1549aa4cd3a16b8d8d9cf"><td class="memItemLeft" align="right" valign="top">const vector&lt; string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a8c70e85acdb1549aa4cd3a16b8d8d9cf">Utils::StrNewlines</a> (const string &amp;input)</td></tr>
<tr class="memdesc:a8c70e85acdb1549aa4cd3a16b8d8d9cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a vector of strings split at linebreaks based on input.  <a href="#a8c70e85acdb1549aa4cd3a16b8d8d9cf"></a><br/></td></tr>
<tr class="memitem:acf9ee675ffc2d73b7b2a2a71aa68e36a"><td class="memItemLeft" align="right" valign="top">const bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#acf9ee675ffc2d73b7b2a2a71aa68e36a">Utils::StrPrefix</a> (const string &amp;s1, const string &amp;s2, const bool &amp;igncase=false)</td></tr>
<tr class="memdesc:acf9ee675ffc2d73b7b2a2a71aa68e36a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns if string s1 is a prefix of string s2.  <a href="#acf9ee675ffc2d73b7b2a2a71aa68e36a"></a><br/></td></tr>
<tr class="memitem:a2b2dad8fa1999271cf613dc735f851d4"><td class="memItemLeft" align="right" valign="top">const string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a2b2dad8fa1999271cf613dc735f851d4">Utils::StrTime</a> (const time_t &amp;now=chrono::high_resolution_clock::to_time_t(chrono::high_resolution_clock::now()))</td></tr>
<tr class="memdesc:a2b2dad8fa1999271cf613dc735f851d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a given time as a string.  <a href="#a2b2dad8fa1999271cf613dc735f851d4"></a><br/></td></tr>
<tr class="memitem:a402a36406edb7938330204e83b1abe83"><td class="memItemLeft" align="right" valign="top">const vector&lt; string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a402a36406edb7938330204e83b1abe83">Utils::StrTokens</a> (const string &amp;input, const bool &amp;quiet=false)</td></tr>
<tr class="memdesc:a402a36406edb7938330204e83b1abe83"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a vector of strings split at spaces based on input.  <a href="#a402a36406edb7938330204e83b1abe83"></a><br/></td></tr>
<tr class="memitem:a446c2842f342ba8c9e9ba3cf5d971df7"><td class="memItemLeft" align="right" valign="top">const string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceUtils.xhtml#a446c2842f342ba8c9e9ba3cf5d971df7">Utils::WriteString</a> (const string &amp;input)</td></tr>
<tr class="memdesc:a446c2842f342ba8c9e9ba3cf5d971df7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wraps a string in container edges suitable for multi-line read/writing.  <a href="#a446c2842f342ba8c9e9ba3cf5d971df7"></a><br/></td></tr>
</table>
<a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>This file contains the <a class="el" href="namespaceUtils.xhtml" title="The Utils namespace contains all general purpose, multi-use, and non-class functions.">Utils</a> namespace and template functions. </p>

<p>Definition in file <a class="el" href="utils_8h_source.xhtml">utils.h</a>.</p>
</div><h2>Macro Definition Documentation</h2>
<a class="anchor" id="a1e42e9736fc6dc3c7450d100f4267a29"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define FormatString</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">flags, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">fmt, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>...</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;_FormatString( <a class="el" href="macros_8h.xhtml#a31b9bcd0e7f30adb8ed947d86d4ae11b">PP_NARG</a>( __VA_ARGS__ ), flags, <a class="el" href="macros_8h.xhtml#a88894f3ccb47c646ae7d86a6d6f80121">_caller_</a>, fmt, ##__VA_ARGS__ )</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="utils_8h_source.xhtml#l00121">121</a> of file <a class="el" href="utils_8h_source.xhtml">utils.h</a>.</p>

</div>
</div>
<a class="anchor" id="acf49e3634b60414304a9adfc79e02adb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define Logger</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">flags, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">fmt, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>...</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;_Logger( <a class="el" href="macros_8h.xhtml#a31b9bcd0e7f30adb8ed947d86d4ae11b">PP_NARG</a>( __VA_ARGS__ ), flags, <a class="el" href="macros_8h.xhtml#a88894f3ccb47c646ae7d86a6d6f80121">_caller_</a>, fmt, ##__VA_ARGS__ )</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="utils_8h_source.xhtml#l00122">122</a> of file <a class="el" href="utils_8h_source.xhtml">utils.h</a>.</p>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Sun Jun 16 2013 20:59:31 for NAMS - Not Another MUD Server by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.1.2
</small></address>
</body>
</html>
