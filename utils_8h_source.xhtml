<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>NAMS - Not Another MUD Server: h/utils.h Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">NAMS - Not Another MUD Server
   
   </div>
   <div id="projectbrief">NAMS is a C++ MUD server with the primary goals of a safe, modular design and a server core that is substantially decouppled from game logic.</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="dynsections.js"></script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">h/utils.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="utils_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/***************************************************************************</span>
<a name="l00002"></a>00002 <span class="comment"> * NAMS - Not Another MUD Server                                           *</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2012 Matthew Goff (matt@goff.cc) &lt;http://www.ackmud.net/&gt; *</span>
<a name="l00004"></a>00004 <span class="comment"> *                                                                         *</span>
<a name="l00005"></a>00005 <span class="comment"> * This program is free software: you can redistribute it and/or modify    *</span>
<a name="l00006"></a>00006 <span class="comment"> * it under the terms of the GNU General Public License as published by    *</span>
<a name="l00007"></a>00007 <span class="comment"> * the Free Software Foundation, either version 3 of the License, or       *</span>
<a name="l00008"></a>00008 <span class="comment"> * (at your option) any later version.                                     *</span>
<a name="l00009"></a>00009 <span class="comment"> *                                                                         *</span>
<a name="l00010"></a>00010 <span class="comment"> * This program is distributed in the hope that it will be useful,         *</span>
<a name="l00011"></a>00011 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of          *</span>
<a name="l00012"></a>00012 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *</span>
<a name="l00013"></a>00013 <span class="comment"> * GNU General Public License for more details.                            *</span>
<a name="l00014"></a>00014 <span class="comment"> *                                                                         *</span>
<a name="l00015"></a>00015 <span class="comment"> * You should have received a copy of the GNU General Public License       *</span>
<a name="l00016"></a>00016 <span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.   *</span>
<a name="l00017"></a>00017 <span class="comment"> ***************************************************************************/</span>
<a name="l00024"></a>00024 <span class="preprocessor">#ifndef DEC_UTILS_H</span>
<a name="l00025"></a>00025 <span class="preprocessor"></span><span class="preprocessor">#define DEC_UTILS_H</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;bitset&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;cstdarg&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;cstdio&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;iterator&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;dirent.h&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;sys/stat.h&gt;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="keyword">using namespace </span>std;
<a name="l00038"></a>00038 
<a name="l00039"></a><a class="code" href="namespaceUtils.xhtml">00039</a> <span class="keyword">namespace </span>Utils { 
<a name="l00041"></a><a class="code" href="namespaceUtils.xhtml#a35029e6e20697c4fef5121040892e144">00041</a>     <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.xhtml#a35029e6e20697c4fef5121040892e144">DelSpaces</a>( <span class="keyword">const</span> T&amp; t ) { <span class="keywordtype">string</span> output( t ); output.erase( remove_if( output.begin(), output.end(), ::isspace ), output.end() ); <span class="keywordflow">return</span> output; }
<a name="l00042"></a><a class="code" href="namespaceUtils.xhtml#a9b70f9dd0af906c806695b35488e778f">00042</a>     <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.xhtml#a9b70f9dd0af906c806695b35488e778f">Lower</a>( <span class="keyword">const</span> T&amp; t ) { <span class="keywordtype">string</span> output( t ); transform( output.begin(), output.end(), output.begin(), ::tolower ); <span class="keywordflow">return</span> output; }
<a name="l00043"></a><a class="code" href="namespaceUtils.xhtml#a817d26eb6a3427ad3742fb3cb788d30e">00043</a>     <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.xhtml#a817d26eb6a3427ad3742fb3cb788d30e">Upper</a>( <span class="keyword">const</span> T&amp; t ) { <span class="keywordtype">string</span> output( t ); transform( output.begin(), output.end(), output.begin(), ::toupper ); <span class="keywordflow">return</span> output; }
<a name="l00044"></a><a class="code" href="namespaceUtils.xhtml#a594756861a60d256d31db7bb34ea70de">00044</a>     <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.xhtml#a594756861a60d256d31db7bb34ea70de">String</a>( <span class="keyword">const</span> T&amp; t ) { stringstream ss( t ); <span class="keywordflow">return</span> ss.str(); }
<a name="l00045"></a>00045     <span class="keyword">const</span> timeval <a class="code" href="namespaceUtils.xhtml#adbb91eecf7e80e6e97b3ebe38123cc12" title="Returns the current system time.">CurrentTime</a>();
<a name="l00046"></a>00046     <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> <a class="code" href="namespaceUtils.xhtml#a405af6e04f92e289f5be1f8ae24a78ee" title="Calculates the different between two timeval variables.">DiffTime</a>( <span class="keyword">const</span> timeval&amp; prev, <span class="keyword">const</span> timeval&amp; current, <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; granularity );
<a name="l00047"></a>00047     <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.xhtml#addb4a550d4405e6351e52a275fae8107" title="Returns a string consisting of directory/file.ext.">DirPath</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; directory, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; ext = <span class="stringliteral">&quot;&quot;</span> );
<a name="l00048"></a>00048     <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.xhtml#a33e08ea185b71aab494d83322ad3cd53" title="This is a nested wrapper for Utils::__FormatString and should not be called directly.">_FormatString</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; narg, <span class="keyword">const</span> bitset&lt;CFG_MEM_MAX_BITSET&gt;&amp; flags, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; caller, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; fmt, ... );
<a name="l00049"></a>00049     <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.xhtml#a070c642e01b4b1d2ded94e234d32f65e" title="This is the printf-style string formatter. It should not be invoked directly, but rather by using Uti...">__FormatString</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; narg, <span class="keyword">const</span> bitset&lt;CFG_MEM_MAX_BITSET&gt;&amp; flags, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; caller, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; fmt, va_list&amp; val );
<a name="l00050"></a><a class="code" href="utils_8h.xhtml#a1e42e9736fc6dc3c7450d100f4267a29">00050</a> <span class="preprocessor">    #define FormatString( flags, fmt, ... ) _FormatString( PP_NARG( __VA_ARGS__ ), flags, _caller_, fmt, ##__VA_ARGS__ )</span>
<a name="l00051"></a>00051 <span class="preprocessor"></span>    <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="namespaceUtils.xhtml#aa2ac8bf1bb304bab8f29829ec30af243" title="This is the logging output engine. It should not be invoked directly, but rather by calling Utils::Lo...">_Logger</a>( <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; narg, <span class="keyword">const</span> bitset&lt;CFG_MEM_MAX_BITSET&gt;&amp; flags, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; caller, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; fmt, ... );
<a name="l00052"></a><a class="code" href="utils_8h.xhtml#acf49e3634b60414304a9adfc79e02adb">00052</a> <span class="preprocessor">    #define Logger( flags, fmt, ... ) _Logger( PP_NARG( __VA_ARGS__ ), flags, _caller_, fmt, ##__VA_ARGS__ )</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span>    <span class="keyword">const</span> <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a> <a class="code" href="namespaceUtils.xhtml#afaf029667f299587a52ba9c8de11edfa" title="Returns the number of a specific character in a given string.">NumChar</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; input, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; item );
<a name="l00054"></a>00054     <span class="keyword">const</span> vector&lt;string&gt; <a class="code" href="namespaceUtils.xhtml#a8c70e85acdb1549aa4cd3a16b8d8d9cf" title="Returns a vector of strings split at linebreaks based on input.">StrNewlines</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; input );
<a name="l00055"></a>00055     <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="namespaceUtils.xhtml#aa3855eafe3e4898c743bc47cdc962a4a" title="Returns a given time as a string.">StrTime</a>( <span class="keyword">const</span> timeval&amp; now );
<a name="l00056"></a>00056     <span class="keyword">const</span> vector&lt;string&gt; <a class="code" href="namespaceUtils.xhtml#a498e31ec51c129ae9b68a20aa4e05c57" title="Returns a vector of strings split at spaces based on input.">StrTokens</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; input ); 
<a name="l00060"></a>00060     <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.xhtml#a303e8afc983db3b483fb450a1c499c1e" title="Determines if a file path is a directory or file on disk.">iDirectory</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; dir );
<a name="l00061"></a>00061     <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.xhtml#a7d40818a602fb21db4b4f0917705f85b" title="Determines if a file path is a file or directory on disk.">iFile</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file );
<a name="l00062"></a>00062     <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.xhtml#a47aae40aead5b696e927fb0cdd336442" title="Determines if a string is only a string of numerical values.">iNumber</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; input );
<a name="l00063"></a>00063     <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.xhtml#a158e1deb611937a6313e8683fe7db3fc" title="Determines if a file is readable.">iReadable</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file ); 
<a name="l00067"></a><a class="code" href="classUtils_1_1DeleteObject.xhtml">00067</a>     <span class="keyword">class </span><a class="code" href="classUtils_1_1DeleteObject.xhtml">DeleteObject</a>
<a name="l00068"></a>00068     {
<a name="l00069"></a>00069         <span class="keyword">public</span>:
<a name="l00070"></a><a class="code" href="classUtils_1_1DeleteObject.xhtml#a89315a95b06d363275626abb137a4b6e">00070</a>             <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">void</span> operator() ( <span class="keyword">const</span> T* ptr )<span class="keyword"> const </span>{ <span class="keyword">delete</span> ptr; }
<a name="l00071"></a>00071     };
<a name="l00072"></a><a class="code" href="namespaceUtils.xhtml#a4a4d3dfd2ddb691bc5bcff82252c058b">00072</a>     <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">class</span> V, <span class="keyword">class</span> I&gt; <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceUtils.xhtml#a4a4d3dfd2ddb691bc5bcff82252c058b">KeyValue</a>( K&amp; key, V&amp; val, <span class="keyword">const</span> I&amp; item )
<a name="l00073"></a>00073     {
<a name="l00074"></a>00074         <span class="keywordtype">size_t</span> loc = 0;
<a name="l00075"></a>00075 
<a name="l00076"></a>00076         <span class="keywordflow">if</span> ( ( loc = item.find( <span class="stringliteral">&quot;=&quot;</span> ) ) == string::npos )
<a name="l00077"></a>00077             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00078"></a>00078 
<a name="l00079"></a>00079         key = item.substr( 0, loc - 1 );
<a name="l00080"></a>00080         val = item.substr( loc + 1, item.length() );
<a name="l00081"></a>00081         loc = key.find_last_not_of( <span class="stringliteral">&quot; &quot;</span> );
<a name="l00082"></a>00082         key.erase( loc + 1 );
<a name="l00083"></a>00083         loc = val.find_first_not_of( <span class="stringliteral">&quot; &quot;</span> );
<a name="l00084"></a>00084         val.erase( 0, loc );
<a name="l00085"></a>00085 
<a name="l00086"></a>00086         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00087"></a>00087     }
<a name="l00088"></a><a class="code" href="namespaceUtils.xhtml#aba8fca9daa0f767d7f5af5e2b1d6b81d">00088</a>     <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">class</span> V&gt; <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="namespaceUtils.xhtml#aba8fca9daa0f767d7f5af5e2b1d6b81d">KeySet</a>( <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; igncase, <span class="keywordtype">bool</span>&amp; found, <span class="keyword">const</span> K&amp; keyd, <span class="keyword">const</span> V&amp; valu, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; item, <span class="keywordtype">string</span>&amp; loc )
<a name="l00089"></a>00089     {
<a name="l00090"></a>00090         <span class="keywordtype">string</span> key( keyd );
<a name="l00091"></a>00091         <span class="keywordtype">string</span> val( valu );
<a name="l00092"></a>00092 
<a name="l00093"></a>00093         <span class="keywordflow">if</span> ( igncase )
<a name="l00094"></a>00094         {
<a name="l00095"></a>00095             transform( key.begin(), key.end(), key.begin(), ::tolower );
<a name="l00096"></a>00096             transform( val.begin(), val.end(), val.begin(), ::tolower );
<a name="l00097"></a>00097         }
<a name="l00098"></a>00098 
<a name="l00099"></a>00099         <span class="keywordflow">if</span> ( key.compare( val ) == 0 )
<a name="l00100"></a>00100         {
<a name="l00101"></a>00101             loc = item;
<a name="l00102"></a>00102             found = <span class="keyword">true</span>;
<a name="l00103"></a>00103 
<a name="l00104"></a>00104             <span class="keywordflow">return</span>;
<a name="l00105"></a>00105         }
<a name="l00106"></a>00106 
<a name="l00107"></a>00107         <span class="keywordflow">return</span>;
<a name="l00108"></a>00108     }
<a name="l00109"></a><a class="code" href="namespaceUtils.xhtml#a0aff3514e06faae8ed026c673efe002b">00109</a>     <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">class</span> V, <span class="keyword">class</span> I, <span class="keyword">class</span> L&gt; <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">void</span> <a class="code" href="namespaceUtils.xhtml#aba8fca9daa0f767d7f5af5e2b1d6b81d">KeySet</a>( <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; igncase, <span class="keywordtype">bool</span>&amp; found, <span class="keyword">const</span> K&amp; keyd, <span class="keyword">const</span> V&amp; valu, <span class="keyword">const</span> I&amp; item, L&amp; loc )
<a name="l00110"></a>00110     {
<a name="l00111"></a>00111         <span class="keywordtype">string</span> key( keyd );
<a name="l00112"></a>00112         <span class="keywordtype">string</span> val( valu );
<a name="l00113"></a>00113 
<a name="l00114"></a>00114         <span class="keywordflow">if</span> ( igncase )
<a name="l00115"></a>00115         {
<a name="l00116"></a>00116             transform( key.begin(), key.end(), key.begin(), ::tolower );
<a name="l00117"></a>00117             transform( val.begin(), val.end(), val.begin(), ::tolower );
<a name="l00118"></a>00118         }
<a name="l00119"></a>00119 
<a name="l00120"></a>00120         <span class="keywordflow">if</span> ( key.compare( val ) == 0 )
<a name="l00121"></a>00121         {
<a name="l00122"></a>00122             <span class="keywordtype">string</span> tf( item );
<a name="l00123"></a>00123 
<a name="l00124"></a>00124             <span class="comment">// Allow bools be any of: true / 1 or false / 0</span>
<a name="l00125"></a>00125             transform( tf.begin(), tf.end(), tf.begin(), ::tolower );
<a name="l00126"></a>00126 
<a name="l00127"></a>00127             <span class="keywordflow">if</span> ( tf.compare( <span class="stringliteral">&quot;true&quot;</span> ) == 0 )
<a name="l00128"></a>00128                 loc = <span class="keyword">true</span>;
<a name="l00129"></a>00129             <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( tf.compare( <span class="stringliteral">&quot;false&quot;</span> ) == 0 )
<a name="l00130"></a>00130                 loc = <span class="keyword">false</span>;
<a name="l00131"></a>00131             <span class="keywordflow">else</span>
<a name="l00132"></a>00132                 stringstream( item ) &gt;&gt; loc;
<a name="l00133"></a>00133             found = <span class="keyword">true</span>;
<a name="l00134"></a>00134 
<a name="l00135"></a>00135             <span class="keywordflow">return</span>;
<a name="l00136"></a>00136         }
<a name="l00137"></a>00137 
<a name="l00138"></a>00138         <span class="keywordflow">return</span>;
<a name="l00139"></a>00139     }
<a name="l00140"></a>00140     <span class="keyword">const</span> multimap&lt;bool,string&gt; <a class="code" href="namespaceUtils.xhtml#a014607a95c6d01ee99564479b3620ee7" title="Return a multimap of a specified directory tree on disk.">ListDirectory</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; dir, <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; recursive, multimap&lt;bool,string&gt;&amp; output, <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; dir_close, <a class="code" href="limits_8h.xhtml#a83d6866a5b3c76f2ad436a370ecd5b5a" title="An unsigned integer value based upon system limits.">uint_t</a>&amp; dir_open ); 
<a name="l00145"></a>00145 };
<a name="l00146"></a>00146 
<a name="l00147"></a>00147 <span class="preprocessor">#endif</span>
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Mon Nov 26 2012 17:11:51 for NAMS - Not Another MUD Server by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
